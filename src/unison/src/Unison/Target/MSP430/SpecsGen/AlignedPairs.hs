-- This file has been generated by specsgen. Do not modify by hand!

module Unison.Target.MSP430.SpecsGen.AlignedPairs (alignedPairs)
       where
import Unison.Target.MSP430.SpecsGen.MSP430InstructionDecl
alignedPairs i ([], []) | i `elem` [NOP, RET, RETI] = []
alignedPairs i ([], [_])
  | i `elem` [IMPLICIT_DEF, LOAD_STACK_GUARD] = []
alignedPairs i ([], [_]) | i `elem` [POP16r] = []
alignedPairs i ([_], []) | i `elem` [ADJCALLSTACKDOWN] = []
alignedPairs i ([_, _], []) | i `elem` [ADJCALLSTACKUP] = []
alignedPairs i ([base], [_, base'])
  | i `elem` [MOV16rm_POST, MOV8rm_POST] = [(base, base')]
alignedPairs i ([_], []) | i `elem` [Bi, Br] = []
alignedPairs i ([_, _], []) | i `elem` [Bm] = []
alignedPairs i ([_], []) | i `elem` [CALLi, CALLr, JMP] = []
alignedPairs i ([_, _], []) | i `elem` [JCC] = []
alignedPairs i ([_, _], []) | i `elem` [CALLm] = []
alignedPairs i ([_, _, _], [])
  | i `elem`
      [ADC16mi, ADC16mr, ADC8mi, ADC8mr, ADD16mi, ADD16mr, ADD8mi,
       ADD8mr, AND16mi, AND16mr, AND8mi, AND8mr, BIC16mr, BIC8mr, MOV16mi,
       MOV16mr, MOV8mi, MOV8mr, OR16mi, OR16mr, OR8mi, OR8mr, SBC16mi,
       SBC16mr, SBC8mi, SBC8mr, SUB16mi, SUB16mr, SUB8mi, SUB8mr, Store,
       XOR16mi, XOR16mr, XOR8mi, XOR8mr]
    = []
alignedPairs i ([_, _, _, _], [])
  | i `elem`
      [ADC16mm, ADC8mm, ADD16mm, ADD8mm, AND16mm, AND8mm, BIC16mm,
       BIC8mm, MOV16mm, MOV8mm, OR16mm, OR8mm, SBC16mm, SBC8mm, SUB16mm,
       SUB8mm, XOR16mm, XOR8mm]
    = []
alignedPairs i ([_], [])
  | i `elem`
      [CFI_INSTRUCTION, EH_LABEL, GC_LABEL, LIFETIME_END, LIFETIME_START]
    = []
alignedPairs i ([_, _, _, _, _, _], [_])
  | i `elem` [PATCHPOINT] = []
alignedPairs i ([_, _, _], []) | i `elem` [STACKMAP] = []
alignedPairs i ([_, _, _], [_]) | i `elem` [SUBREG_TO_REG] = []
alignedPairs i ([_], []) | i `elem` [PUSH16r] = []
alignedPairs i ([_], [_])
  | i `elem`
      [COPY, MOV16ri, MOV16rr, MOV8ri, MOV8rr, MOVZX16rr8, Move]
    = []
alignedPairs i ([src], [src'])
  | i `elem`
      [SAR16r1, SAR16r1c, SAR8r1, SAR8r1c, SEXT16r, SHL16r1, SHL8r1,
       SWPB16r, ZEXT16r]
    = [(src, src')]
alignedPairs i ([src, base], [src', base'])
  | i `elem`
      [ADD16rm_POST, ADD8rm_POST, AND16rm_POST, AND8rm_POST, OR16rm_POST,
       OR8rm_POST, SUB16rm_POST, SUB8rm_POST, XOR16rm_POST, XOR8rm_POST]
    = [(src, src'), (base, base')]
alignedPairs i ([_, _], [_])
  | i `elem` [Shl16, Shl8, Sra16, Sra8, Srl16, Srl8] = []
alignedPairs i ([_, _], [_]) | i `elem` [COPY_TO_REGCLASS] = []
alignedPairs i ([_, _], [])
  | i `elem`
      [BIT16ri, BIT16rr, BIT8ri, BIT8rr, CMP16ri, CMP16rr, CMP8ri,
       CMP8rr]
    = []
alignedPairs i ([src, _], [src'])
  | i `elem`
      [ADC16ri, ADC16rr, ADC8ri, ADC8rr, ADD16ri, ADD16rr, ADD8ri,
       ADD8rr, AND16ri, AND16rr, AND8ri, AND8rr, BIC16rr, BIC8rr, OR16ri,
       OR16rr, OR8ri, OR8rr, SBC16ri, SBC16rr, SBC8ri, SBC8rr, SUB16ri,
       SUB16rr, SUB8ri, SUB8rr, XOR16ri, XOR16rr, XOR8ri, XOR8rr]
    = [(src, src')]
alignedPairs i ([_, _, _], [_]) | i `elem` [Select16, Select8] = []
alignedPairs i ([_, _, _], [])
  | i `elem` [BIT16rm, BIT8rm, CMP16rm, CMP8rm] = []
alignedPairs i ([src, _, _], [src'])
  | i `elem`
      [ADC16rm, ADC8rm, ADD16rm, ADD8rm, AND16rm, AND8rm, BIC16rm,
       BIC8rm, OR16rm, OR8rm, SBC16rm, SBC8rm, SUB16rm, SUB8rm, XOR16rm,
       XOR8rm]
    = [(src, src')]
alignedPairs i ([_, _], [_])
  | i `elem` [Load, MOV16rm, MOV8rm, MOVZX16rm8] = []
alignedPairs i ([_, _, _], [])
  | i `elem`
      [BIT16mi, BIT16mr, BIT8mi, BIT8mr, CMP16mi, CMP16mr, CMP8mi,
       CMP8mr]
    = []
alignedPairs i ([_, _, _, _], []) | i `elem` [BIT16mm, BIT8mm] = []
alignedPairs i ([_, _], [_]) | i `elem` [EXTRACT_SUBREG] = []
alignedPairs i ([supersrc, _, _], [supersrc'])
  | i `elem` [INSERT_SUBREG] = [(supersrc, supersrc')]
alignedPairs i ([_, _], [_]) | i `elem` [REG_SEQUENCE] = []
alignedPairs i ([_, _], []) | i `elem` [LOCAL_ESCAPE] = []
alignedPairs i ([_], [])
  | i `elem` [BUNDLE, DBG_VALUE, INLINEASM, KILL, PHI, STATEPOINT] =
    []
alignedPairs i ([_], [_]) | i `elem` [FAULTING_LOAD_OP] = []
alignedPairs _ _ = []

