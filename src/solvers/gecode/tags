!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	models/parameters.hpp	/^  vector<alignable> A;$/;"	m	class:Parameters
AC	models/parameters.hpp	/^  vector<activation_class> AC;$/;"	m	class:Parameters
ACTIVE	inspectors/dataflowinspector.hpp	/^enum NodeType {INACTIVE, UNDECIDEDACTIVENESS, ACTIVE};$/;"	e	enum:NodeType
ACTIVENESS	branchers/routingbrancher.cpp	/^  enum RoutingDecision { ACTIVENESS, INSTRUCTION, TEMPORARY };$/;"	e	enum:RoutingBrancher::RoutingDecision	file:
ACTIVE_EXPR	common/definitions.hpp	/^    ACTIVE_EXPR,		\/\/ ex-PRESOLVER_ACTIVENESS$/;"	e	enum:UnisonConstraintExprId
AGGRESSIVE_SEARCH	common/definitions.hpp	/^const char AGGRESSIVE_SEARCH = 'a';$/;"	v
ALIGNAS	third-party/jsoncpp/json_value.cpp	30;"	d	file:
ALIGNED_EXPR	common/definitions.hpp	/^    ALIGNED_EXPR$/;"	e	enum:UnisonConstraintExprId
ALLOCATED_EXPR	common/definitions.hpp	/^    ALLOCATED_EXPR,		\/\/ ex-PRESOLVER_OPERAND_CLASS$/;"	e	enum:UnisonConstraintExprId
AND_EXPR	common/definitions.hpp	/^    AND_EXPR,$/;"	e	enum:UnisonConstraintExprId
AR	div-generated.mk	/^AR            = ar cqs$/;"	m
AR	generated.mk	/^AR            = ar cqs$/;"	m
AR	presolver-generated.mk	/^AR            = ar cqs$/;"	m
ASSIGNED	inspectors/dataflowinspector.hpp	/^enum EdgeType {FIXED, DISCARDED, POSSIBLE, ASSIGNED};$/;"	e	enum:EdgeType
ActiveTableResult	procedures/presolverprocedures.hpp	/^class ActiveTableResult {$/;"	c
ActivenessChoice	branchers/routingbrancher.cpp	/^    ActivenessChoice(const RoutingBrancher& b, unsigned int oi0)$/;"	f	class:RoutingBrancher::ActivenessChoice
ActivenessChoice	branchers/routingbrancher.cpp	/^  class ActivenessChoice : public SingleChoice<RoutingBrancher, unsigned int> {$/;"	c	class:RoutingBrancher	file:
All	third-party/jsoncpp/json_writer.cpp	/^    All  \/\/\/< Keep all comments.$/;"	e	enum:Json::CommentStyle::Enum	file:
AllocationInspector	inspectors/allocationinspector.cpp	/^AllocationInspector::AllocationInspector() :$/;"	f	class:AllocationInspector
AllocationInspector	inspectors/allocationinspector.hpp	/^class AllocationInspector : public ConsoleInspector {$/;"	c
Args	third-party/jsoncpp/json/value.h	/^  typedef std::vector<PathArgument> Args;$/;"	t	class:Json::Path
ArrayIndex	third-party/jsoncpp/json/forwards.h	/^typedef unsigned int ArrayIndex;$/;"	t	namespace:Json
ArrayIndex	third-party/jsoncpp/json/value.h	/^  typedef Json::ArrayIndex ArrayIndex;$/;"	t	class:Json::Value
AssignmentInspector	inspectors/assignmentinspector.hpp	/^class AssignmentInspector : public ModelInspector {$/;"	c
AvoidHint	common/definitions.hpp	/^typedef tuple<operand, vector<register_atom> > AvoidHint;$/;"	t
B	models/parameters.hpp	/^  vector<block> B;$/;"	m	class:Parameters
BB	inspectors/dot.hpp	56;"	d
BRANCH	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
BR_ORIGINAL	common/definitions.hpp	/^    BR_ORIGINAL,$/;"	e	enum:brtype
BR_ORIGINAL_COSTLAST	common/definitions.hpp	/^    BR_ORIGINAL_COSTLAST,$/;"	e	enum:brtype
BR_RND	common/definitions.hpp	/^    BR_RND,$/;"	e	enum:brtype
BR_RND_COSTLAST	common/definitions.hpp	/^    BR_RND_COSTLAST,$/;"	e	enum:brtype
BeforePresolver	presolver/before_presolver.cpp	/^BeforePresolver::BeforePresolver(Parameters& input) :$/;"	f	class:BeforePresolver
BeforePresolver	presolver/before_presolver.hpp	/^class BeforePresolver {$/;"	c
BoolSolutionBrancher	branchers/boolsolutionbrancher.cpp	/^  BoolSolutionBrancher(Home home,$/;"	f	class:BoolSolutionBrancher
BoolSolutionBrancher	branchers/boolsolutionbrancher.cpp	/^  BoolSolutionBrancher(Space& home, BoolSolutionBrancher& b)$/;"	f	class:BoolSolutionBrancher
BoolSolutionBrancher	branchers/boolsolutionbrancher.cpp	/^class BoolSolutionBrancher : public Brancher {$/;"	c	file:
BrType	common/definitions.hpp	/^  } BrType;$/;"	t	typeref:enum:brtype
BuiltStyledStreamWriter	third-party/jsoncpp/json_writer.cpp	/^BuiltStyledStreamWriter::BuiltStyledStreamWriter($/;"	f	class:Json::BuiltStyledStreamWriter
BuiltStyledStreamWriter	third-party/jsoncpp/json_writer.cpp	/^struct BuiltStyledStreamWriter : public StreamWriter$/;"	s	namespace:Json	file:
C	models/parameters.hpp	/^  vector<congruence> C;$/;"	m	class:Parameters
CACHED_SOLUTION	procedures/commonprocedures.hpp	/^  { SOME_SOLUTION, UNSATISFIABLE, LIMIT, OPTIMAL_SOLUTION, CACHED_SOLUTION,$/;"	e	enum:SolverResult
CALL	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
CALLER_SAVED_EXPR	common/definitions.hpp	/^    CALLER_SAVED_EXPR,		\/\/ ex-PRESOLVER_CALLER_SAVED_TEMPORARY$/;"	e	enum:UnisonConstraintExprId
CC	div-generated.mk	/^CC            = gcc$/;"	m
CC	generated.mk	/^CC            = gcc$/;"	m
CC	presolver-generated.mk	/^CC            = gcc$/;"	m
CFLAGS	div-generated.mk	/^CFLAGS        = -m64 -pipe -O2 -D_REENTRANT -Wall -W $(DEFINES)$/;"	m
CFLAGS	generated.mk	/^CFLAGS        = -m64 -pipe -O2 -D_REENTRANT -Wall -W $(DEFINES)$/;"	m
CFLAGS	presolver-generated.mk	/^CFLAGS        = -m64 -pipe -O2 -D_REENTRANT -Wall -W $(DEFINES)$/;"	m
CHK_DIR_EXISTS	div-generated.mk	/^CHK_DIR_EXISTS= test -d$/;"	m
CHK_DIR_EXISTS	generated.mk	/^CHK_DIR_EXISTS= test -d$/;"	m
CHK_DIR_EXISTS	presolver-generated.mk	/^CHK_DIR_EXISTS= test -d$/;"	m
COMBINE	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
COMPRESS	div-generated.mk	/^COMPRESS      = gzip -9f$/;"	m
COMPRESS	generated.mk	/^COMPRESS      = gzip -9f$/;"	m
COMPRESS	presolver-generated.mk	/^COMPRESS      = gzip -9f$/;"	m
CONNECTS_EXPR	common/definitions.hpp	/^    CONNECTS_EXPR,		\/\/ ex-PRESOLVER_OPERAND_TEMPORARY$/;"	e	enum:UnisonConstraintExprId
CONSERVATIVE_SEARCH	common/definitions.hpp	/^const char CONSERVATIVE_SEARCH = 'c';$/;"	v
COPY	common/definitions.hpp	/^    SPLIT2, SPLIT4, FUN, COPY };$/;"	e	enum:OperationType
COPY	div-generated.mk	/^COPY          = cp -f$/;"	m
COPY	generated.mk	/^COPY          = cp -f$/;"	m
COPY	presolver-generated.mk	/^COPY          = cp -f$/;"	m
COPY_DIR	div-generated.mk	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_DIR	generated.mk	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_DIR	presolver-generated.mk	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	div-generated.mk	/^COPY_FILE     = $(COPY)$/;"	m
COPY_FILE	generated.mk	/^COPY_FILE     = $(COPY)$/;"	m
COPY_FILE	presolver-generated.mk	/^COPY_FILE     = $(COPY)$/;"	m
CPPTL_AUTOLINK_DLL	third-party/jsoncpp/json/autolink.h	18;"	d
CPPTL_AUTOLINK_DLL	third-party/jsoncpp/json/autolink.h	20;"	d
CPPTL_AUTOLINK_NAME	third-party/jsoncpp/json/autolink.h	17;"	d
CPPTL_JSON_ALLOCATOR_H_INCLUDED	third-party/jsoncpp/json/allocator.h	7;"	d
CPPTL_JSON_ASSERTIONS_H_INCLUDED	third-party/jsoncpp/json/assertions.h	7;"	d
CPPTL_JSON_FEATURES_H_INCLUDED	third-party/jsoncpp/json/features.h	7;"	d
CPPTL_JSON_H_INCLUDED	third-party/jsoncpp/json/value.h	7;"	d
CPPTL_JSON_READER_H_INCLUDED	third-party/jsoncpp/json/reader.h	7;"	d
CXX	div-generated.mk	/^CXX           = g++$/;"	m
CXX	generated.mk	/^CXX           = g++$/;"	m
CXX	presolver-generated.mk	/^CXX           = g++$/;"	m
CXXFLAGS	div-generated.mk	/^CXXFLAGS      = -m64 -pipe -std=c++0x -O2 -D_REENTRANT -Wall -W $(DEFINES)$/;"	m
CXXFLAGS	generated.mk	/^CXXFLAGS      = -m64 -pipe -std=c++0x -O2 -D_REENTRANT -Wall -W $(DEFINES)$/;"	m
CXXFLAGS	presolver-generated.mk	/^CXXFLAGS      = -m64 -pipe -std=c++0x -O2 -D_REENTRANT -Wall -W $(DEFINES)$/;"	m
CZString	third-party/jsoncpp/json/value.h	/^  class CZString {$/;"	c	class:Json::Value
CZString	third-party/jsoncpp/json_value.cpp	/^Value::CZString::CZString(ArrayIndex aindex) : cstr_(0), index_(aindex) {}$/;"	f	class:Json::Value::CZString
CZString	third-party/jsoncpp/json_value.cpp	/^Value::CZString::CZString(CZString&& other)$/;"	f	class:Json::Value::CZString
CZString	third-party/jsoncpp/json_value.cpp	/^Value::CZString::CZString(char const* str, unsigned ulength, DuplicationPolicy allocate)$/;"	f	class:Json::Value::CZString
CZString	third-party/jsoncpp/json_value.cpp	/^Value::CZString::CZString(const CZString& other) {$/;"	f	class:Json::Value::CZString
Char	third-party/jsoncpp/json_reader.cpp	/^  typedef char Char;$/;"	t	class:Json::OurReader	file:
CharReader	third-party/jsoncpp/json/reader.h	/^class JSON_API CharReader {$/;"	c	namespace:Json
CharReaderBuilder	third-party/jsoncpp/json/reader.h	/^class JSON_API CharReaderBuilder : public CharReader::Factory {$/;"	c	namespace:Json
CharReaderBuilder	third-party/jsoncpp/json_reader.cpp	/^CharReaderBuilder::CharReaderBuilder()$/;"	f	class:Json::CharReaderBuilder
CharReaderPtr	third-party/jsoncpp/json_reader.cpp	/^typedef std::unique_ptr<CharReader> CharReaderPtr;$/;"	t	namespace:Json	file:
ChildValues	third-party/jsoncpp/json_writer.cpp	/^  typedef std::vector<JSONCPP_STRING> ChildValues;$/;"	t	struct:Json::BuiltStyledStreamWriter	file:
CommentInfo	third-party/jsoncpp/json/value.h	/^  struct CommentInfo {$/;"	s	class:Json::Value
CommentInfo	third-party/jsoncpp/json_value.cpp	/^Value::CommentInfo::CommentInfo() : comment_(0)$/;"	f	class:Json::Value::CommentInfo
CommentPlacement	third-party/jsoncpp/json/value.h	/^enum CommentPlacement {$/;"	g	namespace:Json
CommentStyle	third-party/jsoncpp/json_writer.cpp	/^struct CommentStyle {$/;"	s	namespace:Json	file:
CompleteModel	models/completemodel.cpp	/^CompleteModel::CompleteModel(CompleteModel& cg) :$/;"	f	class:CompleteModel
CompleteModel	models/completemodel.cpp	/^CompleteModel::CompleteModel(Parameters * p_input, ModelOptions * p_options,$/;"	f	class:CompleteModel
CompleteModel	models/completemodel.hpp	/^class CompleteModel : public Model {$/;"	c
ConsoleInspector	inspectors/consoleinspector.cpp	/^ConsoleInspector::ConsoleInspector(const string& name) :$/;"	f	class:ConsoleInspector
ConsoleInspector	inspectors/consoleinspector.hpp	/^class ConsoleInspector :$/;"	c
CopyAttributes	common/util.hpp	/^CopyAttributes;$/;"	t
CurrentCenterPoint	inspectors/modelgraphicsview.hpp	/^    QPointF CurrentCenterPoint;$/;"	m	class:ModelGraphicsView
D	presolver/infeasible_presolver.hpp	/^  vector<temporand_set> D, D_7, D_4;$/;"	m	class:InfeasiblePresolver
DEAD	inspectors/dataflowinspector.hpp	/^enum EdgeLabelType {DEAD, UNDECIDEDLIVENESS, LIVE};$/;"	e	enum:EdgeLabelType
DEFINE	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
DEFINES	div-generated.mk	/^DEFINES       = -DGRAPHICS -DNEWGV -DQT_NO_DEBUG -DQT_SCRIPT_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEFINES	generated.mk	/^DEFINES       = -DGRAPHICS -DNEWGV -DQT_NO_DEBUG -DQT_SCRIPT_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEFINES	presolver-generated.mk	/^DEFINES       = -DGRAPHICS -DNEWGV -DQT_NO_DEBUG -DQT_SCRIPT_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEL_DIR	div-generated.mk	/^DEL_DIR       = rmdir$/;"	m
DEL_DIR	generated.mk	/^DEL_DIR       = rmdir$/;"	m
DEL_DIR	presolver-generated.mk	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	div-generated.mk	/^DEL_FILE      = rm -f$/;"	m
DEL_FILE	generated.mk	/^DEL_FILE      = rm -f$/;"	m
DEL_FILE	presolver-generated.mk	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	div-generated.mk	/^DESTDIR       = $/;"	m
DESTDIR	generated.mk	/^DESTDIR       = $/;"	m
DESTDIR	presolver-generated.mk	/^DESTDIR       = $/;"	m
DISCARDED	inspectors/dataflowinspector.hpp	/^enum EdgeType {FIXED, DISCARDED, POSSIBLE, ASSIGNED};$/;"	e	enum:EdgeType
DIST	div-generated.mk	/^DIST          = \/usr\/share\/qt4\/mkspecs\/common\/unix.conf \\$/;"	m
DIST	generated.mk	/^DIST          = \/usr\/share\/qt4\/mkspecs\/common\/unix.conf \\$/;"	m
DIST	presolver-generated.mk	/^DIST          = \/usr\/share\/qt4\/mkspecs\/common\/unix.conf \\$/;"	m
DISTANCE_EXPR	common/definitions.hpp	/^    DISTANCE_EXPR,$/;"	e	enum:UnisonConstraintExprId
DIST_CYC_GADGET	common/definitions.hpp	/^    DIST_CYC_GADGET,           \/\/ DiffHamming of cycles for each "gadget"$/;"	e	enum:divdistance
DIST_DIFF_BR	common/definitions.hpp	/^    DIST_DIFF_BR,              \/\/ Like DIST_HAMMING_DIFF_BR but calculates the actual distance$/;"	e	enum:divdistance
DIST_HAMMING	common/definitions.hpp	/^  { DIST_HAMMING,              \/\/ Hamming distance of cycles$/;"	e	enum:divdistance
DIST_HAMMING_BR	common/definitions.hpp	/^    DIST_HAMMING_BR,           \/\/ Hamming distance of only branches$/;"	e	enum:divdistance
DIST_HAMMING_BR_REG	common/definitions.hpp	/^    DIST_HAMMING_BR_REG        \/\/ Like HAMMING_BR but add also register$/;"	e	enum:divdistance
DIST_HAMMING_DIFF	common/definitions.hpp	/^    DIST_HAMMING_DIFF,         \/\/ Hamming distance of all pairwise differences$/;"	e	enum:divdistance
DIST_HAMMING_DIFF_BR	common/definitions.hpp	/^    DIST_HAMMING_DIFF_BR,      \/\/ Hamming distance of difference from nearby branches.$/;"	e	enum:divdistance
DIST_HAMMING_REG_GADGET	common/definitions.hpp	/^    DIST_HAMMING_REG_GADGET,   \/\/ Hamming of either cycles or registers for each "gadget"$/;"	e	enum:divdistance
DIST_LEVENSHTEIN	common/definitions.hpp	/^    DIST_LEVENSHTEIN,          \/\/ Levenshtein for 1-1 cycle\/operation and operation\/cycle$/;"	e	enum:divdistance
DIST_LEVENSHTEIN_SET	common/definitions.hpp	/^    DIST_LEVENSHTEIN_SET,      \/\/ Levenshtein considering sets for multi issue$/;"	e	enum:divdistance
DIST_REGHAMMING	common/definitions.hpp	/^    DIST_REGHAMMING,           \/\/ Hamming of register array$/;"	e	enum:divdistance
DIST_REG_GADGET	common/definitions.hpp	/^    DIST_REG_GADGET,           \/\/ Hamming of registers for each "gadget"$/;"	e	enum:divdistance
DIVERSIFIERBRANCHERS	diversifier.mk	/^DIVERSIFIERBRANCHERS := filters merit value printers pressureschedulingbrancher	\\$/;"	m
DIVERSIFIERBRANCHERSDIR	diversifier.mk	/^DIVERSIFIERBRANCHERSDIR := $(DIVERSIFIERDIR)\/branchers$/;"	m
DIVERSIFIERCLASSES	diversifier.mk	/^DIVERSIFIERCLASSES := $(addprefix $(DIVERSIFIERCOMMONDIR)\/, $(DIVERSIFIERCOMMON)) $(addprefix	\\$/;"	m
DIVERSIFIERCOMMON	diversifier.mk	/^DIVERSIFIERCOMMON := definitions util jsonutil$/;"	m
DIVERSIFIERCOMMONDIR	diversifier.mk	/^DIVERSIFIERCOMMONDIR := $(DIVERSIFIERDIR)\/common$/;"	m
DIVERSIFIERCPPSRC	diversifier.mk	/^DIVERSIFIERCPPSRC := $(addsuffix .cpp, $(DIVERSIFIERMAIN) $(DIVERSIFIERCLASSES))$/;"	m
DIVERSIFIERHPPSRC	diversifier.mk	/^DIVERSIFIERHPPSRC := $(addsuffix .hpp, $(DIVERSIFIERCLASSES))$/;"	m
DIVERSIFIERINSPECTORS	diversifier.mk	/^DIVERSIFIERINSPECTORS := consoleinspector modelgraphicsview modelinspector dot	\\$/;"	m
DIVERSIFIERINSPECTORSDIR	diversifier.mk	/^DIVERSIFIERINSPECTORSDIR := $(DIVERSIFIERDIR)\/inspectors$/;"	m
DIVERSIFIERMAIN	diversifier.mk	/^DIVERSIFIERMAIN = $(DIVERSIFIERDIR)\/diversifier$/;"	m
DIVERSIFIERMODELS	diversifier.mk	/^DIVERSIFIERMODELS := parameters solver-parameters options model localmodel completemodel globalmodel	\\$/;"	m
DIVERSIFIERMODELSDIR	diversifier.mk	/^DIVERSIFIERMODELSDIR := $(DIVERSIFIERDIR)\/models$/;"	m
DIVERSIFIERPROCEDURES	diversifier.mk	/^DIVERSIFIERPROCEDURES := commonprocedures divprocedures localdivprocedures$/;"	m
DIVERSIFIERPROCEDURESDIR	diversifier.mk	/^DIVERSIFIERPROCEDURESDIR := $(DIVERSIFIERDIR)\/procedures$/;"	m
DIVERSIFIERPROJECT	diversifier.mk	/^DIVERSIFIERPROJECT := $(DIVERSIFIERDIR)\/diversifier.pro$/;"	m
DIVERSIFIERSRC	diversifier.mk	/^DIVERSIFIERSRC := $(DIVERSIFIERCPPSRC) $(DIVERSIFIERHPPSRC)$/;"	m
DIV_DECOMPOSITION_LNS	common/definitions.hpp	/^   DIV_DECOMPOSITION_LNS,$/;"	e	enum:divmethod
DIV_MAX_DIV	common/definitions.hpp	/^   DIV_MAX_DIV$/;"	e	enum:divmethod
DIV_MONOLITHIC_DFS	common/definitions.hpp	/^   DIV_MONOLITHIC_DFS,$/;"	e	enum:divmethod
DIV_MONOLITHIC_LNS	common/definitions.hpp	/^   DIV_MONOLITHIC_LNS,$/;"	e	enum:divmethod
DOT2QT	inspectors/dot.cpp	/^const double Dot::DOT2QT = DPI\/72.0;$/;"	m	class:Dot	file:
DOT2QT	inspectors/dot.hpp	/^  static const double DOT2QT;$/;"	m	class:Dot
DPI	inspectors/dot.cpp	/^const double Dot::DPI = 96.0;$/;"	m	class:Dot	file:
DPI	inspectors/dot.hpp	/^  static const double DPI;$/;"	m	class:Dot
DPI	inspectors/modelinspector.hpp	/^  double DPI;$/;"	m	class:ModelInspector
DYNAMIC_GOAL	common/definitions.hpp	/^enum GoalType { STATIC_GOAL, DYNAMIC_GOAL };$/;"	e	enum:GoalType
D_4	presolver/infeasible_presolver.hpp	/^  vector<temporand_set> D, D_7, D_4;$/;"	m	class:InfeasiblePresolver
D_4_Cands	presolver/infeasible_presolver.hpp	/^  vector<vector<nogood_cand_set> > D_4_Cands;$/;"	m	class:InfeasiblePresolver
D_5	presolver/infeasible_presolver.hpp	/^  vector<vector<temporand_set >> D_5;$/;"	m	class:InfeasiblePresolver
D_5_Cands	presolver/infeasible_presolver.hpp	/^  vector<vector<vector<nogood_cand_set> > > D_5_Cands;$/;"	m	class:InfeasiblePresolver
D_7	presolver/infeasible_presolver.hpp	/^  vector<temporand_set> D, D_7, D_4;$/;"	m	class:InfeasiblePresolver
D_7_Cands	presolver/infeasible_presolver.hpp	/^  vector<vector<nogood_cand_set> > D_7_Cands;$/;"	m	class:InfeasiblePresolver
DataFlowGraph	inspectors/dataflowinspector.hpp	/^  DataFlowGraph() {$/;"	f	class:DataFlowGraph
DataFlowGraph	inspectors/dataflowinspector.hpp	/^class DataFlowGraph {$/;"	c
DataFlowInspector	inspectors/dataflowinspector.hpp	/^class DataFlowInspector : public ModelInspector {$/;"	c
DecompDivModel	models/decompdivmodel.cpp	/^DecompDivModel::DecompDivModel(DecompDivModel& cg) :$/;"	f	class:DecompDivModel
DecompDivModel	models/decompdivmodel.cpp	/^DecompDivModel::DecompDivModel(Parameters * p_input, ModelOptions * p_options,$/;"	f	class:DecompDivModel
DecompDivModel	models/decompdivmodel.hpp	/^class DecompDivModel : public DivModel {$/;"	c
Description	branchers/boolsolutionbrancher.cpp	/^    Description(const BoolSolutionBrancher& b, unsigned int a, int p, int s)$/;"	f	class:BoolSolutionBrancher::Description
Description	branchers/boolsolutionbrancher.cpp	/^  class Description : public Choice {$/;"	c	class:BoolSolutionBrancher	file:
Description	branchers/solutionbrancher.cpp	/^    Description(const SolutionBrancher& b, unsigned int a, int p, int s)$/;"	f	class:SolutionBrancher::Description
Description	branchers/solutionbrancher.cpp	/^  class Description : public Choice {$/;"	c	class:SolutionBrancher	file:
Digraph	presolver/digraph.cpp	/^Digraph::Digraph(const vector<pair<int,int> >& edges) {$/;"	f	class:Digraph
Digraph	presolver/digraph.cpp	/^Digraph::Digraph(const vector<vector<vertex> >& edges) {$/;"	f	class:Digraph
Digraph	presolver/digraph.hpp	/^class Digraph {$/;"	c
Disjoint_set	presolver/disjoint_set.hpp	/^  Disjoint_set() {}$/;"	f	class:Disjoint_set
Disjoint_set	presolver/disjoint_set.hpp	/^class Disjoint_set {$/;"	c
DivDistance	common/definitions.hpp	/^  } DivDistance;$/;"	t	typeref:enum:divdistance
DivMethod	common/definitions.hpp	/^  } DivMethod;$/;"	t	typeref:enum:divmethod
DivModel	models/divmodel.cpp	/^DivModel::DivModel(DivModel& cg) :$/;"	f	class:DivModel
DivModel	models/divmodel.cpp	/^DivModel::DivModel(Parameters * p_input, ModelOptions * p_options,$/;"	f	class:DivModel
DivModel	models/divmodel.hpp	/^class DivModel : public GlobalModel {$/;"	c
Dot	inspectors/dot.cpp	/^Dot::Dot() :$/;"	f	class:Dot
Dot	inspectors/dot.hpp	/^class Dot {$/;"	c
DotEdge	inspectors/dot.hpp	/^class DotEdge {$/;"	c
DotNode	inspectors/dot.hpp	/^class DotNode {$/;"	c
DoubleChoice	common/util.hpp	/^  DoubleChoice(const B& b, I first0, J second0)$/;"	f	class:DoubleChoice
DoubleChoice	common/util.hpp	/^class DoubleChoice : public Choice {$/;"	c
DuplicationPolicy	third-party/jsoncpp/json/value.h	/^    enum DuplicationPolicy {$/;"	g	class:Json::Value::CZString
E	models/parameters.hpp	/^  vector<UnisonConstraintExpr> E;$/;"	m	class:Parameters
EARLIEST_INSTRUCTION	common/definitions.hpp	/^enum SchedulingStrategy { EARLIEST_INSTRUCTION, ISSUE_CYCLE_SIZE_MIN };$/;"	e	enum:SchedulingStrategy
EDHEADNAME	inspectors/dot.hpp	63;"	d
EDLABEL	inspectors/dot.hpp	61;"	d
EDSPLLIST	inspectors/dot.hpp	64;"	d
EDTAILNAME	inspectors/dot.hpp	62;"	d
EdgeId	inspectors/dot.hpp	/^typedef tuple<NodeId, NodeId, int> EdgeId;$/;"	t
EdgeLabelType	inspectors/dataflowinspector.hpp	/^enum EdgeLabelType {DEAD, UNDECIDEDLIVENESS, LIVE};$/;"	g
EdgeType	inspectors/dataflowinspector.hpp	/^enum EdgeType {FIXED, DISCARDED, POSSIBLE, ASSIGNED};$/;"	g
Enum	third-party/jsoncpp/json_writer.cpp	/^  enum Enum {$/;"	g	struct:Json::CommentStyle	file:
ErrorInfo	third-party/jsoncpp/json_reader.cpp	/^  class ErrorInfo {$/;"	c	class:Json::OurReader	file:
Errors	third-party/jsoncpp/json_reader.cpp	/^  typedef std::deque<ErrorInfo> Errors;$/;"	t	class:Json::OurReader	file:
Exception	third-party/jsoncpp/json/value.h	/^class JSON_API Exception : public std::exception {$/;"	c	namespace:Json
Exception	third-party/jsoncpp/json_value.cpp	/^Exception::Exception(JSONCPP_STRING const& msg)$/;"	f	class:Json::Exception
FAIL_FIRST_SEARCH	common/definitions.hpp	/^const char FAIL_FIRST_SEARCH = 'f';$/;"	v
FDSet	presolver.cpp	/^  FDSet() : vec({}) {}$/;"	f	class:FDSet
FDSet	presolver.cpp	/^  FDSet(int a, int b) : vec({}) {for (int x=a; x<=b; x++) vec.push_back(x);}$/;"	f	class:FDSet
FDSet	presolver.cpp	/^  FDSet(vector<int> vec0) : vec(vec0) {sort(vec.begin(), vec.end());}$/;"	f	class:FDSet
FDSet	presolver.cpp	/^  FDSet(vector<int> vec0, int inc) : vec(vec0) {sort(vec.begin(), vec.end());$/;"	f	class:FDSet
FDSet	presolver.cpp	/^class FDSet {$/;"	c	file:
FIXED	inspectors/dataflowinspector.hpp	/^enum EdgeType {FIXED, DISCARDED, POSSIBLE, ASSIGNED};$/;"	e	enum:EdgeType
FONTSIZE	inspectors/modelinspector.hpp	/^  int FONTSIZE;$/;"	m	class:ModelInspector
FUN	common/definitions.hpp	/^    SPLIT2, SPLIT4, FUN, COPY };$/;"	e	enum:OperationType
Factory	third-party/jsoncpp/json/reader.h	/^  class JSON_API Factory {$/;"	c	class:Json::CharReader
Factory	third-party/jsoncpp/json/writer.h	/^  class JSON_API Factory {$/;"	c	class:Json::StreamWriter
FastPair	presolver/precedences.cpp	184;"	d	file:
FastPairSource	presolver/precedences.cpp	186;"	d	file:
FastPairTarget	presolver/precedences.cpp	187;"	d	file:
FastWriter	third-party/jsoncpp/json_writer.cpp	/^FastWriter::FastWriter()$/;"	f	class:Json::FastWriter
Features	third-party/jsoncpp/json/features.h	/^class JSON_API Features {$/;"	c	namespace:Json
Features	third-party/jsoncpp/json_reader.cpp	/^Features::Features()$/;"	f	class:Json::Features
G	models/parameters.hpp	/^  vector<global_congruence> G;$/;"	m	class:Parameters
GC	models/parameters.hpp	/^  vector<global_cluster> GC;$/;"	m	class:Parameters
GENMAKEFILE	diversifier.mk	/^GENMAKEFILE = $(DIVERSIFIERDIR)\/div-generated.mk$/;"	m
GENMAKEFILE	solver.mk	/^GENMAKEFILE = $(SOLVERDIR)\/generated.mk$/;"	m
GIST_OPTIONS	common/definitions.hpp	423;"	d
GIST_OPTIONS	common/definitions.hpp	426;"	d
GetCenter	inspectors/modelgraphicsview.hpp	/^    QPointF GetCenter() { return CurrentCenterPoint; }$/;"	f	class:ModelGraphicsView
GistOptionsStub	common/definitions.hpp	/^class GistOptionsStub {};$/;"	c
GlobalAlignmentInspector	inspectors/alignmentinspector.hpp	/^class GlobalAlignmentInspector : public ModelInspector {$/;"	c
GlobalAlignmentPartitionInspector	inspectors/alignmentpartitioninspector.cpp	/^GlobalAlignmentPartitionInspector::GlobalAlignmentPartitionInspector() :$/;"	f	class:GlobalAlignmentPartitionInspector
GlobalAlignmentPartitionInspector	inspectors/alignmentpartitioninspector.hpp	/^class GlobalAlignmentPartitionInspector : public ConsoleInspector {$/;"	c
GlobalAllocationInspector	inspectors/allocationinspector.hpp	/^class GlobalAllocationInspector : public AllocationInspector {$/;"	c
GlobalAssignmentInspector	inspectors/assignmentinspector.hpp	/^class GlobalAssignmentInspector : public AssignmentInspector {$/;"	c
GlobalCongruenceAllocationInspector	inspectors/congruenceallocationinspector.cpp	/^GlobalCongruenceAllocationInspector::GlobalCongruenceAllocationInspector() :$/;"	f	class:GlobalCongruenceAllocationInspector
GlobalCongruenceAllocationInspector	inspectors/congruenceallocationinspector.hpp	/^class GlobalCongruenceAllocationInspector : public ConsoleInspector {$/;"	c
GlobalData	diversifier.cpp	/^  GlobalData(int global_n_int_vars0,$/;"	f	class:GlobalData
GlobalData	diversifier.cpp	/^class GlobalData {$/;"	c	file:
GlobalData	solver.cpp	/^  GlobalData(int global_n_int_vars0,$/;"	f	class:GlobalData
GlobalData	solver.cpp	/^class GlobalData {$/;"	c	file:
GlobalDataFlowInspector	inspectors/dataflowinspector.hpp	/^class GlobalDataFlowInspector : public DataFlowInspector {$/;"	c
GlobalIssueCycleInspector	inspectors/issuecycleinspector.hpp	/^class GlobalIssueCycleInspector : public IssueCycleInspector {$/;"	c
GlobalLiveDurationInspector	inspectors/livedurationinspector.hpp	/^class GlobalLiveDurationInspector : public LiveDurationInspector {$/;"	c
GlobalLiveRangeInspector	inspectors/liverangeinspector.hpp	/^class GlobalLiveRangeInspector : public LiveRangeInspector {$/;"	c
GlobalModel	models/globalmodel.cpp	/^GlobalModel::GlobalModel(GlobalModel& cg) :$/;"	f	class:GlobalModel
GlobalModel	models/globalmodel.cpp	/^GlobalModel::GlobalModel(Parameters * p_input, ModelOptions * p_options,$/;"	f	class:GlobalModel
GlobalModel	models/globalmodel.hpp	/^class GlobalModel : public CompleteModel {$/;"	c
GlobalOperandAllocationInspector	inspectors/operandallocationinspector.hpp	/^class GlobalOperandAllocationInspector : public OperandAllocationInspector {$/;"	c
GlobalOperandAssignmentInspector	inspectors/operandassignmentinspector.hpp	/^class GlobalOperandAssignmentInspector : public OperandAssignmentInspector {$/;"	c
GlobalOperandLatencyInspector	inspectors/operandlatencyinspector.hpp	/^class GlobalOperandLatencyInspector : public OperandLatencyInspector {$/;"	c
GlobalRegisterArrayInspector	inspectors/registerarrayinspector.hpp	/^class GlobalRegisterArrayInspector : public RegisterArrayInspector {$/;"	c
GlobalResourceConsumptionInspector	inspectors/resourceconsumptioninspector.hpp	/^class GlobalResourceConsumptionInspector : public ResourceConsumptionInspector {$/;"	c
GlobalSelectionInspector	inspectors/selectioninspector.hpp	/^class GlobalSelectionInspector : public SelectionInspector {$/;"	c
GlobalUsersInspector	inspectors/usersinspector.hpp	/^class GlobalUsersInspector : public UsersInspector {$/;"	c
GoalType	common/definitions.hpp	/^enum GoalType { STATIC_GOAL, DYNAMIC_GOAL };$/;"	g
HIGH	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
I	models/parameters.hpp	/^  vector<instruction> I;$/;"	m	class:Parameters
IMPLEMENTS_EXPR	common/definitions.hpp	/^    IMPLEMENTS_EXPR,		\/\/ ex-PRESOLVER_OPERATION$/;"	e	enum:UnisonConstraintExprId
IMPLIES_EXPR	common/definitions.hpp	/^    IMPLIES_EXPR,$/;"	e	enum:UnisonConstraintExprId
IN	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
INACTIVE	inspectors/dataflowinspector.hpp	/^enum NodeType {INACTIVE, UNDECIDEDACTIVENESS, ACTIVE};$/;"	e	enum:NodeType
INCPATH	div-generated.mk	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++-64 -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4\/QtScript -I\/usr\/include\/qt4 -I.$/;"	m
INCPATH	generated.mk	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++-64 -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4\/QtScript -I\/usr\/include\/qt4 -I.$/;"	m
INCPATH	presolver-generated.mk	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++-64 -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4\/QtScript -I\/usr\/include\/qt4 -I.$/;"	m
INSTALL_DIR	div-generated.mk	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_DIR	generated.mk	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_DIR	presolver-generated.mk	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	div-generated.mk	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_FILE	generated.mk	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_FILE	presolver-generated.mk	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	div-generated.mk	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
INSTALL_PROGRAM	generated.mk	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
INSTALL_PROGRAM	presolver-generated.mk	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
INSTRUCTION	branchers/routingbrancher.cpp	/^  enum RoutingDecision { ACTIVENESS, INSTRUCTION, TEMPORARY };$/;"	e	enum:RoutingBrancher::RoutingDecision	file:
ISSUE_CYCLES	common/definitions.hpp	/^const resource ISSUE_CYCLES = -1;$/;"	v
ISSUE_CYCLE_SIZE_MIN	common/definitions.hpp	/^enum SchedulingStrategy { EARLIEST_INSTRUCTION, ISSUE_CYCLE_SIZE_MIN };$/;"	e	enum:SchedulingStrategy
InArgs	third-party/jsoncpp/json/value.h	/^  typedef std::vector<const PathArgument*> InArgs;$/;"	t	class:Json::Path
InRange	third-party/jsoncpp/json_value.cpp	/^static inline bool InRange(double d, T min, U max) {$/;"	f	namespace:Json
InfeasiblePresolver	presolver/infeasible_presolver.cpp	/^InfeasiblePresolver::InfeasiblePresolver(PresolverAsserts& PA,$/;"	f	class:InfeasiblePresolver
InfeasiblePresolver	presolver/infeasible_presolver.hpp	/^class InfeasiblePresolver {$/;"	c
InstructionAssignment	common/definitions.hpp	/^typedef pair<operation, unsigned int> InstructionAssignment;$/;"	t
InstructionChoice	branchers/routingbrancher.cpp	/^    InstructionChoice(const RoutingBrancher& b, unsigned int oi0, int ii0)$/;"	f	class:RoutingBrancher::InstructionChoice
InstructionChoice	branchers/routingbrancher.cpp	/^  class InstructionChoice :$/;"	c	class:RoutingBrancher	file:
Int	third-party/jsoncpp/json/config.h	/^typedef int Int;$/;"	t	namespace:Json
Int	third-party/jsoncpp/json/value.h	/^  typedef Json::Int Int;$/;"	t	class:Json::Value
Int64	third-party/jsoncpp/json/config.h	/^typedef __int64 Int64;$/;"	t	namespace:Json
Int64	third-party/jsoncpp/json/config.h	/^typedef int64_t Int64;$/;"	t	namespace:Json
Int64	third-party/jsoncpp/json/value.h	/^  typedef Json::Int64 Int64;$/;"	t	class:Json::Value
IsIntegral	third-party/jsoncpp/json_value.cpp	/^static bool IsIntegral(double d) {$/;"	f	namespace:Json
IssueCycleInspector	inspectors/issuecycleinspector.hpp	/^class IssueCycleInspector : public ModelInspector {$/;"	c
IterationState	procedures/commonprocedures.hpp	/^  IterationState(double a1, bool cf1) : a(a1), cf(cf1) {}$/;"	f	class:IterationState
IterationState	procedures/commonprocedures.hpp	/^class IterationState {$/;"	c
JSONCPP_DEPRECATED	third-party/jsoncpp/json/config.h	124;"	d
JSONCPP_DEPRECATED	third-party/jsoncpp/json/config.h	128;"	d
JSONCPP_DEPRECATED	third-party/jsoncpp/json/config.h	130;"	d
JSONCPP_DEPRECATED	third-party/jsoncpp/json/config.h	135;"	d
JSONCPP_DEPRECATED	third-party/jsoncpp/json/config.h	76;"	d
JSONCPP_DEPRECATED_STACK_LIMIT	third-party/jsoncpp/json_reader.cpp	50;"	d	file:
JSONCPP_DISABLE_DLL_INTERFACE_WARNING	third-party/jsoncpp/json/config.h	45;"	d
JSONCPP_DISABLE_DLL_INTERFACE_WARNING	third-party/jsoncpp/json/config.h	50;"	d
JSONCPP_ISTREAM	third-party/jsoncpp/json/config.h	177;"	d
JSONCPP_ISTREAM	third-party/jsoncpp/json/config.h	183;"	d
JSONCPP_ISTRINGSTREAM	third-party/jsoncpp/json/config.h	176;"	d
JSONCPP_ISTRINGSTREAM	third-party/jsoncpp/json/config.h	182;"	d
JSONCPP_NOEXCEPT	third-party/jsoncpp/json/config.h	86;"	d
JSONCPP_NOEXCEPT	third-party/jsoncpp/json/config.h	89;"	d
JSONCPP_NOEXCEPT	third-party/jsoncpp/json/config.h	92;"	d
JSONCPP_NOEXCEPT	third-party/jsoncpp/json/config.h	95;"	d
JSONCPP_NORETURN	third-party/jsoncpp/json/value.h	30;"	d
JSONCPP_NORETURN	third-party/jsoncpp/json/value.h	32;"	d
JSONCPP_NORETURN	third-party/jsoncpp/json/value.h	34;"	d
JSONCPP_NO_LOCALE_SUPPORT	third-party/jsoncpp/json_tool.h	12;"	d
JSONCPP_OSTREAM	third-party/jsoncpp/json/config.h	175;"	d
JSONCPP_OSTREAM	third-party/jsoncpp/json/config.h	181;"	d
JSONCPP_OSTRINGSTREAM	third-party/jsoncpp/json/config.h	174;"	d
JSONCPP_OSTRINGSTREAM	third-party/jsoncpp/json/config.h	180;"	d
JSONCPP_OVERRIDE	third-party/jsoncpp/json/config.h	85;"	d
JSONCPP_OVERRIDE	third-party/jsoncpp/json/config.h	88;"	d
JSONCPP_OVERRIDE	third-party/jsoncpp/json/config.h	91;"	d
JSONCPP_OVERRIDE	third-party/jsoncpp/json/config.h	94;"	d
JSONCPP_OVERRIDE	third-party/jsoncpp/json/reader.h	/^  CharReader* newCharReader() const JSONCPP_OVERRIDE;$/;"	m	class:Json::CharReaderBuilder
JSONCPP_OVERRIDE	third-party/jsoncpp/json/reader.h	/^  ~CharReaderBuilder() JSONCPP_OVERRIDE;$/;"	m	class:Json::CharReaderBuilder
JSONCPP_OVERRIDE	third-party/jsoncpp/json/value.h	/^  char const* what() const JSONCPP_NOEXCEPT JSONCPP_OVERRIDE;$/;"	m	class:Json::Exception
JSONCPP_OVERRIDE	third-party/jsoncpp/json/value.h	/^  ~Exception() JSONCPP_NOEXCEPT JSONCPP_OVERRIDE;$/;"	m	class:Json::Exception
JSONCPP_OVERRIDE	third-party/jsoncpp/json/writer.h	/^  StreamWriter* newStreamWriter() const JSONCPP_OVERRIDE;$/;"	m	class:Json::StreamWriterBuilder
JSONCPP_OVERRIDE	third-party/jsoncpp/json/writer.h	/^  ~StreamWriterBuilder() JSONCPP_OVERRIDE;$/;"	m	class:Json::StreamWriterBuilder
JSONCPP_OVERRIDE	third-party/jsoncpp/json_writer.cpp	/^  int write(Value const& root, JSONCPP_OSTREAM* sout) JSONCPP_OVERRIDE;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
JSONCPP_STRING	third-party/jsoncpp/json/config.h	173;"	d
JSONCPP_STRING	third-party/jsoncpp/json/config.h	179;"	d
JSONCPP_USING_SECURE_MEMORY	third-party/jsoncpp/json/version.h	14;"	d
JSONCPP_USING_SECURE_MEMORY	third-party/jsoncpp/json/version.h	16;"	d
JSONCPP_VERSION_HEXA	third-party/jsoncpp/json/version.h	11;"	d
JSONCPP_VERSION_MAJOR	third-party/jsoncpp/json/version.h	7;"	d
JSONCPP_VERSION_MINOR	third-party/jsoncpp/json/version.h	8;"	d
JSONCPP_VERSION_PATCH	third-party/jsoncpp/json/version.h	9;"	d
JSONCPP_VERSION_QUALIFIER	third-party/jsoncpp/json/version.h	10;"	d
JSONCPP_VERSION_STRING	third-party/jsoncpp/json/version.h	6;"	d
JSONVALUE	common/definitions.hpp	422;"	d
JSONVALUE	common/definitions.hpp	425;"	d
JSON_API	third-party/jsoncpp/json/config.h	41;"	d
JSON_API	third-party/jsoncpp/json/config.h	44;"	d
JSON_API	third-party/jsoncpp/json/config.h	49;"	d
JSON_API	third-party/jsoncpp/json/config.h	54;"	d
JSON_ASSERT	third-party/jsoncpp/json/assertions.h	23;"	d
JSON_ASSERT	third-party/jsoncpp/json/assertions.h	35;"	d
JSON_ASSERT_MESSAGE	third-party/jsoncpp/json/assertions.h	49;"	d
JSON_ASSERT_UNREACHABLE	third-party/jsoncpp/json_value.cpp	22;"	d	file:
JSON_AUTOLINK_H_INCLUDED	third-party/jsoncpp/json/autolink.h	7;"	d
JSON_CONFIG_H_INCLUDED	third-party/jsoncpp/json/config.h	7;"	d
JSON_FAIL_MESSAGE	third-party/jsoncpp/json/assertions.h	26;"	d
JSON_FAIL_MESSAGE	third-party/jsoncpp/json/assertions.h	39;"	d
JSON_FORWARDS_H_INCLUDED	third-party/jsoncpp/json/forwards.h	7;"	d
JSON_HAS_INT64	third-party/jsoncpp/json/config.h	158;"	d
JSON_HAS_INT64	third-party/jsoncpp/json/config.h	170;"	d
JSON_HAS_RVALUE_REFERENCES	third-party/jsoncpp/json/config.h	101;"	d
JSON_HAS_RVALUE_REFERENCES	third-party/jsoncpp/json/config.h	106;"	d
JSON_HAS_RVALUE_REFERENCES	third-party/jsoncpp/json/config.h	111;"	d
JSON_HAS_RVALUE_REFERENCES	third-party/jsoncpp/json/config.h	119;"	d
JSON_JSON_H_INCLUDED	third-party/jsoncpp/json/json.h	7;"	d
JSON_USE_CPPTL	third-party/jsoncpp/json/config.h	36;"	d
JSON_USE_EXCEPTION	third-party/jsoncpp/json/config.h	25;"	d
JSON_USE_INT64_DOUBLE_CONVERSION	third-party/jsoncpp/json/config.h	139;"	d
JSON_USE_INT64_DOUBLE_CONVERSION	third-party/jsoncpp/json/config.h	66;"	d
JSON_VERSION_H_INCLUDED	third-party/jsoncpp/json/version.h	4;"	d
JSON_WRITER_H_INCLUDED	third-party/jsoncpp/json/writer.h	7;"	d
Json	third-party/jsoncpp/json/allocator.h	/^namespace Json {$/;"	n
Json	third-party/jsoncpp/json/config.h	/^namespace Json {$/;"	n
Json	third-party/jsoncpp/json/features.h	/^namespace Json {$/;"	n
Json	third-party/jsoncpp/json/forwards.h	/^namespace Json {$/;"	n
Json	third-party/jsoncpp/json/reader.h	/^namespace Json {$/;"	n
Json	third-party/jsoncpp/json/value.h	/^namespace Json {$/;"	n
Json	third-party/jsoncpp/json/writer.h	/^namespace Json {$/;"	n
Json	third-party/jsoncpp/json_reader.cpp	/^namespace Json {$/;"	n	file:
Json	third-party/jsoncpp/json_tool.h	/^namespace Json {$/;"	n
Json	third-party/jsoncpp/json_value.cpp	/^namespace Json {$/;"	n	file:
Json	third-party/jsoncpp/json_writer.cpp	/^namespace Json {$/;"	n	file:
KILL	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
Kind	third-party/jsoncpp/json/value.h	/^  enum Kind {$/;"	g	class:Json::PathArgument
LFLAGS	div-generated.mk	/^LFLAGS        = -Wl,-O1$/;"	m
LFLAGS	generated.mk	/^LFLAGS        = -Wl,-O1$/;"	m
LFLAGS	presolver-generated.mk	/^LFLAGS        = -Wl,-O1$/;"	m
LIBS	div-generated.mk	/^LIBS          = $(SUBLIBS)  -L\/usr\/lib\/x86_64-linux-gnu -lgecodedriver -lgecodegist -lgecodesearch -lgecodeminimodel -lgecodeset -lgecodefloat -lgecodeint -lgecodekernel -lgecodesupport -lgvc -lcgraph -lcdt -lQtScript -lQtGui -lQtCore -lpthread $/;"	m
LIBS	generated.mk	/^LIBS          = $(SUBLIBS)  -L\/usr\/lib\/x86_64-linux-gnu -lgecodedriver -lgecodegist -lgecodesearch -lgecodeminimodel -lgecodeset -lgecodefloat -lgecodeint -lgecodekernel -lgecodesupport -lgvc -lcgraph -lcdt -lQtScript -lQtGui -lQtCore -lpthread $/;"	m
LIBS	presolver-generated.mk	/^LIBS          = $(SUBLIBS)  -L\/usr\/lib\/x86_64-linux-gnu -lgecodedriver -lgecodegist -lgecodesearch -lgecodeminimodel -lgecodeset -lgecodefloat -lgecodeint -lgecodekernel -lgecodesupport -lgvc -lcgraph -lcdt -lQtScript -lQtGui -lQtCore -lpthread $/;"	m
LIB_JSONCPP_JSON_TOOL_H_INCLUDED	third-party/jsoncpp/json_tool.h	7;"	d
LIMIT	procedures/commonprocedures.hpp	/^  { SOME_SOLUTION, UNSATISFIABLE, LIMIT, OPTIMAL_SOLUTION, CACHED_SOLUTION,$/;"	e	enum:SolverResult
LINEAR	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
LINK	div-generated.mk	/^LINK          = g++$/;"	m
LINK	generated.mk	/^LINK          = g++$/;"	m
LINK	presolver-generated.mk	/^LINK          = g++$/;"	m
LIVE	inspectors/dataflowinspector.hpp	/^enum EdgeLabelType {DEAD, UNDECIDEDLIVENESS, LIVE};$/;"	e	enum:EdgeLabelType
LOW	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
LargestInt	third-party/jsoncpp/json/config.h	/^typedef Int64 LargestInt;$/;"	t	namespace:Json
LargestInt	third-party/jsoncpp/json/config.h	/^typedef int LargestInt;$/;"	t	namespace:Json
LargestInt	third-party/jsoncpp/json/value.h	/^  typedef Json::LargestInt LargestInt;$/;"	t	class:Json::Value
LargestUInt	third-party/jsoncpp/json/config.h	/^typedef UInt64 LargestUInt;$/;"	t	namespace:Json
LargestUInt	third-party/jsoncpp/json/config.h	/^typedef unsigned int LargestUInt;$/;"	t	namespace:Json
LargestUInt	third-party/jsoncpp/json/value.h	/^  typedef Json::LargestUInt LargestUInt;$/;"	t	class:Json::Value
LastPanPoint	inspectors/modelgraphicsview.hpp	/^    QPoint LastPanPoint;$/;"	m	class:ModelGraphicsView
LiveDurationInspector	inspectors/livedurationinspector.hpp	/^class LiveDurationInspector : public ModelInspector {$/;"	c
LiveRangeInspector	inspectors/liverangeinspector.hpp	/^class LiveRangeInspector : public ModelInspector {$/;"	c
LocalAllocationInspector	inspectors/allocationinspector.hpp	/^class LocalAllocationInspector : public AllocationInspector {$/;"	c
LocalAssignmentInspector	inspectors/assignmentinspector.hpp	/^class LocalAssignmentInspector : public AssignmentInspector {$/;"	c
LocalDataFlowInspector	inspectors/dataflowinspector.hpp	/^class LocalDataFlowInspector : public DataFlowInspector {$/;"	c
LocalDivModel	models/localdivmodel.cpp	/^LocalDivModel::LocalDivModel(LocalDivModel& cg) :$/;"	f	class:LocalDivModel
LocalDivModel	models/localdivmodel.cpp	/^LocalDivModel::LocalDivModel(Parameters * p_input, ModelOptions * p_options,$/;"	f	class:LocalDivModel
LocalDivModel	models/localdivmodel.hpp	/^class LocalDivModel : public LocalModel {$/;"	c
LocalIssueCycleInspector	inspectors/issuecycleinspector.hpp	/^class LocalIssueCycleInspector : public IssueCycleInspector {$/;"	c
LocalJob	diversifier.cpp	/^  LocalJob(LocalDivModel *l0,$/;"	f	class:LocalJob
LocalJob	diversifier.cpp	/^class LocalJob : public Support::Job<LocalSolution * > {$/;"	c	file:
LocalJob	solver.cpp	/^  LocalJob(Solution<LocalModel> ls0, GIST_OPTIONS * lo0, int iteration0,$/;"	f	class:LocalJob
LocalJob	solver.cpp	/^class LocalJob : public Support::Job<Solution<LocalModel> > {$/;"	c	file:
LocalJobs	diversifier.cpp	/^  LocalJobs(map<block, LocalDivModel*> l0,$/;"	f	class:LocalJobs
LocalJobs	diversifier.cpp	/^class LocalJobs {$/;"	c	file:
LocalJobs	solver.cpp	/^  LocalJobs(Solution<GlobalModel> gs0, GIST_OPTIONS * lo0, int iteration0,$/;"	f	class:LocalJobs
LocalJobs	solver.cpp	/^class LocalJobs {$/;"	c	file:
LocalLiveDurationInspector	inspectors/livedurationinspector.hpp	/^class LocalLiveDurationInspector : public LiveDurationInspector {$/;"	c
LocalLiveRangeInspector	inspectors/liverangeinspector.hpp	/^class LocalLiveRangeInspector : public LiveRangeInspector {$/;"	c
LocalModel	models/localmodel.cpp	/^LocalModel::LocalModel(LocalModel& cg) :$/;"	f	class:LocalModel
LocalModel	models/localmodel.cpp	/^LocalModel::LocalModel(Parameters * p_input, ModelOptions * p_options,$/;"	f	class:LocalModel
LocalModel	models/localmodel.hpp	/^class LocalModel : public Model {$/;"	c
LocalOperandAssignmentInspector	inspectors/operandassignmentinspector.hpp	/^class LocalOperandAssignmentInspector : public OperandAssignmentInspector {$/;"	c
LocalOperandLatencyInspector	inspectors/operandlatencyinspector.hpp	/^class LocalOperandLatencyInspector : public OperandLatencyInspector {$/;"	c
LocalPrecedenceInspector	inspectors/precedenceinspector.hpp	/^class LocalPrecedenceInspector : public PrecedenceInspector {$/;"	c
LocalPrecedenceMatrixInspector	inspectors/precedencematrixinspector.hpp	/^class LocalPrecedenceMatrixInspector : public PrecedenceMatrixInspector {$/;"	c
LocalRegisterArrayInspector	inspectors/registerarrayinspector.hpp	/^class LocalRegisterArrayInspector : public RegisterArrayInspector {$/;"	c
LocalResourceConsumptionInspector	inspectors/resourceconsumptioninspector.hpp	/^class LocalResourceConsumptionInspector : public ResourceConsumptionInspector {$/;"	c
LocalSelectionInspector	inspectors/selectioninspector.hpp	/^class LocalSelectionInspector : public SelectionInspector {$/;"	c
LocalSolution	procedures/localdivprocedures.hpp	/^  LocalSolution() : solution(0), b(0) {}$/;"	f	class:LocalSolution
LocalSolution	procedures/localdivprocedures.hpp	/^  LocalSolution(LocalDivModel * solution1, block b1) :$/;"	f	class:LocalSolution
LocalSolution	procedures/localdivprocedures.hpp	/^class LocalSolution {$/;"	c
LocalUsersInspector	inspectors/usersinspector.hpp	/^class LocalUsersInspector : public UsersInspector {$/;"	c
Location	third-party/jsoncpp/json_reader.cpp	/^  typedef const Char* Location;$/;"	t	class:Json::OurReader	file:
LogicError	third-party/jsoncpp/json/value.h	/^class JSON_API LogicError : public Exception {$/;"	c	namespace:Json
LogicError	third-party/jsoncpp/json_value.cpp	/^LogicError::LogicError(JSONCPP_STRING const& msg)$/;"	f	class:Json::LogicError
MAYPRECEDE	inspectors/precedenceinspector.hpp	/^enum PrecedenceType {MAYPRECEDE, PRECEDE};$/;"	e	enum:PrecedenceType
MINIMUM_COST_SEARCH	common/definitions.hpp	/^const char MINIMUM_COST_SEARCH = 'm';$/;"	v
MINUSONEBASED1	presolver.cpp	185;"	d	file:
MKDIR	div-generated.mk	/^MKDIR         = mkdir -p$/;"	m
MKDIR	generated.mk	/^MKDIR         = mkdir -p$/;"	m
MKDIR	presolver-generated.mk	/^MKDIR         = mkdir -p$/;"	m
MOVE	div-generated.mk	/^MOVE          = mv -f$/;"	m
MOVE	generated.mk	/^MOVE          = mv -f$/;"	m
MOVE	presolver-generated.mk	/^MOVE          = mv -f$/;"	m
MaxDivModel	models/maxdivmodel.cpp	/^MaxDivModel::MaxDivModel(MaxDivModel& cg) :$/;"	f	class:MaxDivModel
MaxDivModel	models/maxdivmodel.cpp	/^MaxDivModel::MaxDivModel(Parameters * p_input, ModelOptions * p_options,$/;"	f	class:MaxDivModel
MaxDivModel	models/maxdivmodel.hpp	/^class MaxDivModel : public DivModel {$/;"	c
Members	third-party/jsoncpp/json/value.h	/^  typedef std::vector<JSONCPP_STRING> Members;$/;"	t	class:Json::Value
Merit	branchers/merit.cpp	/^namespace Merit {$/;"	n	file:
Merit	branchers/merit.hpp	/^namespace Merit {$/;"	n
Model	models/model.cpp	/^Model::Model(Model& m) :$/;"	f	class:Model
Model	models/model.cpp	/^Model::Model(Parameters * p_input, ModelOptions * p_options, IntPropLevel p_ipl) :$/;"	f	class:Model
Model	models/model.hpp	/^class Model : public IntLexMinimizeSpace {$/;"	c
ModelGraphicsView	inspectors/modelgraphicsview.cpp	/^ModelGraphicsView::ModelGraphicsView(QGraphicsScene * scene) :$/;"	f	class:ModelGraphicsView
ModelGraphicsView	inspectors/modelgraphicsview.hpp	/^class ModelGraphicsView : public QGraphicsView$/;"	c
ModelInspector	inspectors/modelinspector.cpp	/^ModelInspector::ModelInspector(void) :$/;"	f	class:ModelInspector
ModelInspector	inspectors/modelinspector.hpp	/^class ModelInspector : public Gecode::Gist::Inspector {$/;"	c
ModelOptions	models/options.cpp	/^ModelOptions::ModelOptions(void)$/;"	f	class:ModelOptions
ModelOptions	models/options.hpp	/^class ModelOptions : public InstanceOptions {$/;"	c
ModelOptions	models/presolver-options.cpp	/^ModelOptions::ModelOptions(void)$/;"	f	class:ModelOptions
Most	third-party/jsoncpp/json_writer.cpp	/^    Most,  \/\/\/< Recover odd behavior of previous versions (not implemented yet).$/;"	e	enum:Json::CommentStyle::Enum	file:
N	models/parameters.hpp	/^  unsigned int N;$/;"	m	class:Parameters
NDCOORD	inspectors/dot.hpp	58;"	d
NDHEIGHT	inspectors/dot.hpp	59;"	d
NDNAME	inspectors/dot.hpp	57;"	d
NDWIDTH	inspectors/dot.hpp	60;"	d
NOT_EXPR	common/definitions.hpp	/^    NOT_EXPR,$/;"	e	enum:UnisonConstraintExprId
NULL_ACTIVATION_CLASS	common/definitions.hpp	/^const operation NULL_ACTIVATION_CLASS = -1;$/;"	v
NULL_INSTRUCTION	common/definitions.hpp	/^const instruction NULL_INSTRUCTION = 0;$/;"	v
NULL_OPERATION	common/definitions.hpp	/^const operation NULL_OPERATION = -1;$/;"	v
NULL_REGISTER	common/definitions.hpp	/^const temporary NULL_REGISTER = -1;$/;"	v
NULL_TEMPORARY	common/definitions.hpp	/^const temporary NULL_TEMPORARY = -1;$/;"	v
NodeId	inspectors/dot.hpp	/^typedef QString NodeId;$/;"	t
NodeType	inspectors/dataflowinspector.hpp	/^enum NodeType {INACTIVE, UNDECIDEDACTIVENESS, ACTIVE};$/;"	g
Nodes	third-party/jsoncpp/json_reader.cpp	/^  typedef std::stack<Value*> Nodes;$/;"	t	class:Json::OurReader	file:
None	third-party/jsoncpp/json_writer.cpp	/^    None,  \/\/\/< Drop all comments.$/;"	e	enum:Json::CommentStyle::Enum	file:
O	models/completemodel.cpp	/^vector<operation> & CompleteModel::O() const { return input->O; }$/;"	f	class:CompleteModel
O	models/localmodel.cpp	/^vector<operation> & LocalModel::O() const { return input->ops[b]; }$/;"	f	class:LocalModel
O	models/parameters.hpp	/^  vector<operation> O;$/;"	m	class:Parameters
O	models/relaxedmodel.cpp	/^vector<operation> & RelaxedModel::O() const { return input->O; }$/;"	f	class:RelaxedModel
OBJECTS	div-generated.mk	/^OBJECTS       = json_reader.o \\$/;"	m
OBJECTS	generated.mk	/^OBJECTS       = json_reader.o \\$/;"	m
OBJECTS	presolver-generated.mk	/^OBJECTS       = json_reader.o \\$/;"	m
OBJECTS_DIR	div-generated.mk	/^OBJECTS_DIR   = .\/$/;"	m
OBJECTS_DIR	generated.mk	/^OBJECTS_DIR   = .\/$/;"	m
OBJECTS_DIR	presolver-generated.mk	/^OBJECTS_DIR   = .\/$/;"	m
OPERAND_OVERLAP_EXPR	common/definitions.hpp	/^    OPERAND_OVERLAP_EXPR,	\/\/ ex-PRESOLVER_OVERLAPPING_OPERANDS$/;"	e	enum:UnisonConstraintExprId
OPTIMAL_SOLUTION	procedures/commonprocedures.hpp	/^  { SOME_SOLUTION, UNSATISFIABLE, LIMIT, OPTIMAL_SOLUTION, CACHED_SOLUTION,$/;"	e	enum:SolverResult
OR_EXPR	common/definitions.hpp	/^  { OR_EXPR,$/;"	e	enum:UnisonConstraintExprId
OSX_DIVERSIFIERBIN	diversifier.mk	/^OSX_DIVERSIFIERBIN = $(DIVERSIFIERDIR)\/gecode-diversify.app\/Contents\/MacOS\/gecode-diversify$/;"	m
OSX_PRESOLVERBIN	presolver.mk	/^OSX_PRESOLVERBIN = $(PRESOLVERDIR)\/gecode-presolver.app\/Contents\/MacOS\/gecode-presolver$/;"	m
OSX_SOLVERBIN	solver.mk	/^OSX_SOLVERBIN = $(SOLVERDIR)\/gecode-solver.app\/Contents\/MacOS\/gecode-solver$/;"	m
OUT	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
ObjectValues	third-party/jsoncpp/json/value.h	/^  typedef CppTL::SmallMap<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
ObjectValues	third-party/jsoncpp/json/value.h	/^  typedef std::map<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
OperandAllocationInspector	inspectors/operandallocationinspector.cpp	/^OperandAllocationInspector::OperandAllocationInspector() :$/;"	f	class:OperandAllocationInspector
OperandAllocationInspector	inspectors/operandallocationinspector.hpp	/^class OperandAllocationInspector : public ConsoleInspector {$/;"	c
OperandAssignmentInspector	inspectors/operandassignmentinspector.hpp	/^class OperandAssignmentInspector : public ModelInspector {$/;"	c
OperandLatencyInspector	inspectors/operandlatencyinspector.cpp	/^OperandLatencyInspector::OperandLatencyInspector() : ConsoleInspector("Operand latency") {}$/;"	f	class:OperandLatencyInspector
OperandLatencyInspector	inspectors/operandlatencyinspector.hpp	/^class OperandLatencyInspector : public ConsoleInspector {$/;"	c
OperationType	common/definitions.hpp	/^enum OperationType$/;"	g
OurCharReader	third-party/jsoncpp/json_reader.cpp	/^  OurCharReader($/;"	f	class:Json::OurCharReader
OurCharReader	third-party/jsoncpp/json_reader.cpp	/^class OurCharReader : public CharReader {$/;"	c	namespace:Json	file:
OurFeatures	third-party/jsoncpp/json_reader.cpp	/^class OurFeatures {$/;"	c	namespace:Json	file:
OurReader	third-party/jsoncpp/json_reader.cpp	/^OurReader::OurReader(OurFeatures const& features)$/;"	f	class:Json::OurReader
OurReader	third-party/jsoncpp/json_reader.cpp	/^class OurReader {$/;"	c	namespace:Json	file:
P	models/completemodel.cpp	/^vector<operand> & CompleteModel::P() const { return input->P; }$/;"	f	class:CompleteModel
P	models/localmodel.cpp	/^vector<operand> & LocalModel::P() const { return input->ope[b]; }$/;"	f	class:LocalModel
P	models/parameters.hpp	/^  vector<operand> P;$/;"	m	class:Parameters
P	models/relaxedmodel.cpp	/^vector<operand> & RelaxedModel::P() const { return input->P; }$/;"	f	class:RelaxedModel
PA	presolver/infeasible_presolver.hpp	/^  PresolverAsserts& PA;$/;"	m	class:InfeasiblePresolver
POSITION	inspectors/dot.hpp	55;"	d
POSSIBLE	inspectors/dataflowinspector.hpp	/^enum EdgeType {FIXED, DISCARDED, POSSIBLE, ASSIGNED};$/;"	e	enum:EdgeType
PRECEDE	inspectors/precedenceinspector.hpp	/^enum PrecedenceType {MAYPRECEDE, PRECEDE};$/;"	e	enum:PrecedenceType
PRESOLVERCLASSES	presolver.mk	/^PRESOLVERCLASSES := $(addprefix $(SOLVERCOMMONDIR)\/, $(SOLVERCOMMON))	\\$/;"	m
PRESOLVERCPPSRC	presolver.mk	/^PRESOLVERCPPSRC := $(addsuffix .cpp, $(PRESOLVERMAIN) $(PRESOLVERCLASSES))$/;"	m
PRESOLVERGENMAKEFILE	presolver.mk	/^PRESOLVERGENMAKEFILE = $(PRESOLVERDIR)\/presolver-generated.mk$/;"	m
PRESOLVERHPPSRC	presolver.mk	/^PRESOLVERHPPSRC := $(addsuffix .hpp, $(PRESOLVERCLASSES))$/;"	m
PRESOLVERMAIN	presolver.mk	/^PRESOLVERMAIN = $(PRESOLVERDIR)\/presolver$/;"	m
PRESOLVERPROJECT	presolver.mk	/^PRESOLVERPROJECT := $(PRESOLVERDIR)\/presolver.pro$/;"	m
PRESOLVERSRC	presolver.mk	/^PRESOLVERSRC := $(PRESOLVERCPPSRC)$/;"	m
Parameters	models/parameters.cpp	/^Parameters::Parameters(JSONVALUE root) :$/;"	f	class:Parameters
Parameters	models/parameters.hpp	/^  Parameters() {};$/;"	f	class:Parameters
Parameters	models/parameters.hpp	/^class Parameters {$/;"	c
Path	third-party/jsoncpp/json/value.h	/^class JSON_API Path {$/;"	c	namespace:Json
Path	third-party/jsoncpp/json_value.cpp	/^Path::Path(const JSONCPP_STRING& path,$/;"	f	class:Json::Path
PathArgument	third-party/jsoncpp/json/value.h	/^class JSON_API PathArgument {$/;"	c	namespace:Json
PathArgument	third-party/jsoncpp/json_value.cpp	/^PathArgument::PathArgument() : key_(), index_(), kind_(kindNone) {}$/;"	f	class:Json::PathArgument
PathArgument	third-party/jsoncpp/json_value.cpp	/^PathArgument::PathArgument(ArrayIndex index)$/;"	f	class:Json::PathArgument
PathArgument	third-party/jsoncpp/json_value.cpp	/^PathArgument::PathArgument(const JSONCPP_STRING& key)$/;"	f	class:Json::PathArgument
PathArgument	third-party/jsoncpp/json_value.cpp	/^PathArgument::PathArgument(const char* key)$/;"	f	class:Json::PathArgument
PrecedenceEdge	common/definitions.hpp	/^class PrecedenceEdge {$/;"	c
PrecedenceGraph	inspectors/precedenceinspector.hpp	/^  PrecedenceGraph() {$/;"	f	class:PrecedenceGraph
PrecedenceGraph	inspectors/precedenceinspector.hpp	/^class PrecedenceGraph {$/;"	c
PrecedenceInspector	inspectors/precedenceinspector.hpp	/^class PrecedenceInspector : public ModelInspector {$/;"	c
PrecedenceMatrixInspector	inspectors/precedencematrixinspector.cpp	/^PrecedenceMatrixInspector::PrecedenceMatrixInspector() :$/;"	f	class:PrecedenceMatrixInspector
PrecedenceMatrixInspector	inspectors/precedencematrixinspector.hpp	/^class PrecedenceMatrixInspector : public ConsoleInspector {$/;"	c
PrecedenceType	inspectors/precedenceinspector.hpp	/^enum PrecedenceType {MAYPRECEDE, PRECEDE};$/;"	g
PresolveRelaxationJob	procedures/globalprocedures.cpp	/^  PresolveRelaxationJob(LocalModel * ls0, GIST_OPTIONS * lo0,$/;"	f	class:PresolveRelaxationJob
PresolveRelaxationJob	procedures/globalprocedures.cpp	/^class PresolveRelaxationJob : public Support::Job<RelaxationResult> {$/;"	c	file:
PresolveRelaxationJobs	procedures/globalprocedures.cpp	/^  PresolveRelaxationJobs(const GlobalModel & base0, GIST_OPTIONS * lo0) :$/;"	f	class:PresolveRelaxationJobs
PresolveRelaxationJobs	procedures/globalprocedures.cpp	/^class PresolveRelaxationJobs {$/;"	c	file:
PresolveShavingJob	procedures/globalprocedures.cpp	/^  PresolveShavingJob(const GlobalModel & base0, block b0) :$/;"	f	class:PresolveShavingJob
PresolveShavingJob	procedures/globalprocedures.cpp	/^class PresolveShavingJob : public Support::Job<ShavingResults> {$/;"	c	file:
PresolveShavingJobs	procedures/globalprocedures.cpp	/^  PresolveShavingJobs(const GlobalModel & base0) : base(base0), k(0) {}$/;"	f	class:PresolveShavingJobs
PresolveShavingJobs	procedures/globalprocedures.cpp	/^class PresolveShavingJobs {$/;"	c	file:
PresolverAcross	common/definitions.hpp	/^class PresolverAcross {$/;"	c
PresolverAcrossItem	common/definitions.hpp	/^class PresolverAcrossItem {$/;"	c
PresolverAcrossItemJSON	common/definitions.hpp	/^  PresolverAcrossItemJSON() : t(-1), e() {}$/;"	f	class:PresolverAcrossItemJSON
PresolverAcrossItemJSON	common/definitions.hpp	/^  PresolverAcrossItemJSON(temporary t, UnisonConstraintExpr e):$/;"	f	class:PresolverAcrossItemJSON
PresolverAcrossItemJSON	common/definitions.hpp	/^class PresolverAcrossItemJSON {$/;"	c
PresolverAcrossJSON	common/definitions.hpp	/^class PresolverAcrossJSON {$/;"	c
PresolverAcrossTuple	common/definitions.hpp	/^class PresolverAcrossTuple {$/;"	c
PresolverActiveTable	common/definitions.hpp	/^class PresolverActiveTable {$/;"	c
PresolverAsserts	presolver/presolver_asserts.hpp	/^  PresolverAsserts() {};$/;"	f	class:PresolverAsserts
PresolverAsserts	presolver/presolver_asserts.hpp	/^class PresolverAsserts {$/;"	c
PresolverBefore	common/definitions.hpp	/^class PresolverBefore {$/;"	c
PresolverBeforeJSON	common/definitions.hpp	/^  PresolverBeforeJSON() : p(-1), q(-1), e() {}$/;"	f	class:PresolverBeforeJSON
PresolverBeforeJSON	common/definitions.hpp	/^  PresolverBeforeJSON(operation p, operation q, UnisonConstraintExpr e):$/;"	f	class:PresolverBeforeJSON
PresolverBeforeJSON	common/definitions.hpp	/^class PresolverBeforeJSON {$/;"	c
PresolverCopyTmpTable	common/definitions.hpp	/^class PresolverCopyTmpTable {$/;"	c
PresolverDominates	common/definitions.hpp	/^class PresolverDominates {$/;"	c
PresolverInsn2Class2	common/definitions.hpp	/^class PresolverInsn2Class2 {$/;"	c
PresolverInsnClass	common/definitions.hpp	/^class PresolverInsnClass {$/;"	c
PresolverInstrCond	common/definitions.hpp	/^class PresolverInstrCond {$/;"	c
PresolverOptions	presolver/presolver-options.cpp	/^PresolverOptions::PresolverOptions(void)$/;"	f	class:PresolverOptions
PresolverOptions	presolver/presolver-options.hpp	/^class PresolverOptions : public InstanceOptions {$/;"	c
PresolverPrecedence	common/definitions.hpp	/^  PresolverPrecedence() : i(-1), j(-1), n(-1), d() { }$/;"	f	class:PresolverPrecedence
PresolverPrecedence	common/definitions.hpp	/^  PresolverPrecedence(operation i, operation j, latency n, presolver_disj d):$/;"	f	class:PresolverPrecedence
PresolverPrecedence	common/definitions.hpp	/^class PresolverPrecedence {$/;"	c
PresolverSetAcross	common/definitions.hpp	/^class PresolverSetAcross {$/;"	c
PresolverSetAcrossTuple	presolver/across.hpp	/^class PresolverSetAcrossTuple {$/;"	c
PresolverValuePrecedeChain	common/definitions.hpp	/^class PresolverValuePrecedeChain {$/;"	c
PresolverWCET	common/definitions.hpp	/^  PresolverWCET():$/;"	f	class:PresolverWCET
PresolverWCET	common/definitions.hpp	/^  PresolverWCET(operation o, instruction i, latency d):$/;"	f	class:PresolverWCET
PresolverWCET	common/definitions.hpp	/^class PresolverWCET {$/;"	c
PressureSchedulingBrancher	branchers/pressureschedulingbrancher.cpp	/^  PressureSchedulingBrancher(Home home, ViewArray<Int::IntView>& c0)$/;"	f	class:PressureSchedulingBrancher
PressureSchedulingBrancher	branchers/pressureschedulingbrancher.cpp	/^  PressureSchedulingBrancher(Space& home, PressureSchedulingBrancher& b)$/;"	f	class:PressureSchedulingBrancher
PressureSchedulingBrancher	branchers/pressureschedulingbrancher.cpp	/^class PressureSchedulingBrancher : public Brancher {$/;"	c	file:
QLOCATION	inspectors/modelinspector.hpp	53;"	d
QMAKE	div-generated.mk	/^QMAKE         = \/usr\/lib\/x86_64-linux-gnu\/qt4\/bin\/qmake$/;"	m
QMAKE	generated.mk	/^QMAKE         = \/usr\/lib\/x86_64-linux-gnu\/qt4\/bin\/qmake$/;"	m
QMAKE	presolver-generated.mk	/^QMAKE         = \/usr\/lib\/x86_64-linux-gnu\/qt4\/bin\/qmake$/;"	m
QMAKE_TARGET	div-generated.mk	/^QMAKE_TARGET  = gecode-diversify$/;"	m
QMAKE_TARGET	generated.mk	/^QMAKE_TARGET  = gecode-solver$/;"	m
QMAKE_TARGET	presolver-generated.mk	/^QMAKE_TARGET  = gecode-presolver$/;"	m
Q_OBJECT	inspectors/modelgraphicsview.hpp	/^    Q_OBJECT;$/;"	m	class:ModelGraphicsView
Quad	presolver.cpp	/^  Quad() : id(AND_EXPR), arg1(0), arg2(0), arg3(0), children({}) {}$/;"	f	class:Quad
Quad	presolver.cpp	/^class Quad {$/;"	c	file:
R	models/parameters.hpp	/^  vector<instruction> R;$/;"	m	class:Parameters
R	presolver/infeasible_presolver.hpp	/^  vector<vector<operand> > R;$/;"	m	class:InfeasiblePresolver
RA	models/parameters.hpp	/^  vector<register_atom> RA;$/;"	m	class:Parameters
RANLIB	div-generated.mk	/^RANLIB        = $/;"	m
RANLIB	generated.mk	/^RANLIB        = $/;"	m
RANLIB	presolver-generated.mk	/^RANLIB        = $/;"	m
RA_CALLEE_SAVED	common/definitions.hpp	/^  {RA_CALLEE_SAVED, RA_CALLER_SAVED, RA_RESERVED};$/;"	e	enum:RegisterAtomClass
RA_CALLER_SAVED	common/definitions.hpp	/^  {RA_CALLEE_SAVED, RA_CALLER_SAVED, RA_RESERVED};$/;"	e	enum:RegisterAtomClass
RA_RESERVED	common/definitions.hpp	/^  {RA_CALLEE_SAVED, RA_CALLER_SAVED, RA_RESERVED};$/;"	e	enum:RegisterAtomClass
RC	models/parameters.hpp	/^  vector<register_class> RC;$/;"	m	class:Parameters
RELAXED_NO_SOLUTION_FOUND	procedures/presolverprocedures.hpp	/^const int RELAXED_NO_SOLUTION_FOUND = 0;$/;"	v
RELAXED_NO_TIMEOUT	procedures/presolverprocedures.hpp	/^const int RELAXED_NO_TIMEOUT = 0;$/;"	v
RELAXED_SOLUTION_FOUND	procedures/presolverprocedures.hpp	/^const int RELAXED_SOLUTION_FOUND = 1;$/;"	v
RELAXED_TIMEOUT	procedures/presolverprocedures.hpp	/^const int RELAXED_TIMEOUT = 1;$/;"	v
RS	models/parameters.hpp	/^  vector<register_space> RS;$/;"	m	class:Parameters
Reader	third-party/jsoncpp/json_reader.cpp	/^Reader::Reader()$/;"	f	class:Json::Reader
Reader	third-party/jsoncpp/json_reader.cpp	/^Reader::Reader(const Features& features)$/;"	f	class:Json::Reader
RegisterArrayInspector	inspectors/registerarrayinspector.hpp	/^class RegisterArrayInspector : public ModelInspector {$/;"	c
RegisterAtomClass	common/definitions.hpp	/^enum RegisterAtomClass$/;"	g
RelaxationResult	procedures/globalprocedures.cpp	/^  RelaxationResult() :$/;"	f	class:RelaxationResult
RelaxationResult	procedures/globalprocedures.cpp	/^  RelaxationResult(SolverResult result0, operation co0, operation oo0,$/;"	f	class:RelaxationResult
RelaxationResult	procedures/globalprocedures.cpp	/^class RelaxationResult {$/;"	c	file:
RelaxedModel	models/relaxedmodel.cpp	/^RelaxedModel::RelaxedModel(Parameters * p_input, ModelOptions * p_options,$/;"	f	class:RelaxedModel
RelaxedModel	models/relaxedmodel.cpp	/^RelaxedModel::RelaxedModel(RelaxedModel& cg) :$/;"	f	class:RelaxedModel
RelaxedModel	models/relaxedmodel.hpp	/^class RelaxedModel : public Model {$/;"	c
ResourceConsumptionInspector	inspectors/resourceconsumptioninspector.hpp	/^class ResourceConsumptionInspector : public ModelInspector {$/;"	c
ResultData	diversifier.cpp	/^  ResultData(GlobalModel * solution, bool proven, long long int it_fail,$/;"	f	class:ResultData
ResultData	diversifier.cpp	/^class ResultData {$/;"	c	file:
ResultData	solver.cpp	/^  ResultData(GlobalModel * solution, bool proven, long long int it_fail,$/;"	f	class:ResultData
ResultData	solver.cpp	/^class ResultData {$/;"	c	file:
ResultDivData	diversifier.cpp	/^  ResultDivData(DivModel * solution, bool proven, long long int it_fail,$/;"	f	class:ResultDivData
ResultDivData	diversifier.cpp	/^class ResultDivData {$/;"	c	file:
RoutingBrancher	branchers/routingbrancher.cpp	/^  RoutingBrancher(Home home, ViewArray<Int::BoolView>& a0,$/;"	f	class:RoutingBrancher
RoutingBrancher	branchers/routingbrancher.cpp	/^  RoutingBrancher(Space& home, RoutingBrancher& b)$/;"	f	class:RoutingBrancher
RoutingBrancher	branchers/routingbrancher.cpp	/^class RoutingBrancher : public Brancher {$/;"	c	file:
RoutingDecision	branchers/routingbrancher.cpp	/^  enum RoutingDecision { ACTIVENESS, INSTRUCTION, TEMPORARY };$/;"	g	class:RoutingBrancher	file:
RuntimeError	third-party/jsoncpp/json/value.h	/^class JSON_API RuntimeError : public Exception {$/;"	c	namespace:Json
RuntimeError	third-party/jsoncpp/json_value.cpp	/^RuntimeError::RuntimeError(JSONCPP_STRING const& msg)$/;"	f	class:Json::RuntimeError
SCHEDULE	branchers/pressureschedulingbrancher.cpp	/^  enum SchedulingDecision { SCHEDULE, SPLIT };$/;"	e	enum:PressureSchedulingBrancher::SchedulingDecision	file:
SED	div-generated.mk	/^SED           = sed$/;"	m
SED	generated.mk	/^SED           = sed$/;"	m
SED	presolver-generated.mk	/^SED           = sed$/;"	m
SHARE_EXPR	common/definitions.hpp	/^    SHARE_EXPR,			\/\/ ex-PRESOLVER_EQUAL_TEMPORARIES$/;"	e	enum:UnisonConstraintExprId
SHAVING_FAILURE	procedures/commonprocedures.hpp	/^    SHAVING_FAILURE, UNKNOWN };$/;"	e	enum:SolverResult
SOLVERBRANCHERS	presolver.mk	/^SOLVERBRANCHERS := filters merit value printers pressureschedulingbrancher \\$/;"	m
SOLVERBRANCHERS	solver.mk	/^SOLVERBRANCHERS := filters merit value printers pressureschedulingbrancher	\\$/;"	m
SOLVERBRANCHERSDIR	presolver.mk	/^SOLVERBRANCHERSDIR := $(SOLVERDIR)\/branchers$/;"	m
SOLVERBRANCHERSDIR	solver.mk	/^SOLVERBRANCHERSDIR := $(SOLVERDIR)\/branchers$/;"	m
SOLVERCLASSES	solver.mk	/^SOLVERCLASSES := $(addprefix $(SOLVERCOMMONDIR)\/, $(SOLVERCOMMON)) $(addprefix	\\$/;"	m
SOLVERCOMMON	presolver.mk	/^SOLVERCOMMON := definitions util jsonutil$/;"	m
SOLVERCOMMON	solver.mk	/^SOLVERCOMMON := definitions util jsonutil$/;"	m
SOLVERCOMMONDIR	presolver.mk	/^SOLVERCOMMONDIR := $(PRESOLVERDIR)\/common$/;"	m
SOLVERCOMMONDIR	solver.mk	/^SOLVERCOMMONDIR := $(SOLVERDIR)\/common$/;"	m
SOLVERCPPSRC	solver.mk	/^SOLVERCPPSRC := $(addsuffix .cpp, $(SOLVERMAIN) $(SOLVERCLASSES))$/;"	m
SOLVERHPPSRC	solver.mk	/^SOLVERHPPSRC := $(addsuffix .hpp, $(SOLVERCLASSES))$/;"	m
SOLVERINSPECTORS	solver.mk	/^SOLVERINSPECTORS := consoleinspector modelgraphicsview modelinspector dot	\\$/;"	m
SOLVERINSPECTORSDIR	solver.mk	/^SOLVERINSPECTORSDIR := $(SOLVERDIR)\/inspectors$/;"	m
SOLVERMAIN	solver.mk	/^SOLVERMAIN = $(SOLVERDIR)\/solver$/;"	m
SOLVERMODELS	presolver.mk	/^SOLVERMODELS := parameters options model relaxedmodel completemodel localmodel \\$/;"	m
SOLVERMODELS	solver.mk	/^SOLVERMODELS := parameters options model localmodel completemodel globalmodel	\\$/;"	m
SOLVERMODELSDIR	presolver.mk	/^SOLVERMODELSDIR := $(PRESOLVERDIR)\/models$/;"	m
SOLVERMODELSDIR	solver.mk	/^SOLVERMODELSDIR := $(SOLVERDIR)\/models$/;"	m
SOLVERPRESOLVER	presolver.mk	/^SOLVERPRESOLVER := presolver-options presolve before_presolver diff_temps	\\$/;"	m
SOLVERPRESOLVERDIR	presolver.mk	/^SOLVERPRESOLVERDIR := $(PRESOLVERDIR)\/presolver$/;"	m
SOLVERPROCEDURES	presolver.mk	/^SOLVERPROCEDURES := presolverprocedures commonprocedures$/;"	m
SOLVERPROCEDURES	solver.mk	/^SOLVERPROCEDURES := commonprocedures globalprocedures localprocedures$/;"	m
SOLVERPROCEDURESDIR	presolver.mk	/^SOLVERPROCEDURESDIR := $(PRESOLVERDIR)\/procedures$/;"	m
SOLVERPROCEDURESDIR	solver.mk	/^SOLVERPROCEDURESDIR := $(SOLVERDIR)\/procedures$/;"	m
SOLVERPROJECT	solver.mk	/^SOLVERPROJECT := $(SOLVERDIR)\/solver.pro$/;"	m
SOLVERSRC	solver.mk	/^SOLVERSRC := $(SOLVERCPPSRC) $(SOLVERHPPSRC)$/;"	m
SOME_SOLUTION	procedures/commonprocedures.hpp	/^  { SOME_SOLUTION, UNSATISFIABLE, LIMIT, OPTIMAL_SOLUTION, CACHED_SOLUTION,$/;"	e	enum:SolverResult
SOURCES	div-generated.mk	/^SOURCES       = third-party\/jsoncpp\/json_reader.cpp \\$/;"	m
SOURCES	generated.mk	/^SOURCES       = third-party\/jsoncpp\/json_reader.cpp \\$/;"	m
SOURCES	presolver-generated.mk	/^SOURCES       = third-party\/jsoncpp\/json_reader.cpp \\$/;"	m
SPLIT	branchers/pressureschedulingbrancher.cpp	/^  enum SchedulingDecision { SCHEDULE, SPLIT };$/;"	e	enum:PressureSchedulingBrancher::SchedulingDecision	file:
SPLIT2	common/definitions.hpp	/^    SPLIT2, SPLIT4, FUN, COPY };$/;"	e	enum:OperationType
SPLIT4	common/definitions.hpp	/^    SPLIT2, SPLIT4, FUN, COPY };$/;"	e	enum:OperationType
STATIC_GOAL	common/definitions.hpp	/^enum GoalType { STATIC_GOAL, DYNAMIC_GOAL };$/;"	e	enum:GoalType
STRIP	div-generated.mk	/^STRIP         = strip$/;"	m
STRIP	generated.mk	/^STRIP         = strip$/;"	m
STRIP	presolver-generated.mk	/^STRIP         = strip$/;"	m
SYMLINK	div-generated.mk	/^SYMLINK       = ln -f -s$/;"	m
SYMLINK	generated.mk	/^SYMLINK       = ln -f -s$/;"	m
SYMLINK	presolver-generated.mk	/^SYMLINK       = ln -f -s$/;"	m
SchedulingChoice	branchers/pressureschedulingbrancher.cpp	/^    SchedulingChoice(const PressureSchedulingBrancher& b, operation o0, int n0)$/;"	f	class:PressureSchedulingBrancher::SchedulingChoice
SchedulingChoice	branchers/pressureschedulingbrancher.cpp	/^  class SchedulingChoice :$/;"	c	class:PressureSchedulingBrancher	file:
SchedulingDecision	branchers/pressureschedulingbrancher.cpp	/^  enum SchedulingDecision { SCHEDULE, SPLIT };$/;"	g	class:PressureSchedulingBrancher	file:
SchedulingStrategy	common/definitions.hpp	/^enum SchedulingStrategy { EARLIEST_INSTRUCTION, ISSUE_CYCLE_SIZE_MIN };$/;"	g
SecureAllocator	third-party/jsoncpp/json/allocator.h	/^		SecureAllocator() {}$/;"	f	class:Json::SecureAllocator
SecureAllocator	third-party/jsoncpp/json/allocator.h	/^		template<typename U> SecureAllocator(const SecureAllocator<U>&) {}$/;"	f	class:Json::SecureAllocator
SecureAllocator	third-party/jsoncpp/json/allocator.h	/^class SecureAllocator {$/;"	c	namespace:Json
SelectionInspector	inspectors/selectioninspector.cpp	/^SelectionInspector::SelectionInspector() :$/;"	f	class:SelectionInspector
SelectionInspector	inspectors/selectioninspector.hpp	/^class SelectionInspector : public ConsoleInspector {$/;"	c
SelfType	third-party/jsoncpp/json/value.h	/^  typedef ValueConstIterator SelfType;$/;"	t	class:Json::ValueConstIterator
SelfType	third-party/jsoncpp/json/value.h	/^  typedef ValueIterator SelfType;$/;"	t	class:Json::ValueIterator
SelfType	third-party/jsoncpp/json/value.h	/^  typedef ValueIteratorBase SelfType;$/;"	t	class:Json::ValueIteratorBase
SetCenter	inspectors/modelgraphicsview.cpp	/^void ModelGraphicsView::SetCenter(const QPointF& centerPoint) {$/;"	f	class:ModelGraphicsView
ShavingResults	procedures/globalprocedures.cpp	/^  ShavingResults() : result(UNKNOWN), b(-1), local_cost_lb(0) {}$/;"	f	class:ShavingResults
ShavingResults	procedures/globalprocedures.cpp	/^  ShavingResults(block b0) : ShavingResults() {b = b0;}$/;"	f	class:ShavingResults
ShavingResults	procedures/globalprocedures.cpp	/^class ShavingResults {$/;"	c	file:
SimpleModel	models/simplemodel.cpp	/^SimpleModel::SimpleModel(Parameters * p_input, ModelOptions * p_options,$/;"	f	class:SimpleModel
SimpleModel	models/simplemodel.cpp	/^SimpleModel::SimpleModel(SimpleModel& cg) :$/;"	f	class:SimpleModel
SimpleModel	models/simplemodel.hpp	/^class SimpleModel : public CompleteModel {$/;"	c
SingleChoice	common/util.hpp	/^  SingleChoice(const B& b, I first0) : Choice(b, 2), first(first0) {}$/;"	f	class:SingleChoice
SingleChoice	common/util.hpp	/^class SingleChoice : public Choice {$/;"	c
Solution	procedures/commonprocedures.hpp	/^  Solution() : result(UNKNOWN), solution(0), failures(0), nodes(0) {}$/;"	f	class:Solution
Solution	procedures/commonprocedures.hpp	/^  Solution(SolverResult result1, T * solution1, unsigned long int failures1,$/;"	f	class:Solution
Solution	procedures/commonprocedures.hpp	/^class Solution {$/;"	c
SolutionBrancher	branchers/solutionbrancher.cpp	/^  SolutionBrancher(Home home,$/;"	f	class:SolutionBrancher
SolutionBrancher	branchers/solutionbrancher.cpp	/^  SolutionBrancher(Space& home, SolutionBrancher& b)$/;"	f	class:SolutionBrancher
SolutionBrancher	branchers/solutionbrancher.cpp	/^class SolutionBrancher : public Brancher {$/;"	c	file:
SolverParameters	models/solver-parameters.cpp	/^SolverParameters::SolverParameters(JSONVALUE root) :$/;"	f	class:SolverParameters
SolverParameters	models/solver-parameters.hpp	/^  SolverParameters() {};$/;"	f	class:SolverParameters
SolverParameters	models/solver-parameters.hpp	/^class SolverParameters {$/;"	c
SolverResult	procedures/commonprocedures.hpp	/^enum SolverResult$/;"	g
SplitChoice	branchers/pressureschedulingbrancher.cpp	/^    SplitChoice(const PressureSchedulingBrancher& b, operation o0, int n0)$/;"	f	class:PressureSchedulingBrancher::SplitChoice
SplitChoice	branchers/pressureschedulingbrancher.cpp	/^  class SplitChoice :$/;"	c	class:PressureSchedulingBrancher	file:
StaticString	third-party/jsoncpp/json/value.h	/^  explicit StaticString(const char* czstring) : c_str_(czstring) {}$/;"	f	class:Json::StaticString
StaticString	third-party/jsoncpp/json/value.h	/^class JSON_API StaticString {$/;"	c	namespace:Json
StreamWriter	third-party/jsoncpp/json/writer.h	/^class JSON_API StreamWriter {$/;"	c	namespace:Json
StreamWriter	third-party/jsoncpp/json_writer.cpp	/^StreamWriter::StreamWriter()$/;"	f	class:Json::StreamWriter
StreamWriterBuilder	third-party/jsoncpp/json/writer.h	/^class JSON_API StreamWriterBuilder : public StreamWriter::Factory {$/;"	c	namespace:Json
StreamWriterBuilder	third-party/jsoncpp/json_writer.cpp	/^StreamWriterBuilder::StreamWriterBuilder()$/;"	f	class:Json::StreamWriterBuilder
StreamWriterPtr	third-party/jsoncpp/json_writer.cpp	/^typedef std::unique_ptr<StreamWriter> StreamWriterPtr;$/;"	t	namespace:Json	file:
StringStorage	third-party/jsoncpp/json/value.h	/^    struct StringStorage {$/;"	s	class:Json::Value::CZString
StructuredError	third-party/jsoncpp/json_reader.cpp	/^  struct StructuredError {$/;"	s	class:Json::OurReader	file:
StyledStreamWriter	third-party/jsoncpp/json_writer.cpp	/^StyledStreamWriter::StyledStreamWriter(JSONCPP_STRING indentation)$/;"	f	class:Json::StyledStreamWriter
StyledWriter	third-party/jsoncpp/json_writer.cpp	/^StyledWriter::StyledWriter()$/;"	f	class:Json::StyledWriter
T	models/completemodel.cpp	/^vector<temporary> & CompleteModel::T() const { return input->T; }$/;"	f	class:CompleteModel
T	models/localmodel.cpp	/^vector<temporary> & LocalModel::T() const { return input->tmp[b]; }$/;"	f	class:LocalModel
T	models/parameters.hpp	/^  vector<temporary> T;$/;"	m	class:Parameters
T	models/relaxedmodel.cpp	/^vector<temporary> & RelaxedModel::T() const { return input->T; }$/;"	f	class:RelaxedModel
TAILCALL	common/definitions.hpp	/^  { LINEAR, BRANCH, CALL, TAILCALL, IN, OUT, KILL, DEFINE, COMBINE, LOW, HIGH,$/;"	e	enum:OperationType
TAR	div-generated.mk	/^TAR           = tar -cf$/;"	m
TAR	generated.mk	/^TAR           = tar -cf$/;"	m
TAR	presolver-generated.mk	/^TAR           = tar -cf$/;"	m
TARGET	div-generated.mk	/^TARGET        = gecode-diversify$/;"	m
TARGET	generated.mk	/^TARGET        = gecode-solver$/;"	m
TARGET	presolver-generated.mk	/^TARGET        = gecode-presolver$/;"	m
TEMPORAND_NONE	common/definitions.hpp	/^  {TEMPORAND_OPERAND, TEMPORAND_TEMPORARY, TEMPORAND_REGISTER, TEMPORAND_NONE};$/;"	e	enum:TemporandType
TEMPORAND_OPERAND	common/definitions.hpp	/^  {TEMPORAND_OPERAND, TEMPORAND_TEMPORARY, TEMPORAND_REGISTER, TEMPORAND_NONE};$/;"	e	enum:TemporandType
TEMPORAND_REGISTER	common/definitions.hpp	/^  {TEMPORAND_OPERAND, TEMPORAND_TEMPORARY, TEMPORAND_REGISTER, TEMPORAND_NONE};$/;"	e	enum:TemporandType
TEMPORAND_TEMPORARY	common/definitions.hpp	/^  {TEMPORAND_OPERAND, TEMPORAND_TEMPORARY, TEMPORAND_REGISTER, TEMPORAND_NONE};$/;"	e	enum:TemporandType
TEMPORARY	branchers/routingbrancher.cpp	/^  enum RoutingDecision { ACTIVENESS, INSTRUCTION, TEMPORARY };$/;"	e	enum:RoutingBrancher::RoutingDecision	file:
TEMPORARY_OVERLAP_EXPR	common/definitions.hpp	/^    TEMPORARY_OVERLAP_EXPR,	\/\/ ex-PRESOLVER_OVERLAPPING_TEMPORARIES$/;"	e	enum:UnisonConstraintExprId
TRIVIAL_SEARCH	common/definitions.hpp	/^const char TRIVIAL_SEARCH = 't';$/;"	v
Temporand	common/definitions.cpp	/^Temporand::Temporand() {}$/;"	f	class:Temporand
Temporand	common/definitions.cpp	/^Temporand::Temporand(const Temporand& t) : _id(t.id()), _type(t.type()) {}$/;"	f	class:Temporand
Temporand	common/definitions.cpp	/^Temporand::Temporand(int id, TemporandType t) : _id(id), _type(t) {}$/;"	f	class:Temporand
Temporand	common/definitions.hpp	/^class Temporand {$/;"	c
TemporandType	common/definitions.hpp	/^enum TemporandType$/;"	g
TemporaryChoice	branchers/routingbrancher.cpp	/^    TemporaryChoice(const RoutingBrancher& b, unsigned int pi0, int ti0)$/;"	f	class:RoutingBrancher::TemporaryChoice
TemporaryChoice	branchers/routingbrancher.cpp	/^  class TemporaryChoice :$/;"	c	class:RoutingBrancher	file:
TmpTableResult	procedures/presolverprocedures.hpp	/^class TmpTableResult {$/;"	c
Token	third-party/jsoncpp/json_reader.cpp	/^  class Token {$/;"	c	class:Json::OurReader	file:
TokenType	third-party/jsoncpp/json_reader.cpp	/^  enum TokenType {$/;"	g	class:Json::OurReader	file:
U	presolver/infeasible_presolver.hpp	/^  equality_set U;$/;"	m	class:InfeasiblePresolver
UInt	third-party/jsoncpp/json/config.h	/^typedef unsigned int UInt;$/;"	t	namespace:Json
UInt	third-party/jsoncpp/json/value.h	/^  typedef Json::UInt UInt;$/;"	t	class:Json::Value
UInt64	third-party/jsoncpp/json/config.h	/^typedef uint64_t UInt64;$/;"	t	namespace:Json
UInt64	third-party/jsoncpp/json/config.h	/^typedef unsigned __int64 UInt64;$/;"	t	namespace:Json
UInt64	third-party/jsoncpp/json/value.h	/^  typedef Json::UInt64 UInt64;$/;"	t	class:Json::Value
UIntToStringBuffer	third-party/jsoncpp/json_tool.h	/^typedef char UIntToStringBuffer[uintToStringBufferSize];$/;"	t	namespace:Json
UNDECIDEDACTIVENESS	inspectors/dataflowinspector.hpp	/^enum NodeType {INACTIVE, UNDECIDEDACTIVENESS, ACTIVE};$/;"	e	enum:NodeType
UNDECIDEDLIVENESS	inspectors/dataflowinspector.hpp	/^enum EdgeLabelType {DEAD, UNDECIDEDLIVENESS, LIVE};$/;"	e	enum:EdgeLabelType
UNISON_DIVERSIFIER_CONFIG	diversifier.mk	/^UNISON_DIVERSIFIER_CONFIG ?= graphics$/;"	m
UNISON_SOLVER_CONFIG	solver.mk	/^UNISON_SOLVER_CONFIG ?= graphics$/;"	m
UNKNOWN	procedures/commonprocedures.hpp	/^    SHAVING_FAILURE, UNKNOWN };$/;"	e	enum:SolverResult
UNSATISFIABLE	procedures/commonprocedures.hpp	/^  { SOME_SOLUTION, UNSATISFIABLE, LIMIT, OPTIMAL_SOLUTION, CACHED_SOLUTION,$/;"	e	enum:SolverResult
UnisonConstraintExpr	common/definitions.hpp	/^ UnisonConstraintExpr() : id(AND_EXPR), data({}), children({}) {}$/;"	f	class:UnisonConstraintExpr
UnisonConstraintExpr	common/definitions.hpp	/^ UnisonConstraintExpr(UnisonConstraintExprId id0, vector<int> data0,$/;"	f	class:UnisonConstraintExpr
UnisonConstraintExpr	common/definitions.hpp	/^class UnisonConstraintExpr {$/;"	c
UnisonConstraintExprId	common/definitions.hpp	/^enum UnisonConstraintExprId$/;"	g
UsageTask	common/util.hpp	/^class UsageTask {$/;"	c
UsersInspector	inspectors/usersinspector.cpp	/^UsersInspector::UsersInspector() : ConsoleInspector("Temporary users") {}$/;"	f	class:UsersInspector
UsersInspector	inspectors/usersinspector.hpp	/^class UsersInspector : public ConsoleInspector {$/;"	c
V	presolver/digraph.hpp	/^  vector<vertex> V;$/;"	m	class:Digraph
Value	third-party/jsoncpp/json/value.h	/^class JSON_API Value {$/;"	c	namespace:Json
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(Int value) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(Int64 value) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(UInt value) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(UInt64 value) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(Value const& other)$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(Value&& other) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(ValueType vtype) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(bool value) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(const CppTL::ConstString& value) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(const JSONCPP_STRING& value) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(const StaticString& value) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(const char* beginValue, const char* endValue) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(const char* value) {$/;"	f	class:Json::Value
Value	third-party/jsoncpp/json_value.cpp	/^Value::Value(double value) {$/;"	f	class:Json::Value
ValueConstIterator	third-party/jsoncpp/json/value.h	/^class JSON_API ValueConstIterator : public ValueIteratorBase {$/;"	c	namespace:Json
ValueHolder	third-party/jsoncpp/json/value.h	/^  union ValueHolder {$/;"	u	class:Json::Value
ValueIterator	third-party/jsoncpp/json/value.h	/^class JSON_API ValueIterator : public ValueIteratorBase {$/;"	c	namespace:Json
ValueIteratorBase	third-party/jsoncpp/json/value.h	/^class JSON_API ValueIteratorBase {$/;"	c	namespace:Json
ValueType	third-party/jsoncpp/json/value.h	/^enum ValueType {$/;"	g	namespace:Json
XOR_EXPR	common/definitions.hpp	/^    XOR_EXPR,$/;"	e	enum:UnisonConstraintExprId
ZEROBASED1	presolver.cpp	183;"	d	file:
ZEROBASED2	presolver.cpp	184;"	d	file:
__ACROSS__	presolver/across.hpp	34;"	d
__ALIGNMENTPARTITION_INSPECTOR__	inspectors/alignmentpartitioninspector.hpp	36;"	d
__ALIGNMENT_INSPECTOR__	inspectors/alignmentinspector.hpp	36;"	d
__ALLOCATION_INSPECTOR__	inspectors/allocationinspector.hpp	36;"	d
__ASSIGNMENT_INSPECTOR__	inspectors/assignmentinspector.hpp	36;"	d
__BASE_MODEL__	models/model.hpp	40;"	d
__BEFORE_PRESOLVER__	presolver/before_presolver.hpp	41;"	d
__BOOL_SOLUTION_BRANCHER__	branchers/boolsolutionbrancher.hpp	33;"	d
__BRANCHER_MERIT__	branchers/merit.hpp	36;"	d
__BRANCHER_VALUE__	branchers/value.hpp	36;"	d
__COMMON_PROCEDURES__	procedures/commonprocedures.hpp	39;"	d
__COMPLETE_MODEL__	models/completemodel.hpp	36;"	d
__CONGRUENCEALLOCATION_INSPECTOR__	inspectors/congruenceallocationinspector.hpp	36;"	d
__CONGR__	presolver/congr.hpp	38;"	d
__CONSOLE_INSPECTOR__	inspectors/consoleinspector.hpp	36;"	d
__DATAFLOW_INSPECTOR__	inspectors/dataflowinspector.hpp	36;"	d
__DEBUG_PRINT_H__	presolver/debug_print.hpp	42;"	d
__DECOMP_DIV_MODEL__	models/decompdivmodel.hpp	36;"	d
__DIFF_TEMPS__	presolver/diff_temps.hpp	38;"	d
__DIGRAPH_H__	presolver/digraph.hpp	43;"	d
__DISJOINT_SET_H__	presolver/disjoint_set.hpp	39;"	d
__DIV_MODEL__	models/divmodel.hpp	36;"	d
__DIV_PROCEDURES__	procedures/divprocedures.hpp	36;"	d
__DOT__	inspectors/dot.hpp	36;"	d
__FILTERS_BRANCHER__	branchers/filters.hpp	36;"	d
__GLOBAL_MODEL__	models/globalmodel.hpp	36;"	d
__GLOBAL_PROCEDURES__	procedures/globalprocedures.hpp	36;"	d
__INFEASIBLE_PRESOLVER__	presolver/infeasible_presolver.hpp	39;"	d
__ISSUE_CYCLE_INSPECTOR__	inspectors/issuecycleinspector.hpp	36;"	d
__JSON_UTIL__	common/jsonutil.hpp	36;"	d
__LAST_USE__	presolver/last_use.hpp	38;"	d
__LIVE_DURATION_INSPECTOR__	inspectors/livedurationinspector.hpp	36;"	d
__LIVE_RANGE_INSPECTOR__	inspectors/liverangeinspector.hpp	36;"	d
__LOCAL_DIV_MODEL__	models/localdivmodel.hpp	36;"	d
__LOCAL_DIV_PROCEDURES__	procedures/localdivprocedures.hpp	36;"	d
__LOCAL_MODEL__	models/localmodel.hpp	36;"	d
__LOCAL_PROCEDURES__	procedures/localprocedures.hpp	36;"	d
__MAX_DIV_MODEL__	models/maxdivmodel.hpp	36;"	d
__MODEL_GRAPHICS_VIEW__	inspectors/modelgraphicsview.hpp	36;"	d
__MODEL_INSPECTOR__	inspectors/modelinspector.hpp	36;"	d
__OPERAND_ALLOCATION_INSPECTOR__	inspectors/operandallocationinspector.hpp	36;"	d
__OPERAND_ASSIGNMENT_INSPECTOR__	inspectors/operandassignmentinspector.hpp	36;"	d
__OPERAND_LATENCY_INSPECTOR__	inspectors/operandlatencyinspector.hpp	36;"	d
__PRECEDENCES__	presolver/precedences.hpp	34;"	d
__PRECEDENCE_INSPECTOR__	inspectors/precedenceinspector.hpp	36;"	d
__PRECEDENCE_MATRIX_INSPECTOR__	inspectors/precedencematrixinspector.hpp	36;"	d
__PRESOLVER_ASSERTS__	presolver/presolver_asserts.hpp	42;"	d
__PRESOLVER_AUXILIARY__	presolver/auxiliary.hpp	42;"	d
__PRESOLVER_DOMINANCE__	presolver/dominance.hpp	37;"	d
__PRESOLVER_OPTIONS__	presolver/presolver-options.hpp	36;"	d
__PRESOLVER_PROCEDURES__	procedures/presolverprocedures.hpp	36;"	d
__PRESOLVE__	presolver/presolve.hpp	42;"	d
__PRESSURE_SCHEDULING_BRANCHER__	branchers/pressureschedulingbrancher.hpp	36;"	d
__PRINTER_BRANCHER__	branchers/printers.hpp	36;"	d
__QUASI_ADJACENT__	presolver/quasi_adjacent.hpp	34;"	d
__REGISTER_ARRAY_INSPECTOR__	inspectors/registerarrayinspector.hpp	36;"	d
__RELAXED_MODEL__	models/relaxedmodel.hpp	36;"	d
__RESOURCE_CONSUMPTION_INSPECTOR__	inspectors/resourceconsumptioninspector.hpp	36;"	d
__ROUTING_BRANCHER__	branchers/routingbrancher.hpp	36;"	d
__SELECTION_INSPECTOR__	inspectors/selectioninspector.hpp	36;"	d
__SIMPLE_MODEL__	models/simplemodel.hpp	36;"	d
__SOLUTION_BRANCHER__	branchers/solutionbrancher.hpp	33;"	d
__SOLVER_DEFINITIONS__	common/definitions.hpp	44;"	d
__SOLVER_OPTIONS__	models/options.hpp	39;"	d
__SOLVER_PARAMETERS__	models/parameters.hpp	40;"	d
__SOLVER_RESULT_PARAMETERS__	models/solver-parameters.hpp	36;"	d
__SOLVER_UTIL__	common/util.hpp	37;"	d
__UNSAFE_TEMP__	presolver/unsafe_temp.hpp	38;"	d
__USERS_INSPECTOR__	inspectors/usersinspector.hpp	36;"	d
_acceptable_gap	models/options.hpp	/^  Driver::DoubleOption _acceptable_gap; \/\/ Acceptable optimality gap$/;"	m	class:ModelOptions
_all_solutions	models/options.hpp	/^  Driver::BoolOption _all_solutions; \/\/ Emit solutions as they are found$/;"	m	class:ModelOptions
_complete	models/options.hpp	/^  Driver::BoolOption _complete; \/\/ Run to completeness$/;"	m	class:ModelOptions
_consistency_threshold	models/options.hpp	/^  Driver::UnsignedIntOption _consistency_threshold; \/\/ Operation threshold to switch to bounds consistency$/;"	m	class:ModelOptions
_custom_portfolio	models/options.hpp	/^  Driver::BoolOption _custom_portfolio; \/\/ Run custom portfolio$/;"	m	class:ModelOptions
_debug_print	presolver/debug_print.hpp	/^void _debug_print(T e){$/;"	f
_debug_print	presolver/debug_print.hpp	/^void _debug_print(set<T> v){$/;"	f
_debug_print	presolver/debug_print.hpp	/^void _debug_print(vector<T> v){$/;"	f
_decomposition	models/options.hpp	/^  Driver::BoolOption _decomposition; \/\/ Run decomposition$/;"	m	class:ModelOptions
_disable_across_call_disjoint_temporary_constraints	models/options.hpp	/^  Driver::BoolOption _disable_across_call_disjoint_temporary_constraints; \/\/ Disable across call disjoint temporary constraints$/;"	m	class:ModelOptions
_disable_across_call_disjoint_temporary_set_constraints	models/options.hpp	/^  Driver::BoolOption _disable_across_call_disjoint_temporary_set_constraints; \/\/ Disable across call disjoint temporary set constraints$/;"	m	class:ModelOptions
_disable_additional_conditional_precedence_constraints	models/options.hpp	/^  Driver::BoolOption _disable_additional_conditional_precedence_constraints; \/\/ Disable additional conditional precedence constraints$/;"	m	class:ModelOptions
_disable_additional_nogood_constraints	models/options.hpp	/^  Driver::BoolOption _disable_additional_nogood_constraints; \/\/ Disable additional nogood constraints$/;"	m	class:ModelOptions
_disable_additional_partially_ordered_live_range_constraints	models/options.hpp	/^  Driver::BoolOption _disable_additional_partially_ordered_live_range_constraints; \/\/ Disable additional partially ordered live range constraints$/;"	m	class:ModelOptions
_disable_allowed_activation_constraints	models/options.hpp	/^  Driver::BoolOption _disable_allowed_activation_constraints; \/\/ Disable allowed activation constraints$/;"	m	class:ModelOptions
_disable_basic_conditional_precedence_constraints	models/options.hpp	/^  Driver::BoolOption _disable_basic_conditional_precedence_constraints; \/\/ Disable basic conditional precedence constraints$/;"	m	class:ModelOptions
_disable_basic_nogood_constraints	models/options.hpp	/^  Driver::BoolOption _disable_basic_nogood_constraints; \/\/ Disable basic nogood constraints$/;"	m	class:ModelOptions
_disable_basic_partially_ordered_live_range_constraints	models/options.hpp	/^  Driver::BoolOption _disable_basic_partially_ordered_live_range_constraints; \/\/ Disable basic partially ordered live range constraints$/;"	m	class:ModelOptions
_disable_conditional_precedence_constraints	models/options.hpp	/^  Driver::BoolOption _disable_conditional_precedence_constraints; \/\/ Disable conditional precedence constraints$/;"	m	class:ModelOptions
_disable_copy_activation_and_dataflow_constraints	models/options.hpp	/^  Driver::BoolOption _disable_copy_activation_and_dataflow_constraints; \/\/ Disable copy activation and dataflow constraints$/;"	m	class:ModelOptions
_disable_copy_dominance_constraints	models/options.hpp	/^  Driver::BoolOption _disable_copy_dominance_constraints; \/\/ Disable copy dominance constraints$/;"	m	class:ModelOptions
_disable_global_shaving	models/options.hpp	/^  Driver::BoolOption _disable_global_shaving; \/\/ Disable global shaving techniques$/;"	m	class:ModelOptions
_disable_hints	models/options.hpp	/^  Driver::BoolOption _disable_hints; \/\/ Disable hints in global solver$/;"	m	class:ModelOptions
_disable_improving	models/options.hpp	/^  Driver::BoolOption _disable_improving; \/\/ Disable improved constraints$/;"	m	class:ModelOptions
_disable_infinite_register_dominance_constraints	models/options.hpp	/^  Driver::BoolOption _disable_infinite_register_dominance_constraints; \/\/ Disable infinite register dominance constraints$/;"	m	class:ModelOptions
_disable_local_shaving	models/options.hpp	/^  Driver::BoolOption _disable_local_shaving; \/\/ Disable local shaving techniques$/;"	m	class:ModelOptions
_disable_maximum_temporary_usage_constraints	models/options.hpp	/^  Driver::BoolOption _disable_maximum_temporary_usage_constraints; \/\/ Disable maximum temporary usage constraints$/;"	m	class:ModelOptions
_disable_minimum_number_of_optional_operations_constraints	models/options.hpp	/^  Driver::BoolOption _disable_minimum_number_of_optional_operations_constraints; \/\/ Disable minimum number of optional operations constraints$/;"	m	class:ModelOptions
_disable_nogood_constraints	models/options.hpp	/^  Driver::BoolOption _disable_nogood_constraints; \/\/ Disable nogood constraints$/;"	m	class:ModelOptions
_disable_operand_symmetry_breaking_constraints	models/options.hpp	/^  Driver::BoolOption _disable_operand_symmetry_breaking_constraints; \/\/ Disable operand symmetry breaking constraints$/;"	m	class:ModelOptions
_disable_partially_ordered_live_range_constraints	models/options.hpp	/^  Driver::BoolOption _disable_partially_ordered_live_range_constraints; \/\/ Disable partially ordered live range constraints$/;"	m	class:ModelOptions
_disable_precedence_variables	models/options.hpp	/^  Driver::BoolOption _disable_precedence_variables; \/\/ Disable explicit precedence variables and constraints$/;"	m	class:ModelOptions
_disable_presolver_constraints	models/options.hpp	/^  Driver::BoolOption _disable_presolver_constraints; \/\/ Disable presolver constraints$/;"	m	class:ModelOptions
_disable_presolving	models/options.hpp	/^  Driver::BoolOption _disable_presolving; \/\/ Disable presolving techniques$/;"	m	class:ModelOptions
_disable_register_symmetry_breaking_constraints	models/options.hpp	/^  Driver::BoolOption _disable_register_symmetry_breaking_constraints; \/\/ Disable register symmetry breaking constraints$/;"	m	class:ModelOptions
_disable_relax_a	models/options.hpp	/^  Driver::BoolOption _disable_relax_a; \/\/$/;"	m	class:ModelOptions
_disable_relax_c	models/options.hpp	/^  Driver::BoolOption _disable_relax_c; \/\/$/;"	m	class:ModelOptions
_disable_relax_i	models/options.hpp	/^  Driver::BoolOption _disable_relax_i; \/\/$/;"	m	class:ModelOptions
_disable_relax_r	models/options.hpp	/^  Driver::BoolOption _disable_relax_r; \/\/$/;"	m	class:ModelOptions
_disable_relax_y	models/options.hpp	/^  Driver::BoolOption _disable_relax_y; \/\/$/;"	m	class:ModelOptions
_disable_space_capacity_constraints	models/options.hpp	/^  Driver::BoolOption _disable_space_capacity_constraints; \/\/ Disable space capacity constraints$/;"	m	class:ModelOptions
_disable_temporary_symmetry_breaking_constraints	models/options.hpp	/^  Driver::BoolOption _disable_temporary_symmetry_breaking_constraints; \/\/ Disable temporary symmetry breaking constraints$/;"	m	class:ModelOptions
_disable_wcet_constraints	models/options.hpp	/^  Driver::BoolOption _disable_wcet_constraints; \/\/ Disable wcet constraints$/;"	m	class:ModelOptions
_distance	models/options.hpp	/^  Driver::StringOption _distance; \/\/ distance (hamming, branch)$/;"	m	class:ModelOptions
_div_method	models/options.hpp	/^  Driver::StringOption _div_method; \/\/$/;"	m	class:ModelOptions
_divs_dir	models/options.hpp	/^  Driver::StringValueOption _divs_dir; \/\/ Solver file for best solution (if available)$/;"	m	class:ModelOptions
_dzn_file	models/options.hpp	/^  Driver::StringValueOption _dzn_file; \/\/ Dzn file (ignored)$/;"	m	class:ModelOptions
_dzn_file	presolver/presolver-options.hpp	/^  Driver::StringValueOption _dzn_file; \/\/ .dzn file$/;"	m	class:PresolverOptions
_emit_improvement	models/options.hpp	/^  Driver::BoolOption _emit_improvement; \/\/ Emit estimated improvement$/;"	m	class:ModelOptions
_enable_solver_solution_brancher	models/options.hpp	/^  Driver::BoolOption _enable_solver_solution_brancher; \/\/ Enable a brancher to find the solution first$/;"	m	class:ModelOptions
_final_aggressiveness	models/options.hpp	/^  Driver::DoubleOption _final_aggressiveness; \/\/ Final aggressiveness$/;"	m	class:ModelOptions
_first_solution	models/options.hpp	/^  Driver::BoolOption _first_solution; \/\/ Return the first solution found$/;"	m	class:ModelOptions
_gist_block	models/options.hpp	/^  Driver::IntOption _gist_block; \/\/ Block on which to run Gist$/;"	m	class:ModelOptions
_gist_global	models/options.hpp	/^  Driver::BoolOption _gist_global; \/\/ Run Gist for global problems$/;"	m	class:ModelOptions
_gist_iteration	models/options.hpp	/^  Driver::IntOption _gist_iteration; \/\/ Iteration on which to run Gist$/;"	m	class:ModelOptions
_gist_presolving	models/options.hpp	/^  Driver::BoolOption _gist_presolving; \/\/ Run Gist during presolving$/;"	m	class:ModelOptions
_gist_solution	models/options.hpp	/^  Driver::BoolOption _gist_solution; \/\/ Run Gist for the solution$/;"	m	class:ModelOptions
_global_budget	models/options.hpp	/^  Driver::DoubleOption _global_budget; \/\/ Global budget per operation$/;"	m	class:ModelOptions
_global_connection_iterations	models/options.hpp	/^  Driver::BoolOption _global_connection_iterations; \/\/ Interleave iterations where global connections are tried first$/;"	m	class:ModelOptions
_global_setup_limit	models/options.hpp	/^  Driver::DoubleOption _global_setup_limit; \/\/ Limit for root global propagation$/;"	m	class:ModelOptions
_global_shaving_limit	models/options.hpp	/^  Driver::DoubleOption _global_shaving_limit; \/\/ Global shaving limit$/;"	m	class:ModelOptions
_id	common/definitions.hpp	/^  int _id;$/;"	m	class:Temporand
_initial_aggressiveness	models/options.hpp	/^  Driver::DoubleOption _initial_aggressiveness; \/\/ Initial aggressiveness$/;"	m	class:ModelOptions
_initial_gap_file	models/options.hpp	/^  Driver::StringValueOption _initial_gap_file; \/\/ Initial optimality gap file$/;"	m	class:ModelOptions
_limit_unit	models/options.hpp	/^  Driver::StringValueOption _limit_unit; \/\/ Unit of limits (time, fails)$/;"	m	class:ModelOptions
_local_limit	models/options.hpp	/^  Driver::DoubleOption _local_limit; \/\/ Local limit$/;"	m	class:ModelOptions
_local_portfolio	models/options.hpp	/^  Driver::StringValueOption _local_portfolio; \/\/ Search portfolio for the local problem$/;"	m	class:ModelOptions
_local_relaxation_limit	models/options.hpp	/^  Driver::DoubleOption _local_relaxation_limit; \/\/ Local relaxation limit$/;"	m	class:ModelOptions
_local_shaving_limit	models/options.hpp	/^  Driver::DoubleOption _local_shaving_limit; \/\/ Local shaving limit$/;"	m	class:ModelOptions
_lower_bound_file	models/options.hpp	/^  Driver::StringValueOption _lower_bound_file; \/\/ Lower bound file$/;"	m	class:ModelOptions
_min_dist	models/options.hpp	/^  Driver::UnsignedIntOption _min_dist; \/\/ Solver file for best solution (if available)$/;"	m	class:ModelOptions
_monolithic	models/options.hpp	/^  Driver::BoolOption _monolithic; \/\/ Run monolithic solver$/;"	m	class:ModelOptions
_monolithic_budget	models/options.hpp	/^  Driver::DoubleOption _monolithic_budget; \/\/ Time budget per operation for the monolithic solver$/;"	m	class:ModelOptions
_monolithic_threshold	models/options.hpp	/^  Driver::UnsignedIntOption _monolithic_threshold; \/\/ Operation threshold to give up on running the monolithic solver$/;"	m	class:ModelOptions
_number_divs	models/options.hpp	/^  Driver::IntOption _number_divs; \/\/$/;"	m	class:ModelOptions
_output_file	models/options.hpp	/^  Driver::StringValueOption _output_file; \/\/ Output file$/;"	m	class:ModelOptions
_output_file	presolver/presolver-options.hpp	/^  Driver::StringValueOption _output_file; \/\/ Output file$/;"	m	class:PresolverOptions
_overconstrain	models/options.hpp	/^  Driver::BoolOption _overconstrain; \/\/ Allow to overconstrain model$/;"	m	class:ModelOptions
_portfolio_threads	models/options.hpp	/^  Driver::UnsignedIntOption _portfolio_threads; \/\/ Threads for each portfolio$/;"	m	class:ModelOptions
_post_global_shaving_limit	models/options.hpp	/^  Driver::DoubleOption _post_global_shaving_limit; \/\/ Global shaving limit after global solver$/;"	m	class:ModelOptions
_regions	presolver/presolver-options.hpp	/^  Driver::BoolOption _regions; \/\/ Find regions$/;"	m	class:PresolverOptions
_shaving_threshold	models/options.hpp	/^  Driver::UnsignedIntOption _shaving_threshold; \/\/ Operation threshold to disable shaving$/;"	m	class:ModelOptions
_solve_global_only	models/options.hpp	/^  Driver::BoolOption _solve_global_only; \/\/ Solve only the global problem$/;"	m	class:ModelOptions
_solver_file	models/options.hpp	/^  Driver::StringValueOption _solver_file; \/\/ Solver file for best solution (if available)$/;"	m	class:ModelOptions
_solving_threshold	models/options.hpp	/^  Driver::UnsignedIntOption _solving_threshold; \/\/ Operation threshold to give up on solving$/;"	m	class:ModelOptions
_step_aggressiveness	models/options.hpp	/^  Driver::DoubleOption _step_aggressiveness; \/\/ Aggressiveness step$/;"	m	class:ModelOptions
_tabling	presolver/presolver-options.hpp	/^  Driver::BoolOption _tabling; \/\/ Do tabling$/;"	m	class:PresolverOptions
_test	presolver/presolver-options.hpp	/^  Driver::BoolOption _test; \/\/ Test the generated parameters against the input ones$/;"	m	class:PresolverOptions
_timeout	models/options.hpp	/^  Driver::DoubleOption _timeout; \/\/ Global timeout$/;"	m	class:ModelOptions
_timeout	presolver/presolver-options.hpp	/^  Driver::DoubleOption _timeout; \/\/ Timeout$/;"	m	class:PresolverOptions
_total_threads	models/options.hpp	/^  Driver::UnsignedIntOption _total_threads; \/\/ Total number of threads$/;"	m	class:ModelOptions
_type	common/definitions.hpp	/^  TemporandType _type;$/;"	m	class:Temporand
_use_optimal_for_diversification	models/options.hpp	/^  Driver::BoolOption _use_optimal_for_diversification; \/\/ not implemented$/;"	m	class:ModelOptions
_verbose	models/options.hpp	/^  Driver::BoolOption _verbose; \/\/ Verbose mode$/;"	m	class:ModelOptions
_verbose	presolver/presolver-options.hpp	/^  Driver::BoolOption _verbose; \/\/ Verbose mode$/;"	m	class:PresolverOptions
a	branchers/routingbrancher.cpp	/^  ViewArray<Int::BoolView> a;$/;"	m	class:RoutingBrancher	file:
a	models/model.hpp	/^  BoolVar a(operation o) const { return v_a[instr(o)]; }$/;"	f	class:Model
a	procedures/commonprocedures.hpp	/^  double a;$/;"	m	class:IterationState
ac	procedures/globalprocedures.cpp	/^  activation_class ac;$/;"	m	class:PresolveRelaxationJob	file:
acceptable_gap	models/options.hpp	/^  double acceptable_gap(void) const {return _acceptable_gap.value();}$/;"	f	class:ModelOptions
accman	models/parameters.hpp	/^  vector<int> accman;$/;"	m	class:Parameters
across	models/parameters.hpp	/^  vector<PresolverAcrossJSON> across;$/;"	m	class:Parameters
across_candidates	presolver/across.cpp	/^vector<temporary> across_candidates(PresolverAsserts& PA, const Parameters& input, operation o1, block b) {$/;"	f
across_extra_regs	presolver/across.cpp	/^void across_extra_regs(const Parameters& input, const vector<operand>& P, vector<register_atom>& E) {$/;"	f
across_to_json	presolver/across.cpp	/^void across_to_json(Parameters& input,$/;"	f
action	models/localmodel.cpp	/^double LocalModel::action(int i) const {$/;"	f	class:LocalModel
actionmerit	models/localmodel.cpp	/^double LocalModel::actionmerit(const Space& home, BoolVar, int i) {$/;"	f	class:LocalModel
activation_class	common/definitions.hpp	/^typedef int activation_class;$/;"	t
activation_class_instructions	models/parameters.hpp	/^  vector<set<instruction> > activation_class_instructions;$/;"	m	class:Parameters
activation_class_operations	models/parameters.hpp	/^  vector<set<operation> > activation_class_operations;$/;"	m	class:Parameters
activation_class_representative	models/parameters.hpp	/^  vector<operation> activation_class_representative;$/;"	m	class:Parameters
activators	models/parameters.hpp	/^  vector<vector<instruction> > activators;$/;"	m	class:Parameters
active_class	models/globalmodel.cpp	/^bool GlobalModel::active_class(activation_class ac) {$/;"	f	class:GlobalModel
active_tables	models/parameters.hpp	/^  vector<PresolverActiveTable> active_tables;$/;"	m	class:Parameters
addChildValues_	third-party/jsoncpp/json_writer.cpp	/^  bool addChildValues_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
addComment	third-party/jsoncpp/json_reader.cpp	/^OurReader::addComment(Location begin, Location end, CommentPlacement placement) {$/;"	f	class:Json::OurReader
addComment	third-party/jsoncpp/json_reader.cpp	/^Reader::addComment(Location begin, Location end, CommentPlacement placement) {$/;"	f	class:Json::Reader
addError	third-party/jsoncpp/json_reader.cpp	/^OurReader::addError(const JSONCPP_STRING& message, Token& token, Location extra) {$/;"	f	class:Json::OurReader
addError	third-party/jsoncpp/json_reader.cpp	/^Reader::addError(const JSONCPP_STRING& message, Token& token, Location extra) {$/;"	f	class:Json::Reader
addErrorAndRecover	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::addErrorAndRecover(const JSONCPP_STRING& message,$/;"	f	class:Json::OurReader
addErrorAndRecover	third-party/jsoncpp/json_reader.cpp	/^bool Reader::addErrorAndRecover(const JSONCPP_STRING& message,$/;"	f	class:Json::Reader
addPathInArg	third-party/jsoncpp/json_value.cpp	/^void Path::addPathInArg(const JSONCPP_STRING& \/*path*\/,$/;"	f	class:Json::Path
add_adhoc_constraint_instructions	presolver/infeasible_presolver.cpp	/^static void add_adhoc_constraint_instructions(UnisonConstraintExpr& e, vector<instruction>& A) {$/;"	f	file:
address	third-party/jsoncpp/json/allocator.h	/^		const_pointer address( const_reference x ) const {$/;"	f	class:Json::SecureAllocator
address	third-party/jsoncpp/json/allocator.h	/^		pointer address( reference x ) const {$/;"	f	class:Json::SecureAllocator
adhoc_constraint_var	models/model.cpp	/^BoolVar Model::adhoc_constraint_var(UnisonConstraintExpr & e) {$/;"	f	class:Model
adist	models/parameters.hpp	/^  vector<int> adist;$/;"	m	class:Parameters
adjacency_list	presolver/digraph.hpp	/^  map<vertex, vector<vertex> > adjacency_list;$/;"	m	class:Digraph
adjacent	models/parameters.hpp	/^  vector<vector<operand> > adjacent;$/;"	m	class:Parameters
af	models/globalmodel.hpp	/^  double af;$/;"	m	class:GlobalModel
af	models/relaxedmodel.hpp	/^  double af;$/;"	m	class:RelaxedModel
aggressive	branchers/routingbrancher.cpp	/^  bool aggressive;$/;"	m	class:RoutingBrancher	file:
al	models/model.hpp	/^  BoolVar al(register_space rs, temporary t) const {$/;"	f	class:Model
ali	models/globalmodel.hpp	/^  SetVar ali(global_congruence g) const { return v_ali[g]; }$/;"	f	class:GlobalModel
alignable	common/definitions.hpp	/^typedef int alignable;$/;"	t
aligned	models/parameters.hpp	/^  vector<vector<int> > aligned;$/;"	m	class:Parameters
all	third-party/jsoncpp/json_reader.cpp	/^Features Features::all() { return Features(); }$/;"	f	class:Json::Features
all	third-party/jsoncpp/json_reader.cpp	/^OurFeatures OurFeatures::all() { return OurFeatures(); }$/;"	f	class:Json::OurFeatures
all_assigned	common/util.cpp	/^bool all_assigned(const IntVarArgs& x) {$/;"	f
all_solutions	models/options.hpp	/^  bool all_solutions(void) const {return _all_solutions.value();}$/;"	f	class:ModelOptions
alldiffs_for_co_use	presolver/infeasible_presolver.cpp	/^InfeasiblePresolver::alldiffs_for_co_use(const temporand_set& D_u,$/;"	f	class:InfeasiblePresolver
allocatable	branchers/filters.cpp	/^bool allocatable(const Space& s, SetVar pals, global_congruence g) {$/;"	f
allocate	third-party/jsoncpp/json/allocator.h	/^		pointer allocate(size_type n) {$/;"	f	class:Json::SecureAllocator
allocation_benefit	models/globalmodel.cpp	/^allocation_benefit(global_congruence g, RangeListIter & A) const {$/;"	f	class:GlobalModel
allocation_cost	models/globalmodel.cpp	/^allocation_cost(global_congruence g, RangeListIter & A) const {$/;"	f	class:GlobalModel
allowComments_	third-party/jsoncpp/json/features.h	/^  bool allowComments_;$/;"	m	class:Json::Features
allowComments_	third-party/jsoncpp/json_reader.cpp	/^  bool allowComments_;$/;"	m	class:Json::OurFeatures	file:
allowDroppedNullPlaceholders_	third-party/jsoncpp/json/features.h	/^  bool allowDroppedNullPlaceholders_;$/;"	m	class:Json::Features
allowDroppedNullPlaceholders_	third-party/jsoncpp/json_reader.cpp	/^  bool allowDroppedNullPlaceholders_;$/;"	m	class:Json::OurFeatures	file:
allowNumericKeys_	third-party/jsoncpp/json/features.h	/^  bool allowNumericKeys_;$/;"	m	class:Json::Features
allowNumericKeys_	third-party/jsoncpp/json_reader.cpp	/^  bool allowNumericKeys_;$/;"	m	class:Json::OurFeatures	file:
allowSingleQuotes_	third-party/jsoncpp/json_reader.cpp	/^  bool allowSingleQuotes_;$/;"	m	class:Json::OurFeatures	file:
allowSpecialFloats_	third-party/jsoncpp/json_reader.cpp	/^  bool allowSpecialFloats_;$/;"	m	class:Json::OurFeatures	file:
already_tabled	presolver/dominance.cpp	/^bool already_tabled(const vector<operand>& ps, map<operand, int>& P2Table) {$/;"	f
alt_across_call	presolver/across.cpp	/^void alt_across_call(PresolverAsserts& PA,$/;"	f
alt_across_to_json	presolver/across.cpp	/^void alt_across_to_json(Parameters& input,$/;"	f
analyzable	presolver/precedences.cpp	/^bool analyzable(UnisonConstraintExpr& nogood) {$/;"	f
append	third-party/jsoncpp/json_value.cpp	/^  Value& Value::append(Value&& value) { return (*this)[size()] = value; }$/;"	f	class:Json::Value
append	third-party/jsoncpp/json_value.cpp	/^Value& Value::append(const Value& value) { return (*this)[size()] = value; }$/;"	f	class:Json::Value
apply_div_solution	models/decompdivmodel.cpp	/^void DecompDivModel::apply_div_solution(DivModel * d) {$/;"	f	class:DecompDivModel
apply_solution	models/globalmodel.cpp	/^void GlobalModel::apply_solution(LocalModel * ls) {$/;"	f	class:GlobalModel
apply_solution	models/localmodel.cpp	/^void LocalModel::apply_solution(const GlobalModel * gs) {$/;"	f	class:LocalModel
apply_solution_and_deactivate	models/globalmodel.cpp	/^apply_solution_and_deactivate(GlobalModel * gs,$/;"	f	class:GlobalModel
archive	branchers/boolsolutionbrancher.cpp	/^    virtual void archive(Archive& e) const {$/;"	f	class:BoolSolutionBrancher::Description
archive	branchers/solutionbrancher.cpp	/^    virtual void archive(Archive& e) const {$/;"	f	class:SolutionBrancher::Description
archive	common/util.hpp	/^  virtual void archive(Archive& e) const {$/;"	f	class:DoubleChoice
archive	common/util.hpp	/^  virtual void archive(Archive& e) const {$/;"	f	class:SingleChoice
arg1	presolver.cpp	/^  int arg1, arg2, arg3;$/;"	m	class:Quad	file:
arg2	presolver.cpp	/^  int arg1, arg2, arg3;$/;"	m	class:Quad	file:
arg3	presolver.cpp	/^  int arg1, arg2, arg3;$/;"	m	class:Quad	file:
args_	third-party/jsoncpp/json/value.h	/^  Args args_;$/;"	m	class:Json::Path
arrayValue	third-party/jsoncpp/json/value.h	/^  arrayValue,    \/\/\/< array value (ordered list)$/;"	e	enum:Json::ValueType
arrow	inspectors/dot.hpp	/^  QPainterPath arrow;$/;"	m	class:DotEdge
as	common/definitions.hpp	/^  vector<PresolverAcrossItem> as;$/;"	m	class:PresolverAcross
as	common/definitions.hpp	/^  vector<PresolverAcrossItemJSON> as;$/;"	m	class:PresolverAcrossJSON
asBool	third-party/jsoncpp/json_value.cpp	/^bool Value::asBool() const {$/;"	f	class:Json::Value
asCString	third-party/jsoncpp/json_value.cpp	/^const char* Value::asCString() const {$/;"	f	class:Json::Value
asConstString	third-party/jsoncpp/json_value.cpp	/^CppTL::ConstString Value::asConstString() const {$/;"	f	class:Json::Value
asDouble	third-party/jsoncpp/json_value.cpp	/^double Value::asDouble() const {$/;"	f	class:Json::Value
asFloat	third-party/jsoncpp/json_value.cpp	/^float Value::asFloat() const {$/;"	f	class:Json::Value
asInt	third-party/jsoncpp/json_value.cpp	/^Value::Int Value::asInt() const {$/;"	f	class:Json::Value
asInt64	third-party/jsoncpp/json_value.cpp	/^Value::Int64 Value::asInt64() const {$/;"	f	class:Json::Value
asLargestInt	third-party/jsoncpp/json_value.cpp	/^LargestInt Value::asLargestInt() const {$/;"	f	class:Json::Value
asLargestUInt	third-party/jsoncpp/json_value.cpp	/^LargestUInt Value::asLargestUInt() const {$/;"	f	class:Json::Value
asString	third-party/jsoncpp/json_value.cpp	/^JSONCPP_STRING Value::asString() const {$/;"	f	class:Json::Value
asUInt	third-party/jsoncpp/json_value.cpp	/^Value::UInt Value::asUInt() const {$/;"	f	class:Json::Value
asUInt64	third-party/jsoncpp/json_value.cpp	/^Value::UInt64 Value::asUInt64() const {$/;"	f	class:Json::Value
assert_active_tables	presolver/dominance.cpp	/^void assert_active_tables(Parameters & input,$/;"	f
assert_bounded	models/model.hpp	/^  void assert_bounded(IntVar & v) {$/;"	f	class:Model
assert_tmp_tables	presolver/dominance.cpp	/^void assert_tmp_tables(Parameters & input,$/;"	f
assign_instruction	models/model.cpp	/^void Model::assign_instruction(operation o, int ii) {$/;"	f	class:Model
assignable	branchers/filters.cpp	/^bool assignable(const Space& s, IntVar, int ti) {$/;"	f
assignhints	models/parameters.hpp	/^  vector<vector<int> > assignhints;$/;"	m	class:Parameters
at_least_one_table	presolver.cpp	/^bool at_least_one_table(vector<vector<int>> tuples) {$/;"	f
at_map	procedures/presolverprocedures.hpp	/^typedef map<vector<int>, set<vector<int> > > at_map;$/;"	t
atom_set	models/parameters.hpp	/^  vector<IntSet> atom_set;$/;"	m	class:Parameters
atomname	models/parameters.hpp	/^  vector<string> atomname;$/;"	m	class:Parameters
atoms	models/parameters.hpp	/^  vector<vector<register_atom> > atoms;$/;"	m	class:Parameters
avoidhints	models/parameters.hpp	/^  vector<AvoidHint> avoidhints;$/;"	m	class:Parameters
b	diversifier.cpp	/^  int b;$/;"	m	class:LocalJob	file:
b	models/localmodel.hpp	/^  block b;$/;"	m	class:LocalModel
b	procedures/globalprocedures.cpp	/^  block b;$/;"	m	class:PresolveRelaxationJob	file:
b	procedures/globalprocedures.cpp	/^  block b;$/;"	m	class:PresolveShavingJob	file:
b	procedures/globalprocedures.cpp	/^  block b;$/;"	m	class:RelaxationResult	file:
b	procedures/globalprocedures.cpp	/^  block b;$/;"	m	class:ShavingResults	file:
b	procedures/localdivprocedures.hpp	/^  block b;$/;"	m	class:LocalSolution
bacross	models/parameters.hpp	/^  vector<vector<PresolverAcrossJSON> > bacross;$/;"	m	class:Parameters
bactive_tables	models/parameters.hpp	/^  vector<vector<PresolverActiveTable>> bactive_tables;$/;"	m	class:Parameters
badist	models/parameters.hpp	/^  vector<vector<int> > badist;$/;"	m	class:Parameters
baligned	models/parameters.hpp	/^  vector<vector<vector<int> > > baligned;$/;"	m	class:Parameters
base	procedures/globalprocedures.cpp	/^  const GlobalModel & base;$/;"	m	class:PresolveRelaxationJobs	file:
base	procedures/globalprocedures.cpp	/^  const GlobalModel & base;$/;"	m	class:PresolveShavingJob	file:
base	procedures/globalprocedures.cpp	/^  const GlobalModel & base;$/;"	m	class:PresolveShavingJobs	file:
bbefore	models/parameters.hpp	/^  vector<vector<PresolverBeforeJSON>> bbefore;$/;"	m	class:Parameters
bbefore2	models/parameters.hpp	/^  vector<vector<PresolverBeforeJSON>> bbefore2;$/;"	m	class:Parameters
bcongr	models/parameters.hpp	/^  vector<vector<vector<operand> > > bcongr;$/;"	m	class:Parameters
bdiffregs	models/parameters.hpp	/^  vector<vector<vector<operand> > > bdiffregs;$/;"	m	class:Parameters
bdifftemps	models/parameters.hpp	/^  vector<vector<vector<operand> > > bdifftemps;$/;"	m	class:Parameters
bdominates	models/parameters.hpp	/^  vector<vector<PresolverDominates>> bdominates;$/;"	m	class:Parameters
bdomops	models/parameters.hpp	/^  vector<vector<vector<vector<int> > > > bdomops;$/;"	m	class:Parameters
bdomuses	models/parameters.hpp	/^  vector<vector<vector<operand> > > bdomuses;$/;"	m	class:Parameters
before	models/parameters.hpp	/^  vector<PresolverBeforeJSON> before;$/;"	m	class:Parameters
before1	presolver/before_presolver.cpp	/^void BeforePresolver::before1(operand p, operand q, vector<PresolverBefore>& B) {$/;"	f	class:BeforePresolver
before2	models/parameters.hpp	/^  vector<PresolverBeforeJSON> before2;$/;"	m	class:Parameters
before_in_nogoods	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::before_in_nogoods(vector<presolver_conj>& Nogoods) {$/;"	f	class:InfeasiblePresolver
before_rule	presolver/precedences.cpp	/^static void before_rule(const Parameters& input,$/;"	f	file:
before_vs_nogoods	presolver/before_presolver.cpp	/^void BeforePresolver::before_vs_nogoods(beforeset& T, vector<presolver_conj>& Nogoods) {$/;"	f	class:BeforePresolver
beforeset	presolver/before_presolver.hpp	/^typedef vector<PresolverBefore> beforeset;$/;"	t
begin	common/util.hpp	/^  typename::map<T, T>::iterator begin() { return rep.begin(); }$/;"	f	class:disjointSet
begin	third-party/jsoncpp/json_value.cpp	/^Value::const_iterator Value::begin() const {$/;"	f	class:Json::Value
begin	third-party/jsoncpp/json_value.cpp	/^Value::iterator Value::begin() {$/;"	f	class:Json::Value
begin_	third-party/jsoncpp/json_reader.cpp	/^  Location begin_;$/;"	m	class:Json::OurReader	file:
bfu	models/parameters.hpp	/^  vector<unsigned int> bfu;$/;"	m	class:Parameters
binterchangeable	models/parameters.hpp	/^  vector<vector<vector<operation> > > binterchangeable;$/;"	m	class:Parameters
block	common/definitions.hpp	/^typedef int block;$/;"	t
block_containing	presolver/auxiliary.cpp	/^block block_containing(const Parameters& input, const vector<operand>& P) {$/;"	f
blocks	diversifier.cpp	/^  vector<block> blocks;$/;"	m	class:LocalJobs	file:
blocks	solver.cpp	/^  vector<block> blocks;$/;"	m	class:LocalJobs	file:
bnogoods	models/parameters.hpp	/^  vector<vector<UnisonConstraintExpr> > bnogoods;$/;"	m	class:Parameters
bnogoods2	models/parameters.hpp	/^  vector<vector<UnisonConstraintExpr> > bnogoods2;$/;"	m	class:Parameters
bnu	models/parameters.hpp	/^  vector<unsigned int> bnu;$/;"	m	class:Parameters
bool_	third-party/jsoncpp/json/value.h	/^    bool bool_;$/;"	m	union:Json::Value::ValueHolder
bool_var_array	models/model.cpp	/^BoolVarArray Model::bool_var_array(int n, int min, int max) {$/;"	f	class:Model
booleanValue	third-party/jsoncpp/json/value.h	/^  booleanValue,  \/\/\/< bool value$/;"	e	enum:Json::ValueType
bounded	models/parameters.hpp	/^  vector<bool> bounded;$/;"	m	class:Parameters
box	inspectors/dot.cpp	/^QRectF Dot::box() const {$/;"	f	class:Dot
bpacked	models/parameters.hpp	/^  vector<vector<vector<operand> > > bpacked;$/;"	m	class:Parameters
bprecedences	models/parameters.hpp	/^  vector<vector<UnisonConstraintExpr>> bprecedences;$/;"	m	class:Parameters
bprecedences2	models/parameters.hpp	/^  vector<vector<UnisonConstraintExpr>> bprecedences2;$/;"	m	class:Parameters
bprecs	models/parameters.hpp	/^  vector<vector<vector<operation> > > bprecs;$/;"	m	class:Parameters
branch_on_pressure_scheduling	branchers/pressureschedulingbrancher.cpp	/^void branch_on_pressure_scheduling(Home home, const IntVarArgs& c0) {$/;"	f
branch_on_routing	branchers/routingbrancher.cpp	/^void branch_on_routing(Home home, const BoolVarArgs& a0, const IntVarArgs& i0,$/;"	f
branch_operations	models/divmodel.hpp	/^  vector<operation> branch_operations;$/;"	m	class:DivModel
break_cycle	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::break_cycle(const vector<operation>& scc,$/;"	f	class:InfeasiblePresolver
bron_kerbosch2	presolver/digraph.cpp	/^void Digraph::bron_kerbosch2(vector<vertex>& R,$/;"	f	class:Digraph
brtype	common/definitions.hpp	/^typedef enum brtype$/;"	g
bset_across	models/parameters.hpp	/^  vector<vector<PresolverSetAcross> > bset_across;$/;"	m	class:Parameters
btmp_tables	models/parameters.hpp	/^  vector<vector<PresolverCopyTmpTable>> btmp_tables;$/;"	m	class:Parameters
build_oI	presolver/precedences.cpp	/^multimap<operation, instruction> build_oI (const presolver_disj& Y) {$/;"	f
bwcet	models/parameters.hpp	/^  vector<vector<PresolverWCET> > bwcet;$/;"	m	class:Parameters
bypass	models/parameters.hpp	/^  vector<vector<vector<bool> > > bypass;$/;"	m	class:Parameters
c	branchers/pressureschedulingbrancher.cpp	/^  ViewArray<Int::IntView> c;$/;"	m	class:PressureSchedulingBrancher	file:
c	common/util.hpp	/^  IntVar c;$/;"	m	class:UsageTask
c	models/model.hpp	/^  IntVar c(operation o) const { return v_c[instr(o)]; }$/;"	f	class:Model
c_activity	models/localmodel.hpp	/^  IntAction c_activity;$/;"	m	class:LocalModel
c_str	third-party/jsoncpp/json/value.h	/^  const char* c_str() const { return c_str_; }$/;"	f	class:Json::StaticString
c_str_	third-party/jsoncpp/json/value.h	/^  const char* c_str_;$/;"	m	class:Json::StaticString
callee_saved_loads	models/parameters.hpp	/^  vector<operation> callee_saved_loads;$/;"	m	class:Parameters
callee_saved_stores	models/parameters.hpp	/^  vector<operation> callee_saved_stores;$/;"	m	class:Parameters
callee_saved_temps	presolver/congr.cpp	/^vector<temporary> callee_saved_temps(const Parameters& input) {$/;"	f
calleesaved	models/parameters.hpp	/^  vector<register_atom> calleesaved;$/;"	m	class:Parameters
calleesaved_spill	models/parameters.hpp	/^  vector<vector<operation> > calleesaved_spill;$/;"	m	class:Parameters
callersaved	models/parameters.hpp	/^  vector<register_atom> callersaved;$/;"	m	class:Parameters
candidate_spaces	models/parameters.hpp	/^  vector<set<register_space> > candidate_spaces;$/;"	m	class:Parameters
cap	models/parameters.hpp	/^  vector<int> cap;$/;"	m	class:Parameters
capFactor	inspectors/resourceconsumptioninspector.cpp	/^int ResourceConsumptionInspector::capFactor(const Model& m, block b) {$/;"	f	class:ResourceConsumptionInspector
cartesian_product	presolver/infeasible_presolver.cpp	/^InfeasiblePresolver::cartesian_product(const vector<temporand_set >& V) {$/;"	f	class:InfeasiblePresolver
cf	models/globalmodel.hpp	/^  bool cf;$/;"	m	class:GlobalModel
cf	procedures/commonprocedures.hpp	/^  bool cf;$/;"	m	class:IterationState
cfg	models/parameters.hpp	/^  vector<vector<block> > cfg;$/;"	m	class:Parameters
childValues_	third-party/jsoncpp/json_writer.cpp	/^  ChildValues childValues_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
children	common/definitions.hpp	/^  vector<UnisonConstraintExpr> children;$/;"	m	class:UnisonConstraintExpr
children	presolver.cpp	/^  vector<int> children;$/;"	m	class:Quad	file:
choice	branchers/boolsolutionbrancher.cpp	/^  virtual const Choice* choice(Space&) {$/;"	f	class:BoolSolutionBrancher
choice	branchers/boolsolutionbrancher.cpp	/^  virtual const Choice* choice(const Space&, Archive& e) {$/;"	f	class:BoolSolutionBrancher
choice	branchers/pressureschedulingbrancher.cpp	/^  virtual Choice* choice(Space& home) {$/;"	f	class:PressureSchedulingBrancher
choice	branchers/pressureschedulingbrancher.cpp	/^  virtual Choice* choice(const Space&, Archive& e) {$/;"	f	class:PressureSchedulingBrancher
choice	branchers/routingbrancher.cpp	/^  virtual Choice* choice(Space&) {$/;"	f	class:RoutingBrancher
choice	branchers/routingbrancher.cpp	/^  virtual Choice* choice(const Space&, Archive& e) {$/;"	f	class:RoutingBrancher
choice	branchers/solutionbrancher.cpp	/^  virtual const Choice* choice(Space&) {$/;"	f	class:SolutionBrancher
choice	branchers/solutionbrancher.cpp	/^  virtual const Choice* choice(const Space&, Archive& e) {$/;"	f	class:SolutionBrancher
chunk_is_alldiff	presolver/infeasible_presolver.cpp	/^bool InfeasiblePresolver::chunk_is_alldiff(const temporand_set& C) {$/;"	f	class:InfeasiblePresolver
class1	common/definitions.hpp	/^  vector<register_class> class1;$/;"	m	class:PresolverInsn2Class2
class2	common/definitions.hpp	/^  vector<register_class> class2;$/;"	m	class:PresolverInsn2Class2
classes	common/util.hpp	/^  set<set<T> > classes() {$/;"	f	class:disjointSet
classname	models/parameters.hpp	/^  vector<string> classname;$/;"	m	class:Parameters
clear	third-party/jsoncpp/json_value.cpp	/^void Value::clear() {$/;"	f	class:Json::Value
closest_to_zero	branchers/value.cpp	/^int closest_to_zero(const Space&, IntVar x, unsigned int) {$/;"	f
closure	presolver/digraph.cpp	/^Digraph Digraph::closure() {$/;"	f	class:Digraph
cluster_allocation_cost	models/globalmodel.cpp	/^cluster_allocation_cost(global_cluster gc, RangeListIter & A) const {$/;"	f	class:GlobalModel
cluster_energy	branchers/merit.cpp	/^  double cluster_energy(const Space& s, BoolVar, global_cluster gc) {$/;"	f	namespace:Merit
cluster_energy	models/globalmodel.cpp	/^double GlobalModel::cluster_energy(global_cluster gc) const {$/;"	f	class:GlobalModel
cluster_remat_cost	models/globalmodel.cpp	/^cluster_remat_cost(global_cluster gc, RangeListIter & A) const {$/;"	f	class:GlobalModel
clusters	models/parameters.hpp	/^  vector<vector<operand> > clusters;$/;"	m	class:Parameters
co	procedures/globalprocedures.cpp	/^  operation co;$/;"	m	class:PresolveRelaxationJob	file:
co	procedures/globalprocedures.cpp	/^  operation co;$/;"	m	class:RelaxationResult	file:
coalescing_chances	models/globalmodel.cpp	/^double GlobalModel::coalescing_chances(operand p, RangeListIter & A) const {$/;"	f	class:GlobalModel
codePointToUTF8	third-party/jsoncpp/json_tool.h	/^static inline JSONCPP_STRING codePointToUTF8(unsigned int cp) {$/;"	f	namespace:Json
collectComments_	third-party/jsoncpp/json_reader.cpp	/^  bool collectComments_;$/;"	m	class:Json::OurReader	file:
collectComments_	third-party/jsoncpp/json_reader.cpp	/^  bool const collectComments_;$/;"	m	class:Json::OurCharReader	file:
collect_after_call	presolver/across.cpp	/^void collect_after_call(PresolverAsserts& PA, const Parameters& input, operation o1, block b, map<temporary,presolver_disj>& After) {$/;"	f
collect_at_call	presolver/across.cpp	/^void collect_at_call(const Parameters& input, operation o, vector<operand>& P, vector<temporary>& T) {$/;"	f
collect_before_call	presolver/across.cpp	/^void collect_before_call(PresolverAsserts& PA, const Parameters& input, operation o1, block b, map<temporary,presolver_disj>& Before) {$/;"	f
colonSymbol_	third-party/jsoncpp/json_writer.cpp	/^  JSONCPP_STRING colonSymbol_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
commentAfter	third-party/jsoncpp/json/value.h	/^  commentAfter, \/\/\/< a comment on the line after a value (only make sense for$/;"	e	enum:Json::CommentPlacement
commentAfterOnSameLine	third-party/jsoncpp/json/value.h	/^  commentAfterOnSameLine, \/\/\/< a comment just after a value on the same line$/;"	e	enum:Json::CommentPlacement
commentBefore	third-party/jsoncpp/json/value.h	/^  commentBefore = 0,      \/\/\/< a comment placed on the line before a value$/;"	e	enum:Json::CommentPlacement
comment_	third-party/jsoncpp/json/value.h	/^    char* comment_;$/;"	m	struct:Json::Value::CommentInfo
commentsBefore_	third-party/jsoncpp/json_reader.cpp	/^  JSONCPP_STRING commentsBefore_;$/;"	m	class:Json::OurReader	file:
comments_	third-party/jsoncpp/json/value.h	/^  CommentInfo* comments_;$/;"	m	class:Json::Value
commit	branchers/boolsolutionbrancher.cpp	/^  virtual ExecStatus commit(Space& home,$/;"	f	class:BoolSolutionBrancher
commit	branchers/pressureschedulingbrancher.cpp	/^  virtual ExecStatus commit(Space& home,$/;"	f	class:PressureSchedulingBrancher
commit	branchers/routingbrancher.cpp	/^  virtual ExecStatus commit(Space& home,$/;"	f	class:RoutingBrancher
commit	branchers/solutionbrancher.cpp	/^  virtual ExecStatus commit(Space& home,$/;"	f	class:SolutionBrancher
compare	models/globalmodel.cpp	/^void GlobalModel::compare(const Space& sp, std::ostream& pOs) const {$/;"	f	class:GlobalModel
compare	models/model.cpp	/^void Model::compare(const Space& sp, std::ostream& pOs) const {$/;"	f	class:Model
compare	models/model.hpp	/^  string compare(const string& var, const string& ent,$/;"	f	class:Model
compare	third-party/jsoncpp/json_value.cpp	/^int Value::compare(const Value& other) const {$/;"	f	class:Json::Value
complete	models/options.hpp	/^  bool complete(void) const {return _complete.value();}$/;"	f	class:ModelOptions
compression_1	presolver/dominance.cpp	/^bool compression_1(const vector<vector<int>>& S) {$/;"	f
compression_2	presolver/dominance.cpp	/^int compression_2(const vector<vector<int>>& S, const vector<int>& O) {$/;"	f
compression_3	presolver/dominance.cpp	/^bool compression_3(const vector<vector<int>>& S) {$/;"	f
computeWCET	presolver/precedences.cpp	/^void computeWCET(Parameters &input) {$/;"	f
compute_derived	models/parameters.cpp	/^void Parameters::compute_derived() {$/;"	f	class:Parameters
con	common/util.hpp	/^  int con;$/;"	m	class:UsageTask
con	models/parameters.hpp	/^  vector<vector<int> > con;$/;"	m	class:Parameters
concat	common/util.hpp	/^vector<T> concat(vector<T> v1, vector<T> v2) {$/;"	f
cond_before_filter	presolver/across.cpp	/^map<temporary,presolver_disj> cond_before_filter(const Parameters& input,$/;"	f
cond_before_items	presolver/across.cpp	/^void cond_before_items(PresolverAsserts& PA,$/;"	f
cond_caller_saved	presolver/across.cpp	/^pair<bool,presolver_conj> cond_caller_saved(const Parameters& input,$/;"	f
congr	models/parameters.hpp	/^  vector<vector<operand> > congr;$/;"	m	class:Parameters
congr_map	presolver/before_presolver.hpp	/^  vector<vector<operand> > congr_map;$/;"	m	class:BeforePresolver
congr_map	presolver/infeasible_presolver.hpp	/^  vector<vector<operand> > congr_map;$/;"	m	class:InfeasiblePresolver
congruence	common/definitions.hpp	/^typedef int congruence;$/;"	t
congruence_color	inspectors/modelinspector.cpp	/^QColor ModelInspector::congruence_color(operand p) {$/;"	f	class:ModelInspector
congruent	models/parameters.hpp	/^  set<operand> congruent;$/;"	m	class:Parameters
conj_to_expr	presolver/auxiliary.cpp	/^UnisonConstraintExpr conj_to_expr(const presolver_conj& conjuncts) {$/;"	f
connection_benefit	models/globalmodel.cpp	/^double GlobalModel::connection_benefit(global_cluster gc, bool connect) const {$/;"	f	class:GlobalModel
consistency_threshold	models/options.hpp	/^  unsigned int consistency_threshold(void) const {return _consistency_threshold.value();}$/;"	f	class:ModelOptions
const_iterator	third-party/jsoncpp/json/value.h	/^  typedef ValueConstIterator const_iterator;$/;"	t	class:Json::Value
constrain	models/decompdivmodel.cpp	/^void DecompDivModel::constrain(const Space & _b) {$/;"	f	class:DecompDivModel
constrain	models/divmodel.cpp	/^void DivModel::constrain(const Space & _b) {$/;"	f	class:DivModel
constrain	models/localdivmodel.cpp	/^void LocalDivModel::constrain(const Space & _b) {$/;"	f	class:LocalDivModel
constrain	models/maxdivmodel.cpp	/^void MaxDivModel::constrain(const Space & _b) {$/;"	f	class:MaxDivModel
constrain_cost	models/localmodel.cpp	/^void LocalModel::constrain_cost(IntRelType irt, int cost) {$/;"	f	class:LocalModel
constrain_levenshtein	models/maxdivmodel.cpp	/^void MaxDivModel::constrain_levenshtein(const MaxDivModel & b)$/;"	f	class:MaxDivModel
constrain_levenshtein_set	models/maxdivmodel.cpp	/^void MaxDivModel::constrain_levenshtein_set(const MaxDivModel & b)$/;"	f	class:MaxDivModel
constrain_local_cost	models/globalmodel.cpp	/^void GlobalModel::constrain_local_cost(block b, IntRelType irt, int cost) {$/;"	f	class:GlobalModel
constrain_total_cost	models/localdivmodel.cpp	/^void LocalDivModel::constrain_total_cost(int cost) {$/;"	f	class:LocalDivModel
constraint	models/model.hpp	/^  void constraint(const BoolExpr &e) {rel(*this, e, ipl);}$/;"	f	class:Model
construct	third-party/jsoncpp/json/allocator.h	/^		void construct(pointer p, Args&&... args) {$/;"	f	class:Json::SecureAllocator
consumption_domain	models/model.cpp	/^IntArgs Model::consumption_domain(resource r, vector<operation> & is) const {$/;"	f	class:Model
contains	common/util.hpp	/^bool contains(const C& c, T e) {$/;"	f
contains	presolver/disjoint_set.hpp	/^  bool contains(const T& x) {$/;"	f	class:Disjoint_set
containsControlCharacter	third-party/jsoncpp/json_writer.cpp	/^static bool containsControlCharacter(const char* str) {$/;"	f	namespace:Json
containsControlCharacter0	third-party/jsoncpp/json_writer.cpp	/^static bool containsControlCharacter0(const char* str, unsigned len) {$/;"	f	namespace:Json
containsNewLine	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::containsNewLine(OurReader::Location begin, OurReader::Location end) {$/;"	f	class:Json::OurReader
containsNewLine	third-party/jsoncpp/json_reader.cpp	/^bool Reader::containsNewLine(Reader::Location begin, Reader::Location end) {$/;"	f	class:Json::Reader
context	inspectors/dot.hpp	/^  GVC_t * context;$/;"	m	class:Dot
copies	models/parameters.hpp	/^  vector<vector<operation> > copies;$/;"	m	class:Parameters
copy	branchers/boolsolutionbrancher.cpp	/^  virtual Actor* copy(Space& home) {$/;"	f	class:BoolSolutionBrancher
copy	branchers/pressureschedulingbrancher.cpp	/^  virtual Brancher* copy(Space& home) {$/;"	f	class:PressureSchedulingBrancher
copy	branchers/routingbrancher.cpp	/^  virtual Brancher* copy(Space& home) {$/;"	f	class:RoutingBrancher
copy	branchers/solutionbrancher.cpp	/^  virtual Actor* copy(Space& home) {$/;"	f	class:SolutionBrancher
copy	models/completemodel.cpp	/^CompleteModel* CompleteModel::copy(void) {$/;"	f	class:CompleteModel
copy	models/decompdivmodel.cpp	/^DecompDivModel* DecompDivModel::copy(void) {$/;"	f	class:DecompDivModel
copy	models/divmodel.cpp	/^DivModel* DivModel::copy(void) {$/;"	f	class:DivModel
copy	models/globalmodel.cpp	/^GlobalModel* GlobalModel::copy(void) {$/;"	f	class:GlobalModel
copy	models/localdivmodel.cpp	/^LocalDivModel* LocalDivModel::copy(void) {$/;"	f	class:LocalDivModel
copy	models/localmodel.cpp	/^LocalModel* LocalModel::copy(void) {$/;"	f	class:LocalModel
copy	models/maxdivmodel.cpp	/^MaxDivModel* MaxDivModel::copy(void) {$/;"	f	class:MaxDivModel
copy	models/relaxedmodel.cpp	/^RelaxedModel* RelaxedModel::copy(void) {$/;"	f	class:RelaxedModel
copy	models/simplemodel.cpp	/^SimpleModel* SimpleModel::copy(void) {$/;"	f	class:SimpleModel
copy	third-party/jsoncpp/json_value.cpp	/^void Value::copy(const Value& other) {$/;"	f	class:Json::Value
copyPayload	third-party/jsoncpp/json_value.cpp	/^void Value::copyPayload(const Value& other) {$/;"	f	class:Json::Value
copy_domain	common/util.cpp	/^void copy_domain(Home h, BoolVar s, BoolVar d) {$/;"	f
copy_domain	common/util.cpp	/^void copy_domain(Home h, IntVar s, IntVar d) {$/;"	f
copy_rel_operands	presolver/before_presolver.hpp	/^  vector<vector<operand> > copy_rel_operands;$/;"	m	class:BeforePresolver
copy_rel_temps	presolver/infeasible_presolver.hpp	/^  map<temporary, vector<temporary> > copy_rel_temps;$/;"	m	class:InfeasiblePresolver
copyrel	models/parameters.hpp	/^  vector<vector<operand> > copyrel;$/;"	m	class:Parameters
copyreltop	models/parameters.hpp	/^  vector<operand> copyreltop;$/;"	m	class:Parameters
cost	models/completemodel.cpp	/^IntVarArgs CompleteModel::cost() const {$/;"	f	class:CompleteModel
cost	models/localmodel.cpp	/^IntVarArgs LocalModel::cost() const {$/;"	f	class:LocalModel
cost	models/relaxedmodel.hpp	/^  IntVarArgs cost() const { GECODE_NEVER; return v_i; };$/;"	f	class:RelaxedModel
cost	models/solver-parameters.hpp	/^  vector<int> cost;$/;"	m	class:SolverParameters
cost_status_report	diversifier.cpp	/^string cost_status_report(DivModel * base, const DivModel * sol) {$/;"	f
cost_status_report	solver.cpp	/^string cost_status_report(GlobalModel * base, const GlobalModel * sol) {$/;"	f
count	common/util.hpp	/^  int count(T e) { return rep.count(e); };$/;"	f	class:disjointSet
cs_	third-party/jsoncpp/json_writer.cpp	/^  CommentStyle::Enum cs_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
cstr_	third-party/jsoncpp/json/value.h	/^    char const* cstr_;  \/\/ actually, a prefixed string, unless policy is noDup$/;"	m	class:Json::Value::CZString
cur_difftemp	presolver/presolver_asserts.hpp	/^  vector<vector<operand> > cur_difftemp;$/;"	m	class:PresolverAsserts
currentValue	third-party/jsoncpp/json_reader.cpp	/^Value& OurReader::currentValue() { return *(nodes_.top()); }$/;"	f	class:Json::OurReader
currentValue	third-party/jsoncpp/json_reader.cpp	/^Value& Reader::currentValue() { return *(nodes_.top()); }$/;"	f	class:Json::Reader
current_	third-party/jsoncpp/json/value.h	/^  Value::ObjectValues::iterator current_;$/;"	m	class:Json::ValueIteratorBase
current_	third-party/jsoncpp/json_reader.cpp	/^  Location current_;$/;"	m	class:Json::OurReader	file:
custom_portfolio	models/options.hpp	/^  bool custom_portfolio(void) const {return _custom_portfolio.value();}$/;"	f	class:ModelOptions
cutoff	presolver/infeasible_presolver.hpp	/^  int cutoff;$/;"	m	class:InfeasiblePresolver
cycle_dfs	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::cycle_dfs(const operation i,$/;"	f	class:InfeasiblePresolver
cycles	models/solver-parameters.hpp	/^  vector<int> cycles;$/;"	m	class:SolverParameters
d	common/definitions.hpp	/^  latency d;$/;"	m	class:PresolverWCET
d	common/definitions.hpp	/^  presolver_disj d;$/;"	m	class:PresolverAcrossItem
d	common/definitions.hpp	/^  presolver_disj d;$/;"	m	class:PresolverAcrossTuple
d	common/definitions.hpp	/^  presolver_disj d;$/;"	m	class:PresolverBefore
d	common/definitions.hpp	/^  presolver_disj d;$/;"	m	class:PresolverPrecedence
dag_longest_paths_bwd	presolver/precedences.cpp	/^map<operation,int> dag_longest_paths_bwd(vector<operation>& region,$/;"	f
dag_longest_paths_fwd	presolver/precedences.cpp	/^map<operation,int> dag_longest_paths_fwd(vector<operation>& region,$/;"	f
data	common/definitions.hpp	/^  vector<int> data;$/;"	m	class:UnisonConstraintExpr
data	third-party/jsoncpp/json_value.cpp	/^const char* Value::CZString::data() const { return cstr_; }$/;"	f	class:Json::Value::CZString
dataFlowGraph	inspectors/dataflowinspector.cpp	/^DataFlowGraph DataFlowInspector::dataFlowGraph(const Model& m, block b) {$/;"	f	class:DataFlowInspector
dd_graph	presolver/auxiliary.cpp	/^Digraph dd_graph(const Parameters& input, block b) {$/;"	f
dd_graph	presolver/presolver_asserts.hpp	/^  vector<Digraph> dd_graph;$/;"	m	class:PresolverAsserts
dd_graph_transpose	presolver/presolver_asserts.hpp	/^  vector<Digraph> dd_graph_transpose;$/;"	m	class:PresolverAsserts
deactivate	procedures/globalprocedures.cpp	/^deactivate(GlobalModel * base, GlobalModel * gs,$/;"	f
deallocate	third-party/jsoncpp/json/allocator.h	/^		void deallocate(volatile pointer p, size_type n) {$/;"	f	class:Json::SecureAllocator
debug_print	presolver/debug_print.hpp	/^void debug_print(T e){$/;"	f
debug_print	presolver/debug_print.hpp	/^void debug_print(T e, string prefix){$/;"	f
decision	branchers/pressureschedulingbrancher.cpp	/^  mutable int decision;$/;"	m	class:PressureSchedulingBrancher	file:
decision	branchers/routingbrancher.cpp	/^  mutable int decision;$/;"	m	class:RoutingBrancher	file:
decodeDouble	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::decodeDouble(Token& token) {$/;"	f	class:Json::OurReader
decodeDouble	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::decodeDouble(Token& token, Value& decoded) {$/;"	f	class:Json::OurReader
decodeDouble	third-party/jsoncpp/json_reader.cpp	/^bool Reader::decodeDouble(Token& token) {$/;"	f	class:Json::Reader
decodeDouble	third-party/jsoncpp/json_reader.cpp	/^bool Reader::decodeDouble(Token& token, Value& decoded) {$/;"	f	class:Json::Reader
decodeNumber	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::decodeNumber(Token& token) {$/;"	f	class:Json::OurReader
decodeNumber	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::decodeNumber(Token& token, Value& decoded) {$/;"	f	class:Json::OurReader
decodeNumber	third-party/jsoncpp/json_reader.cpp	/^bool Reader::decodeNumber(Token& token) {$/;"	f	class:Json::Reader
decodeNumber	third-party/jsoncpp/json_reader.cpp	/^bool Reader::decodeNumber(Token& token, Value& decoded) {$/;"	f	class:Json::Reader
decodePrefixedString	third-party/jsoncpp/json_value.cpp	/^inline static void decodePrefixedString($/;"	f	namespace:Json
decodeString	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::decodeString(Token& token) {$/;"	f	class:Json::OurReader
decodeString	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::decodeString(Token& token, JSONCPP_STRING& decoded) {$/;"	f	class:Json::OurReader
decodeString	third-party/jsoncpp/json_reader.cpp	/^bool Reader::decodeString(Token& token) {$/;"	f	class:Json::Reader
decodeString	third-party/jsoncpp/json_reader.cpp	/^bool Reader::decodeString(Token& token, JSONCPP_STRING& decoded) {$/;"	f	class:Json::Reader
decodeUnicodeCodePoint	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::decodeUnicodeCodePoint(Token& token,$/;"	f	class:Json::OurReader
decodeUnicodeCodePoint	third-party/jsoncpp/json_reader.cpp	/^bool Reader::decodeUnicodeCodePoint(Token& token,$/;"	f	class:Json::Reader
decodeUnicodeEscapeSequence	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::decodeUnicodeEscapeSequence(Token& token,$/;"	f	class:Json::OurReader
decodeUnicodeEscapeSequence	third-party/jsoncpp/json_reader.cpp	/^bool Reader::decodeUnicodeEscapeSequence(Token& token,$/;"	f	class:Json::Reader
decompose_copy_set	presolver/dominance.cpp	/^void decompose_copy_set(Parameters & input,$/;"	f
decomposition	models/options.hpp	/^  bool decomposition(void) const {return _decomposition.value();}$/;"	f	class:ModelOptions
deepsort	presolver/auxiliary.cpp	/^void deepsort(PresolverActiveTable & t) {$/;"	f
deepsort	presolver/auxiliary.cpp	/^void deepsort(PresolverBefore &) {return;};$/;"	f
deepsort	presolver/auxiliary.cpp	/^void deepsort(PresolverDominates & d) {$/;"	f
deepsort	presolver/auxiliary.cpp	/^void deepsort(int) {return;};$/;"	f
deepsort	presolver/auxiliary.hpp	/^void deepsort(C& v) {$/;"	f
def_copies	models/parameters.hpp	/^  vector<vector<operation> > def_copies;$/;"	m	class:Parameters
def_opr	models/parameters.hpp	/^  vector<operation> def_opr;$/;"	m	class:Parameters
definer	models/parameters.hpp	/^  vector<operand> definer;$/;"	m	class:Parameters
delimiter	models/parameters.hpp	/^  vector<bool> delimiter;$/;"	m	class:Parameters
dep	models/parameters.hpp	/^  vector<vector<vector<int> > > dep;$/;"	m	class:Parameters
destroy	third-party/jsoncpp/json/allocator.h	/^		void destroy(pointer p) {$/;"	f	class:Json::SecureAllocator
destroyed	models/parameters.hpp	/^  vector<set<register_atom> > destroyed;$/;"	m	class:Parameters
detect_cycles	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::detect_cycles(void) {$/;"	f	class:InfeasiblePresolver
dfs2	presolver/digraph.cpp	/^void Digraph::dfs2(vertex v, map<vertex, bool>& visited, stack<vertex>& s) {$/;"	f	class:Digraph
dfs2	presolver/digraph.cpp	/^void Digraph::dfs2(vertex v, map<vertex, bool>& visited, vector<vertex>& s) {$/;"	f	class:Digraph
diff	models/divmodel.hpp	/^  IntVar diff(operation o) const {return v_diff[o]; }$/;"	f	class:DivModel
diff	models/localdivmodel.hpp	/^  IntVar diff(operation o) const {return v_diff[o]; }$/;"	f	class:LocalDivModel
diff_temps	presolver/diff_temps.cpp	/^void diff_temps(Parameters& input) {$/;"	f
difference_type	third-party/jsoncpp/json/value.h	/^  typedef int difference_type;$/;"	t	class:Json::ValueIterator
difference_type	third-party/jsoncpp/json/value.h	/^  typedef int difference_type;$/;"	t	class:Json::ValueIteratorBase
diffregs	models/parameters.hpp	/^  vector<vector<operand> > diffregs;$/;"	m	class:Parameters
difftemps	models/parameters.hpp	/^  vector<vector<operand> > difftemps;$/;"	m	class:Parameters
disable_across_call_disjoint_temporary_constraints	models/options.hpp	/^  bool disable_across_call_disjoint_temporary_constraints(void) const {return _disable_across_call_disjoint_temporary_constraints.value();}$/;"	f	class:ModelOptions
disable_across_call_disjoint_temporary_set_constraints	models/options.hpp	/^  bool disable_across_call_disjoint_temporary_set_constraints(void) const {return _disable_across_call_disjoint_temporary_set_constraints.value();}$/;"	f	class:ModelOptions
disable_additional_conditional_precedence_constraints	models/options.hpp	/^  bool disable_additional_conditional_precedence_constraints(void) const {return _disable_additional_conditional_precedence_constraints.value();}$/;"	f	class:ModelOptions
disable_additional_nogood_constraints	models/options.hpp	/^  bool disable_additional_nogood_constraints(void) const {return _disable_additional_nogood_constraints.value();}$/;"	f	class:ModelOptions
disable_additional_partially_ordered_live_range_constraints	models/options.hpp	/^  bool disable_additional_partially_ordered_live_range_constraints(void) const {return _disable_additional_partially_ordered_live_range_constraints.value();}$/;"	f	class:ModelOptions
disable_allowed_activation_constraints	models/options.hpp	/^  bool disable_allowed_activation_constraints(void) const {return _disable_allowed_activation_constraints.value();}$/;"	f	class:ModelOptions
disable_basic_conditional_precedence_constraints	models/options.hpp	/^  bool disable_basic_conditional_precedence_constraints(void) const {return _disable_basic_conditional_precedence_constraints.value();}$/;"	f	class:ModelOptions
disable_basic_nogood_constraints	models/options.hpp	/^  bool disable_basic_nogood_constraints(void) const {return _disable_basic_nogood_constraints.value();}$/;"	f	class:ModelOptions
disable_basic_partially_ordered_live_range_constraints	models/options.hpp	/^  bool disable_basic_partially_ordered_live_range_constraints(void) const {return _disable_basic_partially_ordered_live_range_constraints.value();}$/;"	f	class:ModelOptions
disable_conditional_precedence_constraints	models/options.hpp	/^  bool disable_conditional_precedence_constraints(void) const {return _disable_conditional_precedence_constraints.value();}$/;"	f	class:ModelOptions
disable_copy_activation_and_dataflow_constraints	models/options.hpp	/^  bool disable_copy_activation_and_dataflow_constraints(void) const {return _disable_copy_activation_and_dataflow_constraints.value();}$/;"	f	class:ModelOptions
disable_copy_dominance_constraints	models/options.hpp	/^  bool disable_copy_dominance_constraints(void) const {return _disable_copy_dominance_constraints.value();}$/;"	f	class:ModelOptions
disable_global_shaving	models/options.hpp	/^  bool disable_global_shaving(void) const {return _disable_global_shaving.value();}$/;"	f	class:ModelOptions
disable_hints	models/options.hpp	/^  bool disable_hints(void) const {return _disable_hints.value();}$/;"	f	class:ModelOptions
disable_improving	models/options.hpp	/^  bool disable_improving(void) const {return _disable_improving.value();}$/;"	f	class:ModelOptions
disable_infinite_register_dominance_constraints	models/options.hpp	/^  bool disable_infinite_register_dominance_constraints(void) const {return _disable_infinite_register_dominance_constraints.value();}$/;"	f	class:ModelOptions
disable_local_shaving	models/options.hpp	/^  bool disable_local_shaving(void) const {return _disable_local_shaving.value();}$/;"	f	class:ModelOptions
disable_maximum_temporary_usage_constraints	models/options.hpp	/^  bool disable_maximum_temporary_usage_constraints(void) const {return _disable_maximum_temporary_usage_constraints.value();}$/;"	f	class:ModelOptions
disable_minimum_number_of_optional_operations_constraints	models/options.hpp	/^  bool disable_minimum_number_of_optional_operations_constraints(void) const {return _disable_minimum_number_of_optional_operations_constraints.value();}$/;"	f	class:ModelOptions
disable_nogood_constraints	models/options.hpp	/^  bool disable_nogood_constraints(void) const {return _disable_nogood_constraints.value();}$/;"	f	class:ModelOptions
disable_operand_symmetry_breaking_constraints	models/options.hpp	/^  bool disable_operand_symmetry_breaking_constraints(void) const {return _disable_operand_symmetry_breaking_constraints.value();}$/;"	f	class:ModelOptions
disable_partially_ordered_live_range_constraints	models/options.hpp	/^  bool disable_partially_ordered_live_range_constraints(void) const {return _disable_partially_ordered_live_range_constraints.value();}$/;"	f	class:ModelOptions
disable_precedence_variables	models/options.hpp	/^  bool disable_precedence_variables(void) const {return _disable_precedence_variables.value();}$/;"	f	class:ModelOptions
disable_presolver_constraints	models/options.hpp	/^  bool disable_presolver_constraints(void) const {return _disable_presolver_constraints.value();}$/;"	f	class:ModelOptions
disable_presolving	models/options.hpp	/^  bool disable_presolving(void) const {return _disable_presolving.value();}$/;"	f	class:ModelOptions
disable_register_symmetry_breaking_constraints	models/options.hpp	/^  bool disable_register_symmetry_breaking_constraints(void) const {return _disable_register_symmetry_breaking_constraints.value();}$/;"	f	class:ModelOptions
disable_relax_a	models/options.hpp	/^  bool disable_relax_a(void) const {return _disable_relax_a.value();}$/;"	f	class:ModelOptions
disable_relax_c	models/options.hpp	/^  bool disable_relax_c(void) const {return _disable_relax_c.value();}$/;"	f	class:ModelOptions
disable_relax_i	models/options.hpp	/^  bool disable_relax_i(void) const {return _disable_relax_i.value();}$/;"	f	class:ModelOptions
disable_relax_r	models/options.hpp	/^  bool disable_relax_r(void) const {return _disable_relax_r.value();}$/;"	f	class:ModelOptions
disable_relax_y	models/options.hpp	/^  bool disable_relax_y(void) const {return _disable_relax_y.value();}$/;"	f	class:ModelOptions
disable_space_capacity_constraints	models/options.hpp	/^  bool disable_space_capacity_constraints(void) const {return _disable_space_capacity_constraints.value();}$/;"	f	class:ModelOptions
disable_temporary_symmetry_breaking_constraints	models/options.hpp	/^  bool disable_temporary_symmetry_breaking_constraints(void) const {return _disable_temporary_symmetry_breaking_constraints.value();}$/;"	f	class:ModelOptions
disable_wcet_constraints	models/options.hpp	/^  bool disable_wcet_constraints(void) const {return _disable_wcet_constraints.value();}$/;"	f	class:ModelOptions
disconnect_operand	procedures/presolverprocedures.cpp	/^void disconnect_operand(Parameters& input, operand p) {$/;"	f
disj_is_false	presolver/auxiliary.cpp	/^bool disj_is_false(const presolver_disj& d) {$/;"	f
disj_is_true	presolver/auxiliary.cpp	/^bool disj_is_true(const presolver_disj& d) {$/;"	f
disj_to_expr	presolver/auxiliary.cpp	/^UnisonConstraintExpr disj_to_expr(const presolver_disj& d) {$/;"	f
disjointSet	common/util.hpp	/^class disjointSet {$/;"	c
disjoint_operand_registers	models/model.cpp	/^void Model::disjoint_operand_registers(vector<operand> ps) {$/;"	f	class:Model
disjoint_sets	common/util.hpp	/^bool disjoint_sets(const C& s1, const C& s2) {$/;"	f
dispose	branchers/pressureschedulingbrancher.cpp	/^  virtual size_t dispose(Space& home) {$/;"	f	class:PressureSchedulingBrancher
dispose	branchers/routingbrancher.cpp	/^  virtual size_t dispose(Space& home) {$/;"	f	class:RoutingBrancher
dist	models/divmodel.hpp	/^  IntVar dist;$/;"	m	class:DivModel
dist	models/parameters.hpp	/^  vector<vector<vector<int> > > dist;$/;"	m	class:Parameters
dist_metric	models/options.hpp	/^  DivDistance dist_metric(void) const { return static_cast <DivDistance>( _distance.value());}$/;"	f	class:ModelOptions
distinct	models/model.cpp	/^void Model::distinct(Home home, const IntVarArgs & x, const BoolVarArgs & m,$/;"	f	class:Model
distinct_cycle	presolver/precedences.cpp	/^static bool distinct_cycle(const Parameters& input,$/;"	f	file:
div	procedures/divprocedures.cpp	/^string div() { return "[div]\\t "; }$/;"	f
div_method	models/options.hpp	/^  DivMethod div_method(void) const { return static_cast <DivMethod>( _div_method.value());}$/;"	f	class:ModelOptions
div_p	models/divmodel.hpp	/^  double div_p;$/;"	m	class:DivModel
div_p	models/localdivmodel.hpp	/^  double div_p;$/;"	m	class:LocalDivModel
div_r	models/divmodel.hpp	/^  Rnd div_r;$/;"	m	class:DivModel
div_r	models/localdivmodel.hpp	/^  Rnd div_r;$/;"	m	class:LocalDivModel
divdistance	common/definitions.hpp	/^typedef enum divdistance$/;"	g
divmethod	common/definitions.hpp	/^typedef enum divmethod$/;"	g
divs_dir	models/options.hpp	/^  string divs_dir(void) const {return _divs_dir.value();}$/;"	f	class:ModelOptions
do_mkdir	diversifier.cpp	/^static int do_mkdir(const string divs_path)$/;"	f	file:
document_	third-party/jsoncpp/json_reader.cpp	/^  JSONCPP_STRING document_;$/;"	m	class:Json::OurReader	file:
dominates	models/parameters.hpp	/^  vector<PresolverDominates> dominates;$/;"	m	class:Parameters
dominsn_nogoods	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::dominsn_nogoods(vector<presolver_conj>& Nogoods) {$/;"	f	class:InfeasiblePresolver
domops	models/parameters.hpp	/^  vector<vector<vector<int> > > domops;$/;"	m	class:Parameters
domuses	models/parameters.hpp	/^  vector<vector<operand> > domuses;$/;"	m	class:Parameters
double_nogoods	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::double_nogoods(const vector<temporand_set >& D,$/;"	f	class:InfeasiblePresolver
draw	inspectors/dataflowinspector.cpp	/^draw(const Model& m, DataFlowGraph& dfg, const QPointF& topLeft) {$/;"	f	class:DataFlowInspector
draw	inspectors/dot.cpp	/^void Dot::draw() {$/;"	f	class:Dot
draw	inspectors/precedenceinspector.cpp	/^draw(const LocalModel& m, PrecedenceGraph& pg, const QPointF& topLeft) {$/;"	f	class:PrecedenceInspector
drawArrow	inspectors/dot.cpp	/^QPainterPath Dot::drawArrow(QLineF line) const {$/;"	f	class:Dot
draw_atom_label	inspectors/modelinspector.cpp	/^draw_atom_label(const Model & m, QPointF & topClp, register_atom a) {$/;"	f	class:ModelInspector
draw_cfg_edges	inspectors/modelinspector.cpp	/^void ModelInspector::draw_cfg_edges(Dot& cfg) {$/;"	f	class:ModelInspector
draw_grid	inspectors/modelinspector.cpp	/^draw_grid(unsigned int w, unsigned int h, QPointF & topLeft,$/;"	f	class:ModelInspector
draw_horizontal_double_arrow	inspectors/modelinspector.cpp	/^draw_horizontal_double_arrow(QPointF left, QPointF right, QColor color) {$/;"	f	class:ModelInspector
draw_horizontal_register_array_label	inspectors/modelinspector.cpp	/^draw_horizontal_register_array_label(const Model & m, register_atom max,$/;"	f	class:ModelInspector
draw_rectangle	inspectors/modelinspector.cpp	/^draw_rectangle(QPointF topLeft, QSize size, QColor color) {$/;"	f	class:ModelInspector
draw_vertical_double_arrow	inspectors/modelinspector.cpp	/^draw_vertical_double_arrow(QPointF top, QPointF bottom, QColor color) {$/;"	f	class:ModelInspector
dropNullPlaceholders	third-party/jsoncpp/json_writer.cpp	/^void FastWriter::dropNullPlaceholders() { dropNullPlaceholders_ = true; }$/;"	f	class:Json::FastWriter
ds_set	presolver/infeasible_presolver.hpp	/^  Disjoint_set<Temporand> ds_set;$/;"	m	class:InfeasiblePresolver
dst	models/model.cpp	/^operand Model::dst(operation o) const {$/;"	f	class:Model
dump	inspectors/dot.cpp	/^void Dot::dump(FILE * file) {$/;"	f	class:Dot
duplicate	third-party/jsoncpp/json/value.h	/^      duplicate,$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateAndPrefixStringValue	third-party/jsoncpp/json_value.cpp	/^static inline char* duplicateAndPrefixStringValue($/;"	f	namespace:Json
duplicateOnCopy	third-party/jsoncpp/json/value.h	/^      duplicateOnCopy$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateStringValue	third-party/jsoncpp/json_value.cpp	/^static inline char* duplicateStringValue(const char* value,$/;"	f	namespace:Json
dur	common/util.hpp	/^  IntVar dur;$/;"	m	class:UsageTask
dur	models/parameters.hpp	/^  vector<vector<int> > dur;$/;"	m	class:Parameters
dznEncode	presolver.cpp	/^int dznEncode(UnisonConstraintExpr& e, map<Quad,int>& quadMap, vector<Quad>& quadList) {$/;"	f
dznEncodeFDSet	presolver.cpp	/^int dznEncodeFDSet(FDSet& set, map<FDSet,int>& setMap, vector<FDSet>& setList) {$/;"	f
dznEncodeQuad	presolver.cpp	/^int dznEncodeQuad(Quad& quad, map<Quad,int>& quadMap, vector<Quad>& quadList) {$/;"	f
dznQuad	presolver.cpp	/^Quad dznQuad(UnisonConstraintExpr& e, map<Quad,int>& quadMap, vector<Quad>& quadList) {$/;"	f
dzn_file	models/options.hpp	/^  string dzn_file(void) const {return _dzn_file.value();}$/;"	f	class:ModelOptions
dzn_file	presolver/presolver-options.hpp	/^  string dzn_file(void) const {return _dzn_file.value();}$/;"	f	class:PresolverOptions
e	common/definitions.hpp	/^  UnisonConstraintExpr e;$/;"	m	class:PresolverAcrossItemJSON
e	common/definitions.hpp	/^  UnisonConstraintExpr e;$/;"	m	class:PresolverBeforeJSON
e	common/util.hpp	/^  IntVar e;$/;"	m	class:UsageTask
e	diversifier.cpp	/^  RBS<LocalDivModel,BAB> * e;$/;"	m	class:LocalJob	file:
e	diversifier.cpp	/^  map<block, RBS<LocalDivModel,BAB> *> e;$/;"	m	class:LocalJobs	file:
edge	presolver/digraph.hpp	/^typedef pair<vertex, vertex> edge;$/;"	t
edgeId	inspectors/dot.cpp	/^EdgeId edgeId(const NodeId& source, const NodeId& target, int instance) {$/;"	f
edgeId	inspectors/dot.cpp	/^EdgeId edgeId(int source, int target, int instance) {$/;"	f
edgeLabel	inspectors/dataflowinspector.hpp	/^  map<EdgeId, QString > edgeLabel;$/;"	m	class:DataFlowGraph
edgeLabelType	inspectors/dataflowinspector.hpp	/^  map<EdgeId, EdgeLabelType > edgeLabelType;$/;"	m	class:DataFlowGraph
edgeType	inspectors/dataflowinspector.hpp	/^  map<EdgeId, EdgeType > edgeType;$/;"	m	class:DataFlowGraph
edgeType	inspectors/precedenceinspector.hpp	/^  map<EdgeId, PrecedenceType> edgeType;$/;"	m	class:PrecedenceGraph
edges	inspectors/dot.hpp	/^  map<EdgeId, Agedge_t*> edges;$/;"	m	class:Dot
edges	presolver/digraph.cpp	/^vector<edge> Digraph::edges() const {$/;"	f	class:Digraph
emit_before	presolver/before_presolver.cpp	/^vector<vector<operand> > BeforePresolver::emit_before(const vector<vector<int> >& C) {$/;"	f	class:BeforePresolver
emit_dzn	presolver.cpp	/^string emit_dzn(const FDSet fd, int opt) {$/;"	f
emit_dzn	presolver.cpp	/^string emit_dzn(const bool b, int opt) {$/;"	f
emit_dzn	presolver.cpp	/^string emit_dzn(const int i, int opt) {$/;"	f
emit_dzn	presolver.cpp	/^string emit_dzn(const vector<FDSet> xs, int opt) {$/;"	f
emit_dzn	presolver.cpp	/^string emit_dzn(const vector<bool> xs, int opt) {$/;"	f
emit_dzn	presolver.cpp	/^string emit_dzn(const vector<int> xs, int opt) {$/;"	f
emit_dzn	presolver.cpp	/^string emit_dzn(const vector<vector<FDSet>> xss, int opt) {$/;"	f
emit_dzn	presolver.cpp	/^string emit_dzn(const vector<vector<int>> xss, int opt) {$/;"	f
emit_dzn_line	presolver.cpp	/^string emit_dzn_line(string e, const T o) {$/;"	f
emit_dzn_line	presolver.cpp	/^string emit_dzn_line(string e, const T o, int opt) {$/;"	f
emit_improvement	models/options.hpp	/^  bool emit_improvement(void) const {return _emit_improvement.value();}$/;"	f	class:ModelOptions
emit_initial_gap	procedures/commonprocedures.cpp	/^void emit_initial_gap(GlobalModel * base, const GlobalModel * sol) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverAcrossItemJSON x) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverAcrossJSON x) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverActiveTable x) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverBeforeJSON x) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverCopyTmpTable x) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverDominates x) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverInstrCond x) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverSetAcross x) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverValuePrecedeChain pvc) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const PresolverWCET wcet) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const UnisonConstraintExpr e) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const bool b) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const double d) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const int i) {$/;"	f
emit_json	common/util.cpp	/^string emit_json(const string s) {$/;"	f
emit_json	common/util.hpp	/^string emit_json(const C& container) {$/;"	f
emit_json	models/localmodel.cpp	/^string LocalModel::emit_json() const {$/;"	f	class:LocalModel
emit_json	models/parameters.cpp	/^string Parameters::emit_json() {$/;"	f	class:Parameters
emit_json_line	common/util.hpp	/^string emit_json_line(string e, const T o) {$/;"	f
emit_json_line_last	common/util.hpp	/^string emit_json_line_last(string e, const T o) {$/;"	f
emit_local	solver.cpp	/^void emit_local(LocalModel * local, unsigned long int iteration, string prefix) {$/;"	f
emit_lower_bound	procedures/commonprocedures.cpp	/^void emit_lower_bound(const GlobalModel * base, bool proven) {$/;"	f
emit_nogood	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::emit_nogood(const vector<vector<operand> >* R,$/;"	f	class:InfeasiblePresolver
emit_output_exit	solver.cpp	/^void emit_output_exit(GlobalModel * base, const vector<ResultData> & results,$/;"	f
emit_temporary	inspectors/modelinspector.cpp	/^QString ModelInspector::emit_temporary(temporary t) {$/;"	f	class:ModelInspector
empty	third-party/jsoncpp/json_value.cpp	/^bool Value::empty() const {$/;"	f	class:Json::Value
enableYAMLCompatibility	third-party/jsoncpp/json_writer.cpp	/^void FastWriter::enableYAMLCompatibility() { yamlCompatiblityEnabled_ = true; }$/;"	f	class:Json::FastWriter
enable_solver_solution_brancher	models/options.hpp	/^  bool enable_solver_solution_brancher(void) const {return _enable_solver_solution_brancher.value();}$/;"	f	class:ModelOptions
end	common/util.hpp	/^  typename::map<T, T>::iterator end() { return rep.end(); }$/;"	f	class:disjointSet
end	models/divmodel.hpp	/^  uint end;$/;"	m	struct:__anon4
end	third-party/jsoncpp/json_value.cpp	/^Value::const_iterator Value::end() const {$/;"	f	class:Json::Value
end	third-party/jsoncpp/json_value.cpp	/^Value::iterator Value::end() {$/;"	f	class:Json::Value
end_	third-party/jsoncpp/json_reader.cpp	/^    Location end_;$/;"	m	class:Json::OurReader::Token	file:
end_	third-party/jsoncpp/json_reader.cpp	/^  Location end_;$/;"	m	class:Json::OurReader	file:
endingLineFeedSymbol_	third-party/jsoncpp/json_writer.cpp	/^  JSONCPP_STRING endingLineFeedSymbol_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
energy	branchers/merit.cpp	/^  double energy(const Space& s, SetVar, global_congruence g) {$/;"	f	namespace:Merit
energy	models/globalmodel.cpp	/^double GlobalModel::energy(global_congruence g) const {$/;"	f	class:GlobalModel
equal_to	models/globalmodel.cpp	/^bool GlobalModel::equal_to(const GlobalModel * gs) const {$/;"	f	class:GlobalModel
equal_to	models/localmodel.cpp	/^bool LocalModel::equal_to(const LocalModel * ls) const {$/;"	f	class:LocalModel
equality_set	presolver/auxiliary.hpp	/^typedef vector<vector<Temporand> > equality_set; \/\/ TODO use vectors instead of set$/;"	t
errors_	third-party/jsoncpp/json_reader.cpp	/^  Errors errors_;$/;"	m	class:Json::OurReader	file:
even_operand	presolver/infeasible_presolver.hpp	/^  vector<bool> even_operand;$/;"	m	class:InfeasiblePresolver
exist_before	presolver/infeasible_presolver.cpp	/^bool InfeasiblePresolver::exist_before(const vector<vector<operand> >& R,$/;"	f	class:InfeasiblePresolver
exists_i_labeling	procedures/presolverprocedures.cpp	/^bool exists_i_labeling(RelaxedModel * base, vector<operation> O) {$/;"	f
expr_operands	presolver/dominance.cpp	/^void expr_operands(const UnisonConstraintExpr& e, vector<operand>& ps) {$/;"	f
expr_to_disj	presolver/auxiliary.cpp	/^presolver_disj expr_to_disj(const UnisonConstraintExpr& e) {$/;"	f
exrelated	models/parameters.hpp	/^  vector<vector<operand> > exrelated;$/;"	m	class:Parameters
extend	common/util.cpp	/^vector<register_atom> extend(register_atom ra, int w) {$/;"	f
extend	common/util.hpp	/^RangeListIter extend(Gecode::Region & r, T & rs, int w) {$/;"	f
extend_predecessors	presolver/across.cpp	/^vector<pair<operation,presolver_conj>> extend_predecessors(const Parameters input,$/;"	f
extra_	third-party/jsoncpp/json_reader.cpp	/^    Location extra_;$/;"	m	class:Json::OurReader::ErrorInfo	file:
f	models/completemodel.hpp	/^  IntVar f(block b, unsigned int n) const {$/;"	f	class:CompleteModel
f	models/localmodel.hpp	/^  IntVar f(block, unsigned int n) const { return v_f[n]; };$/;"	f	class:LocalModel
f	models/relaxedmodel.hpp	/^  IntVar f(block, unsigned int) const { GECODE_NEVER; return v_i[0]; };$/;"	f	class:RelaxedModel
fail	diversifier.cpp	/^  long long int fail;$/;"	m	class:ResultData	file:
fail	diversifier.cpp	/^  long long int fail;$/;"	m	class:ResultDivData	file:
fail	solver.cpp	/^  long long int fail;$/;"	m	class:ResultData	file:
failIfExtra_	third-party/jsoncpp/json_reader.cpp	/^  bool failIfExtra_;$/;"	m	class:Json::OurFeatures	file:
failures	procedures/commonprocedures.hpp	/^  unsigned long int failures;$/;"	m	class:Solution
features_	third-party/jsoncpp/json_reader.cpp	/^  OurFeatures const features_;$/;"	m	class:Json::OurReader	file:
fetch_solution	procedures/commonprocedures.hpp	/^Solution<T> fetch_solution(T * problem, vector<T *> solutions) {$/;"	f
fill	inspectors/modelinspector.cpp	/^QString fill(QString s, int n, QChar c) {$/;"	f
filter_active_tables	presolver/dominance.cpp	/^void filter_active_tables(Parameters & input) {$/;"	f
filter_condition	presolver/auxiliary.cpp	/^presolver_disj filter_condition(const presolver_disj& disj,$/;"	f
final_aggressiveness	models/options.hpp	/^  double final_aggressiveness(void) const {return _final_aggressiveness.value();}$/;"	f	class:ModelOptions
finalize	inspectors/consoleinspector.cpp	/^void ConsoleInspector::finalize(void) { TextOutput::finalize(); }$/;"	f	class:ConsoleInspector
finalize	inspectors/modelinspector.cpp	/^void ModelInspector::finalize(void) {$/;"	f	class:ModelInspector
find	common/util.hpp	/^  T find(T e) { return rep[e]; }$/;"	f	class:disjointSet
find	presolver/disjoint_set.hpp	/^  T find(const T& x) {$/;"	f	class:Disjoint_set
find	third-party/jsoncpp/json_value.cpp	/^Value const* Value::find(char const* key, char const* cend) const$/;"	f	class:Json::Value
find_index	common/util.hpp	/^unsigned int find_index(const vector<T> & v, T e) {$/;"	f
find_optimal_solution	procedures/divprocedures.cpp	/^find_optimal_solution(DivModel *base, DecompDivModel *dm, ModelOptions *options) {$/;"	f
first	common/util.hpp	/^  I first;$/;"	m	class:DoubleChoice
first	common/util.hpp	/^  I first;$/;"	m	class:SingleChoice
first	inspectors/modelinspector.hpp	/^  bool first;$/;"	m	class:ModelInspector
first	models/divmodel.cpp	/^void DivModel::first(void) {$/;"	f	class:DivModel
first_copy	models/parameters.hpp	/^  vector<operation> first_copy;$/;"	m	class:Parameters
first_def	presolver/auxiliary.cpp	/^operand first_def(const Parameters& input, operation o) {$/;"	f
first_global_index	models/parameters.hpp	/^  vector<int> first_global_index;$/;"	m	class:Parameters
first_global_optional_index	models/parameters.hpp	/^  vector<int> first_global_optional_index;$/;"	m	class:Parameters
first_solution	models/options.hpp	/^  bool first_solution(void) const {return _first_solution.value();}$/;"	f	class:ModelOptions
first_temp	presolver/auxiliary.cpp	/^temporary first_temp(const Parameters& input, operand p) {$/;"	f
first_temp_but_null	presolver/auxiliary.cpp	/^temporary first_temp_but_null(const Parameters& input, operand p) {$/;"	f
first_use	presolver/auxiliary.cpp	/^operand first_use(const Parameters& input, operation o) {$/;"	f
fixNumericLocale	third-party/jsoncpp/json_tool.h	/^static inline void fixNumericLocale(char* begin, char* end) {$/;"	f	namespace:Json
fixNumericLocaleInput	third-party/jsoncpp/json_tool.h	/^static inline void fixNumericLocaleInput(char* begin, char* end) {$/;"	f	namespace:Json
fixed_predecessors	models/parameters.hpp	/^  vector<vector<operation> > fixed_predecessors;$/;"	m	class:Parameters
forbidden	procedures/globalprocedures.cpp	/^  vector<pair<int, InstructionAssignment> > forbidden;$/;"	m	class:ShavingResults	file:
freq	models/parameters.hpp	/^  vector<int> freq;$/;"	m	class:Parameters
freq_scale	models/parameters.hpp	/^  double freq_scale;$/;"	m	class:Parameters
from_singleton	common/util.hpp	/^T from_singleton(vector<T> & v) {$/;"	f
fu	models/parameters.hpp	/^  map<operand, unsigned int> fu;$/;"	m	class:Parameters
gactive_tables	models/parameters.hpp	/^  vector<PresolverActiveTable> gactive_tables;$/;"	m	class:Parameters
gadget	models/divmodel.hpp	/^  IntVar gadget(operation o) const {return v_gadget[o]; }$/;"	f	class:DivModel
gadget_t	models/divmodel.hpp	/^} gadget_t;$/;"	t	typeref:struct:__anon4
gadgets	models/divmodel.hpp	/^  vector<gadget_t> gadgets;$/;"	m	class:DivModel
gadgets_operations	models/divmodel.hpp	/^  vector<int> gadgets_operations;$/;"	m	class:DivModel
gc	models/divmodel.hpp	/^  IntVar gc(operation o) const {return v_gc[o]; }$/;"	f	class:DivModel
gcd	common/util.cpp	/^int gcd(int a, int b) {$/;"	f
gen_across_call	presolver/across.cpp	/^void gen_across_call(PresolverAsserts& PA,$/;"	f
gen_active_tables	presolver/dominance.cpp	/^void gen_active_tables(Parameters & input, Support::Timer & timer,$/;"	f
gen_before	presolver/before_presolver.cpp	/^void BeforePresolver::gen_before(beforeset& B) {$/;"	f	class:BeforePresolver
gen_before_precedences	presolver/precedences.cpp	/^void gen_before_precedences(const Parameters& input,$/;"	f
gen_before_precedences1	presolver/precedences.cpp	/^void gen_before_precedences1(const Parameters& input,$/;"	f
gen_calleesaved_spill	presolver/congr.cpp	/^void gen_calleesaved_spill(Parameters& input) {$/;"	f
gen_candidates	presolver/infeasible_presolver.cpp	/^vector<vector<nogood_cand_set> > InfeasiblePresolver::gen_candidates(const vector<temporand_set>& D, const vector<vector<Temporand> >& U) {$/;"	f	class:InfeasiblePresolver
gen_congr	presolver/congr.cpp	/^void gen_congr(Parameters& input) {$/;"	f
gen_copyrel_star	presolver/congr.cpp	/^vector<vector<temporary>> gen_copyrel_star(const Parameters& input) {$/;"	f
gen_dominates	presolver/dominance.cpp	/^void gen_dominates(Parameters & input) {$/;"	f
gen_fixed_precedences	presolver/precedences.cpp	/^void gen_fixed_precedences(const Parameters& input, precedence_set& PI) {$/;"	f
gen_long_latency	presolver/precedences.cpp	/^void gen_long_latency(Parameters& input) {$/;"	f
gen_min_con_erg	presolver/precedences.cpp	/^void gen_min_con_erg(const Parameters& input,$/;"	f
gen_odd_even_operands	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::gen_odd_even_operands(vector<bool>& odds,$/;"	f	class:InfeasiblePresolver
gen_precs_precedences	presolver/precedences.cpp	/^void gen_precs_precedences(const Parameters& input,$/;"	f
gen_region	presolver/precedences.cpp	/^void gen_region(const Parameters& input,$/;"	f
gen_region_init	presolver/precedences.cpp	/^void gen_region_init(const Parameters& input,$/;"	f
gen_region_per_partition	presolver/precedences.cpp	/^void gen_region_per_partition(const Parameters& input,$/;"	f
gen_region_precedences	presolver/precedences.cpp	/^void gen_region_precedences(const Parameters& input,$/;"	f
gen_region_precedences_block	presolver/precedences.cpp	/^void gen_region_precedences_block(const Parameters& input,$/;"	f
gen_region_precedences_cond	presolver/precedences.cpp	/^void gen_region_precedences_cond(const Parameters& input,$/;"	f
generate_congruence_operands	presolver/auxiliary.cpp	/^void generate_congruence_operands(const Parameters& input, vector<vector<operand> >& congr_map) {$/;"	f
generate_copyrel_operands_map	presolver/auxiliary.cpp	/^void generate_copyrel_operands_map(const Parameters& input, vector<vector<operand> >& copyrel_operands) {$/;"	f
generate_copyrel_temps_map	presolver/auxiliary.cpp	/^void generate_copyrel_temps_map(const Parameters& input, map<temporary, vector<temporary> >& m) {$/;"	f
get	third-party/jsoncpp/json_value.cpp	/^Value Value::get(ArrayIndex index, const Value& defaultValue) const {$/;"	f	class:Json::Value
get	third-party/jsoncpp/json_value.cpp	/^Value Value::get(JSONCPP_STRING const& key, Value const& defaultValue) const$/;"	f	class:Json::Value
get	third-party/jsoncpp/json_value.cpp	/^Value Value::get(char const* key, Value const& defaultValue) const$/;"	f	class:Json::Value
get	third-party/jsoncpp/json_value.cpp	/^Value Value::get(char const* key, char const* cend, Value const& defaultValue) const$/;"	f	class:Json::Value
get	third-party/jsoncpp/json_value.cpp	/^Value Value::get(const CppTL::ConstString& key,$/;"	f	class:Json::Value
getCStringLength	third-party/jsoncpp/json_value.cpp	/^unsigned Value::getCStringLength() const {$/;"	f	class:Json::Value
getComment	third-party/jsoncpp/json_value.cpp	/^JSONCPP_STRING Value::getComment(CommentPlacement placement) const {$/;"	f	class:Json::Value
getDecimalPoint	third-party/jsoncpp/json_tool.h	/^static char getDecimalPoint() {$/;"	f	namespace:Json
getEdges	inspectors/dot.cpp	/^vector<DotEdge> Dot::getEdges() const {$/;"	f	class:Dot
getFormatedErrorMessages	third-party/jsoncpp/json_reader.cpp	/^JSONCPP_STRING Reader::getFormatedErrorMessages() const {$/;"	f	class:Json::Reader
getFormattedErrorMessages	third-party/jsoncpp/json_reader.cpp	/^JSONCPP_STRING OurReader::getFormattedErrorMessages() const {$/;"	f	class:Json::OurReader
getFormattedErrorMessages	third-party/jsoncpp/json_reader.cpp	/^JSONCPP_STRING Reader::getFormattedErrorMessages() const {$/;"	f	class:Json::Reader
getLocationLineAndColumn	third-party/jsoncpp/json_reader.cpp	/^JSONCPP_STRING OurReader::getLocationLineAndColumn(Location location) const {$/;"	f	class:Json::OurReader
getLocationLineAndColumn	third-party/jsoncpp/json_reader.cpp	/^JSONCPP_STRING Reader::getLocationLineAndColumn(Location location) const {$/;"	f	class:Json::Reader
getLocationLineAndColumn	third-party/jsoncpp/json_reader.cpp	/^void OurReader::getLocationLineAndColumn(Location location,$/;"	f	class:Json::OurReader
getLocationLineAndColumn	third-party/jsoncpp/json_reader.cpp	/^void Reader::getLocationLineAndColumn(Location location,$/;"	f	class:Json::Reader
getMemberNames	third-party/jsoncpp/json_value.cpp	/^Value::Members Value::getMemberNames() const {$/;"	f	class:Json::Value
getNextChar	third-party/jsoncpp/json_reader.cpp	/^OurReader::Char OurReader::getNextChar() {$/;"	f	class:Json::OurReader
getNextChar	third-party/jsoncpp/json_reader.cpp	/^Reader::Char Reader::getNextChar() {$/;"	f	class:Json::Reader
getNodes	inspectors/dot.cpp	/^vector<DotNode> Dot::getNodes() const {$/;"	f	class:Dot
getOffsetLimit	third-party/jsoncpp/json_value.cpp	/^ptrdiff_t Value::getOffsetLimit() const { return limit_; }$/;"	f	class:Json::Value
getOffsetStart	third-party/jsoncpp/json_value.cpp	/^ptrdiff_t Value::getOffsetStart() const { return start_; }$/;"	f	class:Json::Value
getRoot	models/parameters.cpp	/^Json::Value Parameters::getRoot(Json::Value root, string p) {$/;"	f	class:Parameters
getRoot	models/parameters.cpp	/^QScriptValue Parameters::getRoot(QScriptValue root, string p) {$/;"	f	class:Parameters
getRoot	models/solver-parameters.cpp	/^QScriptValue SolverParameters::getRoot(QScriptValue root, string p) {$/;"	f	class:SolverParameters
getStaticMetaObject	moc_modelgraphicsview.cpp	/^const QMetaObject &ModelGraphicsView::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:ModelGraphicsView
getString	third-party/jsoncpp/json_value.cpp	/^bool Value::getString(char const** str, char const** cend) const {$/;"	f	class:Json::Value
getStructuredErrors	third-party/jsoncpp/json_reader.cpp	/^std::vector<OurReader::StructuredError> OurReader::getStructuredErrors() const {$/;"	f	class:Json::OurReader
getStructuredErrors	third-party/jsoncpp/json_reader.cpp	/^std::vector<Reader::StructuredError> Reader::getStructuredErrors() const {$/;"	f	class:Json::Reader
getValidReaderKeys	third-party/jsoncpp/json_reader.cpp	/^static void getValidReaderKeys(std::set<JSONCPP_STRING>* valid_keys)$/;"	f	namespace:Json
getValidWriterKeys	third-party/jsoncpp/json_writer.cpp	/^static void getValidWriterKeys(std::set<JSONCPP_STRING>* valid_keys)$/;"	f	namespace:Json
get_2d_vector	models/parameters.hpp	/^  vector<vector<T> > get_2d_vector(JSONVALUE root) {$/;"	f	class:Parameters
get_3d_vector	models/parameters.hpp	/^  vector<vector<vector<T> > > get_3d_vector(JSONVALUE root) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverAcrossItemJSON & ai) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverAcrossJSON & a) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverActiveTable & at) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverBeforeJSON & b) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverCopyTmpTable & ctt) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverDominates & d) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverInstrCond & d) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverSetAcross & sa) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverValuePrecedeChain & d) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, PresolverWCET & x) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, UnisonConstraintExpr & e) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, bool & b) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, double & d) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, int & i) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(Json::Value root, string & s) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverAcrossItemJSON & ai) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverAcrossJSON & a) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverActiveTable & at) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverBeforeJSON & b) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverCopyTmpTable & ctt) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverDominates & d) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverInstrCond & d) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverSetAcross & sa) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverValuePrecedeChain & d) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, PresolverWCET & x) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, UnisonConstraintExpr & e) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, bool & b) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, double & d) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, int & i) {$/;"	f	class:Parameters
get_element	models/parameters.cpp	/^void Parameters::get_element(QScriptValue root, string & s) {$/;"	f	class:Parameters
get_element	models/parameters.hpp	/^  void get_element(Json::Value root, vector<T> & vi) {$/;"	f	class:Parameters
get_element	models/parameters.hpp	/^  void get_element(QScriptValue root, vector<T> & vi) {$/;"	f	class:Parameters
get_element	models/solver-parameters.cpp	/^void SolverParameters::get_element(QScriptValue root, bool & b) {$/;"	f	class:SolverParameters
get_element	models/solver-parameters.cpp	/^void SolverParameters::get_element(QScriptValue root, double & d) {$/;"	f	class:SolverParameters
get_element	models/solver-parameters.cpp	/^void SolverParameters::get_element(QScriptValue root, int & i) {$/;"	f	class:SolverParameters
get_element	models/solver-parameters.cpp	/^void SolverParameters::get_element(QScriptValue root, string & s) {$/;"	f	class:SolverParameters
get_element	models/solver-parameters.hpp	/^  void get_element(Json::Value root, vector<T> & vi) {$/;"	f	class:SolverParameters
get_element	models/solver-parameters.hpp	/^  void get_element(QScriptValue root, vector<T> & vi) {$/;"	f	class:SolverParameters
get_labelings	procedures/presolverprocedures.cpp	/^ActiveTableResult get_labelings(RelaxedModel * base,$/;"	f
get_labelings	procedures/presolverprocedures.cpp	/^TmpTableResult get_labelings(Parameters& input, RelaxedModel * base,$/;"	f
get_scalar	models/parameters.hpp	/^  T get_scalar(JSONVALUE root) {$/;"	f	class:Parameters
get_scalar	models/solver-parameters.hpp	/^  T get_scalar(JSONVALUE root) {$/;"	f	class:SolverParameters
get_vector	models/parameters.hpp	/^  vector<T> get_vector(JSONVALUE root) {$/;"	f	class:Parameters
get_vector	models/solver-parameters.hpp	/^  vector<T> get_vector(JSONVALUE root) {$/;"	f	class:SolverParameters
gf	models/completemodel.hpp	/^  IntVarArray gf() const { return v_gf; }$/;"	f	class:CompleteModel
gist_block	models/options.hpp	/^  int gist_block(void) const {return _gist_block.value();}$/;"	f	class:ModelOptions
gist_global	models/options.hpp	/^  bool gist_global(void) const {return _gist_global.value();}$/;"	f	class:ModelOptions
gist_iteration	models/options.hpp	/^  int gist_iteration(void) const {return _gist_iteration.value();}$/;"	f	class:ModelOptions
gist_presolving	models/options.hpp	/^  bool gist_presolving(void) const {return _gist_presolving.value();}$/;"	f	class:ModelOptions
gist_solution	models/options.hpp	/^  bool gist_solution(void) const {return _gist_solution.value();}$/;"	f	class:ModelOptions
global	models/parameters.hpp	/^  map<congruence, global_congruence> global;$/;"	m	class:Parameters
global	procedures/globalprocedures.cpp	/^string global() { return "[global] "; }$/;"	f
globalCongruenceColor	inspectors/modelinspector.hpp	/^  vector<QColor> globalCongruenceColor;$/;"	m	class:ModelInspector
global_assignable	branchers/filters.cpp	/^bool global_assignable(const Space& s, IntVar, temporary t) {$/;"	f
global_budget	models/options.hpp	/^  double global_budget(void) const {return _global_budget.value();}$/;"	f	class:ModelOptions
global_cluster	common/definitions.hpp	/^typedef int global_cluster;$/;"	t
global_congruence	common/definitions.hpp	/^typedef int global_congruence;$/;"	t
global_connection_iterations	models/options.hpp	/^  bool global_connection_iterations(void) const {return _global_connection_iterations.value();}$/;"	f	class:ModelOptions
global_index	models/parameters.hpp	/^  map<operand, int> global_index;$/;"	m	class:Parameters
global_limit	procedures/globalprocedures.cpp	/^global_limit(Parameters * input, ModelOptions * options, int best) {$/;"	f
global_limit_2	procedures/divprocedures.cpp	/^global_limit_2(Parameters * input, ModelOptions * options, int best) {$/;"	f
global_n_bool_vars	diversifier.cpp	/^  int global_n_bool_vars;$/;"	m	class:GlobalData	file:
global_n_bool_vars	solver.cpp	/^  int global_n_bool_vars;$/;"	m	class:GlobalData	file:
global_n_int_vars	diversifier.cpp	/^  int global_n_int_vars;$/;"	m	class:GlobalData	file:
global_n_int_vars	solver.cpp	/^  int global_n_int_vars;$/;"	m	class:GlobalData	file:
global_n_set_vars	diversifier.cpp	/^  int global_n_set_vars;$/;"	m	class:GlobalData	file:
global_n_set_vars	solver.cpp	/^  int global_n_set_vars;$/;"	m	class:GlobalData	file:
global_operand	models/parameters.hpp	/^  vector<bool> global_operand;$/;"	m	class:Parameters
global_optional	models/parameters.hpp	/^  vector<bool> global_optional;$/;"	m	class:Parameters
global_optional_index	models/parameters.hpp	/^  map<operand, int> global_optional_index;$/;"	m	class:Parameters
global_setup_limit	models/options.hpp	/^  double global_setup_limit(void) const {return _global_setup_limit.value();}$/;"	f	class:ModelOptions
global_shaving_limit	models/options.hpp	/^  double global_shaving_limit(void) const {return _global_shaving_limit.value();}$/;"	f	class:ModelOptions
gnogoods	models/parameters.hpp	/^  vector<UnisonConstraintExpr> gnogoods;$/;"	m	class:Parameters
good	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::good() const {$/;"	f	class:Json::OurReader
good	third-party/jsoncpp/json_reader.cpp	/^bool Reader::good() const {$/;"	f	class:Json::Reader
graph	inspectors/dataflowinspector.hpp	/^  Dot * graph;$/;"	m	class:DataFlowGraph
graph	inspectors/dot.hpp	/^  Agraph_t *graph;$/;"	m	class:Dot
graph	inspectors/precedenceinspector.hpp	/^  Dot * graph;$/;"	m	class:PrecedenceGraph
gridcolor	inspectors/modelinspector.hpp	/^  QColor gridcolor;$/;"	m	class:ModelInspector
groupcopyrel	models/parameters.hpp	/^  vector<vector<operand> > groupcopyrel;$/;"	m	class:Parameters
gs	solver.cpp	/^  Solution<GlobalModel> gs;$/;"	m	class:LocalJobs	file:
gvNode	inspectors/dot.hpp	/^  Agnode_t * gvNode(NodeId node) {$/;"	f	class:Dot
gvSet	inspectors/dot.hpp	/^  static void gvSet(void *object, QString attr, QString value) {$/;"	f	class:Dot
half_congruent	models/model.cpp	/^bool Model::half_congruent(operand p, operand q) const {$/;"	f	class:Model
hamm	models/divmodel.hpp	/^  IntVar hamm(operation o) const {return v_hamm[o]; }$/;"	f	class:DivModel
hamm	models/localdivmodel.hpp	/^  IntVar hamm(operation o) const {return v_hamm[o]; }$/;"	f	class:LocalDivModel
hasComment	third-party/jsoncpp/json_value.cpp	/^bool Value::hasComment(CommentPlacement placement) const {$/;"	f	class:Json::Value
hasCommentForValue	third-party/jsoncpp/json_writer.cpp	/^bool BuiltStyledStreamWriter::hasCommentForValue(const Value& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
hasCommentForValue	third-party/jsoncpp/json_writer.cpp	/^bool StyledStreamWriter::hasCommentForValue(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
hasCommentForValue	third-party/jsoncpp/json_writer.cpp	/^bool StyledWriter::hasCommentForValue(const Value& value) {$/;"	f	class:Json::StyledWriter
has_def_proxy	presolver/infeasible_presolver.cpp	/^bool InfeasiblePresolver::has_def_proxy(const temporand_set& C, const operation o) {$/;"	f	class:InfeasiblePresolver
has_disjoint_temporary_domains	presolver/infeasible_presolver.cpp	/^bool InfeasiblePresolver::has_disjoint_temporary_domains(const vector<operand>& P) {$/;"	f	class:InfeasiblePresolver
has_edge_inside	presolver/precedences.cpp	/^static bool has_edge_inside(map<unsigned long,int>& pweight_c,$/;"	f	file:
has_solution	diversifier.cpp	/^bool has_solution(vector<ResultData> & results) {$/;"	f
has_solution	models/solver-parameters.hpp	/^  bool has_solution;$/;"	m	class:SolverParameters
has_solution	solver.cpp	/^bool has_solution(vector<ResultData> & results) {$/;"	f
has_use_proxy	presolver/infeasible_presolver.cpp	/^bool InfeasiblePresolver::has_use_proxy(const temporand_set& C, const operation o) {$/;"	f	class:InfeasiblePresolver
height	inspectors/dot.hpp	/^  double  width, height;$/;"	m	class:DotNode
height	inspectors/dot.hpp	/^  double width, height;$/;"	m	class:DotEdge
holds	common/util.cpp	/^bool holds(const BoolVar x) {$/;"	f
home	models/parameters.hpp	/^  vector<register_space> home;$/;"	m	class:Parameters
i	branchers/routingbrancher.cpp	/^  ViewArray<Int::IntView> i;$/;"	m	class:RoutingBrancher	file:
i	common/definitions.hpp	/^  instruction i;$/;"	m	class:PresolverInstrCond
i	common/definitions.hpp	/^  instruction i;$/;"	m	class:PresolverWCET
i	common/definitions.hpp	/^  operation i, j;$/;"	m	class:PrecedenceEdge
i	common/definitions.hpp	/^  operation i, j;$/;"	m	class:PresolverPrecedence
i	models/model.hpp	/^  IntVar i(operation o) const { return v_i[instr(o)]; }$/;"	f	class:Model
id	common/definitions.cpp	/^int Temporand::id() const {$/;"	f	class:Temporand
id	common/definitions.hpp	/^  UnisonConstraintExprId id;$/;"	m	class:UnisonConstraintExpr
id	presolver.cpp	/^  UnisonConstraintExprId id;$/;"	m	class:Quad	file:
imp	models/model.cpp	/^BoolVar Model::imp(operation o, instruction i0) {$/;"	f	class:Model
implied_clusters	models/parameters.hpp	/^  vector<set<global_cluster> > implied_clusters;$/;"	m	class:Parameters
in	models/parameters.hpp	/^  vector<operation> in;$/;"	m	class:Parameters
in_block	common/util.cpp	/^bool in_block(PresolverActiveTable & ct, block b, const Parameters * input) {$/;"	f
in_block	common/util.cpp	/^bool in_block(PresolverBeforeJSON & bf, block b, const Parameters * input) {$/;"	f
in_block	common/util.cpp	/^bool in_block(PresolverCopyTmpTable & ctt, block b, const Parameters * input) {$/;"	f
in_block	common/util.cpp	/^bool in_block(UnisonConstraintExpr & e, block b, const Parameters * input) {$/;"	f
inactive_cycle_savings	models/globalmodel.cpp	/^double GlobalModel::inactive_cycle_savings(operation o) const {$/;"	f	class:GlobalModel
indent	third-party/jsoncpp/json_writer.cpp	/^void BuiltStyledStreamWriter::indent() { indentString_ += indentation_; }$/;"	f	class:Json::BuiltStyledStreamWriter
indent	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::indent() { indentString_ += indentation_; }$/;"	f	class:Json::StyledStreamWriter
indent	third-party/jsoncpp/json_writer.cpp	/^void StyledWriter::indent() { indentString_ += JSONCPP_STRING(indentSize_, ' '); }$/;"	f	class:Json::StyledWriter
indentString_	third-party/jsoncpp/json_writer.cpp	/^  JSONCPP_STRING indentString_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
indentation_	third-party/jsoncpp/json_writer.cpp	/^  JSONCPP_STRING indentation_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
indented_	third-party/jsoncpp/json_writer.cpp	/^  bool indented_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
index	third-party/jsoncpp/json_value.cpp	/^ArrayIndex Value::CZString::index() const { return index_; }$/;"	f	class:Json::Value::CZString
index_	third-party/jsoncpp/json/value.h	/^      ArrayIndex index_;$/;"	m	union:Json::Value::CZString::__anon3
index_	third-party/jsoncpp/json/value.h	/^  ArrayIndex index_;$/;"	m	class:Json::PathArgument
index_of	common/util.hpp	/^unsigned int index_of(C list, T element) {$/;"	f
infassign	models/parameters.hpp	/^  vector<vector<int> > infassign;$/;"	m	class:Parameters
infinite	models/parameters.hpp	/^  vector<bool> infinite;$/;"	m	class:Parameters
infinite_atom_range	models/parameters.hpp	/^  infinite_atom_range;$/;"	m	class:Parameters
infinite_register_atom	procedures/commonprocedures.cpp	/^bool infinite_register_atom(Parameters & input, register_atom ra) {$/;"	f
init	common/util.cpp	/^string init(string s) {$/;"	f
initBasic	third-party/jsoncpp/json_value.cpp	/^void Value::initBasic(ValueType vtype, bool allocated) {$/;"	f	class:Json::Value
init_local_engine	procedures/localdivprocedures.cpp	/^init_local_engine(LocalDivModel *l, ModelOptions *options) {$/;"	f
init_local_problem	procedures/localdivprocedures.cpp	/^init_local_problem(DecompDivModel *g, block b, int seed_correction) {$/;"	f
init_vector	common/util.hpp	/^void init_vector(vector<T> & v, unsigned int size, T e) {$/;"	f
initialInstructions	inspectors/dataflowinspector.hpp	/^  map<operation, vector<QString> > initialInstructions;$/;"	m	class:DataFlowGraph
initial_aggressiveness	models/options.hpp	/^  double initial_aggressiveness(void) const {return _initial_aggressiveness.value();}$/;"	f	class:ModelOptions
initial_gap_file	models/options.hpp	/^  string initial_gap_file(void) const {return _initial_gap_file.value();}$/;"	f	class:ModelOptions
initialize	inspectors/modelinspector.cpp	/^void ModelInspector::initialize(void) {$/;"	f	class:ModelInspector
input	models/model.hpp	/^  Parameters * input;$/;"	m	class:Model
input	presolver/before_presolver.hpp	/^  Parameters& input;$/;"	m	class:BeforePresolver
input	presolver/infeasible_presolver.hpp	/^  Parameters& input;$/;"	m	class:InfeasiblePresolver
input_solutions	models/maxdivmodel.hpp	/^  vector<MaxDivModel *> input_solutions;$/;"	m	class:MaxDivModel
ins	common/definitions.hpp	/^  vector<instruction> ins;$/;"	m	class:PresolverDominates
insert	common/util.hpp	/^  void insert(T e, T r) { rep[e] = r; }$/;"	f	class:disjointSet
insert	inspectors/dot.cpp	/^void Dot::insert(const EdgeId& key) {$/;"	f	class:Dot
insert	inspectors/dot.cpp	/^void Dot::insert(const NodeId& name) {$/;"	f	class:Dot
insert_cluster_operands	models/globalmodel.cpp	/^insert_cluster_operands(global_cluster gc, set<operand> & ps) const {$/;"	f	class:GlobalModel
insn	common/definitions.hpp	/^  instruction insn;$/;"	m	class:PresolverInsnClass
insn1	common/definitions.hpp	/^  instruction insn1;$/;"	m	class:PresolverInsn2Class2
insn2	common/definitions.hpp	/^  instruction insn2;$/;"	m	class:PresolverInsn2Class2
insname	models/parameters.hpp	/^  vector<string> insname;$/;"	m	class:Parameters
inspect	inspectors/alignmentinspector.cpp	/^void GlobalAlignmentInspector::inspect(const Space& s) {$/;"	f	class:GlobalAlignmentInspector
inspect	inspectors/assignmentinspector.cpp	/^void GlobalAssignmentInspector::inspect(const Space& s) {$/;"	f	class:GlobalAssignmentInspector
inspect	inspectors/assignmentinspector.cpp	/^void LocalAssignmentInspector::inspect(const Space& s) {$/;"	f	class:LocalAssignmentInspector
inspect	inspectors/consoleinspector.cpp	/^void ConsoleInspector::inspect(const Space& s) {$/;"	f	class:ConsoleInspector
inspect	inspectors/dataflowinspector.cpp	/^void GlobalDataFlowInspector::inspect(const Space& s) {$/;"	f	class:GlobalDataFlowInspector
inspect	inspectors/dataflowinspector.cpp	/^void LocalDataFlowInspector::inspect(const Space& s) {$/;"	f	class:LocalDataFlowInspector
inspect	inspectors/issuecycleinspector.cpp	/^void GlobalIssueCycleInspector::inspect(const Space& s) {$/;"	f	class:GlobalIssueCycleInspector
inspect	inspectors/issuecycleinspector.cpp	/^void LocalIssueCycleInspector::inspect(const Space& s) {$/;"	f	class:LocalIssueCycleInspector
inspect	inspectors/livedurationinspector.cpp	/^void GlobalLiveDurationInspector::inspect(const Space& s) {$/;"	f	class:GlobalLiveDurationInspector
inspect	inspectors/livedurationinspector.cpp	/^void LocalLiveDurationInspector::inspect(const Space& s) {$/;"	f	class:LocalLiveDurationInspector
inspect	inspectors/liverangeinspector.cpp	/^void GlobalLiveRangeInspector::inspect(const Space& s) {$/;"	f	class:GlobalLiveRangeInspector
inspect	inspectors/liverangeinspector.cpp	/^void LocalLiveRangeInspector::inspect(const Space& s) {$/;"	f	class:LocalLiveRangeInspector
inspect	inspectors/operandassignmentinspector.cpp	/^void GlobalOperandAssignmentInspector::inspect(const Space& s) {$/;"	f	class:GlobalOperandAssignmentInspector
inspect	inspectors/operandassignmentinspector.cpp	/^void LocalOperandAssignmentInspector::inspect(const Space& s) {$/;"	f	class:LocalOperandAssignmentInspector
inspect	inspectors/precedenceinspector.cpp	/^void LocalPrecedenceInspector::inspect(const Space& s) {$/;"	f	class:LocalPrecedenceInspector
inspect	inspectors/registerarrayinspector.cpp	/^void GlobalRegisterArrayInspector::inspect(const Space& s) {$/;"	f	class:GlobalRegisterArrayInspector
inspect	inspectors/registerarrayinspector.cpp	/^void LocalRegisterArrayInspector::inspect(const Space& s) {$/;"	f	class:LocalRegisterArrayInspector
inspect	inspectors/resourceconsumptioninspector.cpp	/^void GlobalResourceConsumptionInspector::inspect(const Space& s) {$/;"	f	class:GlobalResourceConsumptionInspector
inspect	inspectors/resourceconsumptioninspector.cpp	/^void LocalResourceConsumptionInspector::inspect(const Space& s) {$/;"	f	class:LocalResourceConsumptionInspector
inspectb	inspectors/alignmentinspector.cpp	/^inspectb(const GlobalModel & m, const DotNode & n, disjointSet<operand> & cs) {$/;"	f	class:GlobalAlignmentInspector
inspectb	inspectors/assignmentinspector.cpp	/^void AssignmentInspector::inspectb(const Model& m, block b, QPointF& topLeft) {$/;"	f	class:AssignmentInspector
inspectb	inspectors/issuecycleinspector.cpp	/^void IssueCycleInspector::inspectb(const Model& m, block b, QPointF& topLeft) {$/;"	f	class:IssueCycleInspector
inspectb	inspectors/livedurationinspector.cpp	/^void LiveDurationInspector::inspectb(const Model& m, block b, QPointF& topLeft) {$/;"	f	class:LiveDurationInspector
inspectb	inspectors/liverangeinspector.cpp	/^void LiveRangeInspector::inspectb(const Model& m, block b, QPointF& topLeft) {$/;"	f	class:LiveRangeInspector
inspectb	inspectors/operandassignmentinspector.cpp	/^OperandAssignmentInspector::inspectb(const Model& m, block b, QPointF& topLeft) {$/;"	f	class:OperandAssignmentInspector
inspectb	inspectors/registerarrayinspector.cpp	/^void RegisterArrayInspector::inspectb(const Model& m, block b, QPointF& topLeft) {$/;"	f	class:RegisterArrayInspector
inspectb	inspectors/resourceconsumptioninspector.cpp	/^inspectb(const Model& m, block b, QPointF& topLeft) {$/;"	f	class:ResourceConsumptionInspector
instr	models/model.hpp	/^  int instr(operation o) const { return o - O()[0]; }$/;"	f	class:Model
instrs_to_var_args	models/model.hpp	/^  BoolVarArgs instrs_to_var_args(const BoolVarArray& vararray, T& indexes)$/;"	f	class:Model
instrs_to_var_args	models/model.hpp	/^  IntVarArgs instrs_to_var_args(const IntVarArray& vararray, T& indexes)$/;"	f	class:Model
instruction	common/definitions.hpp	/^typedef int instruction;$/;"	t
instruction	inspectors/precedenceinspector.hpp	/^  map<operation, QString> instruction;$/;"	m	class:PrecedenceGraph
instructions	inspectors/dataflowinspector.hpp	/^  map<operation, vector<QString> > instructions;$/;"	m	class:DataFlowGraph
instructions	models/parameters.hpp	/^  vector<vector<instruction> > instructions;$/;"	m	class:Parameters
instructions	models/solver-parameters.hpp	/^  vector<int> instructions;$/;"	m	class:SolverParameters
intValue	third-party/jsoncpp/json/value.h	/^  intValue,      \/\/\/< signed integer value$/;"	e	enum:Json::ValueType
int_	third-party/jsoncpp/json/value.h	/^    LargestInt int_;$/;"	m	union:Json::Value::ValueHolder
int_var_array	models/model.cpp	/^IntVarArray Model::int_var_array(int n, int min, int max) {$/;"	f	class:Model
integerToDouble	third-party/jsoncpp/json_value.cpp	/^static inline double integerToDouble(Json::UInt64 value) {$/;"	f	namespace:Json
integerToDouble	third-party/jsoncpp/json_value.cpp	/^template <typename T> static inline double integerToDouble(T value) {$/;"	f	namespace:Json
interchangeable	models/parameters.hpp	/^  vector<vector<operation> > interchangeable;$/;"	m	class:Parameters
invalidPath	third-party/jsoncpp/json_value.cpp	/^void Path::invalidPath(const JSONCPP_STRING& \/*path*\/, int \/*location*\/) {$/;"	f	class:Json::Path
invoked	branchers/boolsolutionbrancher.cpp	/^  static int invoked; \/\/ = 0;	\/\/ $/;"	m	class:BoolSolutionBrancher	file:
invoked	branchers/boolsolutionbrancher.cpp	/^int BoolSolutionBrancher::invoked = 0;$/;"	m	class:BoolSolutionBrancher	file:
invoked	branchers/solutionbrancher.cpp	/^  static int invoked; \/\/ = 0;	\/\/ $/;"	m	class:SolutionBrancher	file:
invoked	branchers/solutionbrancher.cpp	/^int SolutionBrancher::invoked = 0;$/;"	m	class:SolutionBrancher	file:
ipl	models/model.hpp	/^  IntPropLevel ipl;$/;"	m	class:Model
isArray	third-party/jsoncpp/json_value.cpp	/^bool Value::isArray() const { return type_ == arrayValue; }$/;"	f	class:Json::Value
isBool	third-party/jsoncpp/json_value.cpp	/^bool Value::isBool() const { return type_ == booleanValue; }$/;"	f	class:Json::Value
isControlCharacter	third-party/jsoncpp/json_tool.h	/^static inline bool isControlCharacter(char ch) { return ch > 0 && ch <= 0x1F; }$/;"	f	namespace:Json
isConvertibleTo	third-party/jsoncpp/json_value.cpp	/^bool Value::isConvertibleTo(ValueType other) const {$/;"	f	class:Json::Value
isDouble	third-party/jsoncpp/json_value.cpp	/^bool Value::isDouble() const { return type_ == intValue || type_ == uintValue || type_ == realValue; }$/;"	f	class:Json::Value
isInt	third-party/jsoncpp/json_value.cpp	/^bool Value::isInt() const {$/;"	f	class:Json::Value
isInt64	third-party/jsoncpp/json_value.cpp	/^bool Value::isInt64() const {$/;"	f	class:Json::Value
isIntegral	third-party/jsoncpp/json_value.cpp	/^bool Value::isIntegral() const {$/;"	f	class:Json::Value
isMember	third-party/jsoncpp/json_value.cpp	/^bool Value::isMember(JSONCPP_STRING const& key) const$/;"	f	class:Json::Value
isMember	third-party/jsoncpp/json_value.cpp	/^bool Value::isMember(char const* key) const$/;"	f	class:Json::Value
isMember	third-party/jsoncpp/json_value.cpp	/^bool Value::isMember(char const* key, char const* cend) const$/;"	f	class:Json::Value
isMember	third-party/jsoncpp/json_value.cpp	/^bool Value::isMember(const CppTL::ConstString& key) const {$/;"	f	class:Json::Value
isMultineArray	third-party/jsoncpp/json_writer.cpp	/^bool BuiltStyledStreamWriter::isMultineArray(Value const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
isMultineArray	third-party/jsoncpp/json_writer.cpp	/^bool StyledStreamWriter::isMultineArray(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
isMultineArray	third-party/jsoncpp/json_writer.cpp	/^bool StyledWriter::isMultineArray(const Value& value) {$/;"	f	class:Json::StyledWriter
isNull	third-party/jsoncpp/json_value.cpp	/^bool Value::isNull() const { return type_ == nullValue; }$/;"	f	class:Json::Value
isNull_	third-party/jsoncpp/json/value.h	/^  bool isNull_;$/;"	m	class:Json::ValueIteratorBase
isNumeric	third-party/jsoncpp/json_value.cpp	/^bool Value::isNumeric() const { return isDouble(); }$/;"	f	class:Json::Value
isObject	third-party/jsoncpp/json_value.cpp	/^bool Value::isObject() const { return type_ == objectValue; }$/;"	f	class:Json::Value
isStaticString	third-party/jsoncpp/json_value.cpp	/^bool Value::CZString::isStaticString() const { return storage_.policy_ == noDuplication; }$/;"	f	class:Json::Value::CZString
isString	third-party/jsoncpp/json_value.cpp	/^bool Value::isString() const { return type_ == stringValue; }$/;"	f	class:Json::Value
isUInt	third-party/jsoncpp/json_value.cpp	/^bool Value::isUInt() const {$/;"	f	class:Json::Value
isUInt64	third-party/jsoncpp/json_value.cpp	/^bool Value::isUInt64() const {$/;"	f	class:Json::Value
isValidIndex	third-party/jsoncpp/json_value.cpp	/^bool Value::isValidIndex(ArrayIndex index) const { return index < size(); }$/;"	f	class:Json::Value
is_branch_type	models/divmodel.cpp	/^bool DivModel::is_branch_type(int o) {$/;"	f	class:DivModel
is_branch_type	models/localdivmodel.cpp	/^bool LocalDivModel::is_branch_type(int o) {$/;"	f	class:LocalDivModel
is_dead	models/model.cpp	/^bool Model::is_dead(temporary t) const {$/;"	f	class:Model
is_disconnected	models/model.cpp	/^bool Model::is_disconnected(operand p) const {$/;"	f	class:Model
is_inactive	models/model.cpp	/^bool Model::is_inactive(operation o) const {$/;"	f	class:Model
is_mandatory	presolver/auxiliary.cpp	/^bool is_mandatory(const Parameters& input, operation o) {$/;"	f
is_odd_even	presolver/infeasible_presolver.cpp	/^int InfeasiblePresolver::is_odd_even(const vector<operand>& Ps) {$/;"	f	class:InfeasiblePresolver
is_operand	common/definitions.cpp	/^bool Temporand::is_operand() const {$/;"	f	class:Temporand
is_optional	models/model.cpp	/^bool Model::is_optional(operation o) const {$/;"	f	class:Model
is_real_type	models/divmodel.cpp	/^bool DivModel::is_real_type(int o) {$/;"	f	class:DivModel
is_real_type	models/localdivmodel.cpp	/^bool LocalDivModel::is_real_type(int o) {$/;"	f	class:LocalDivModel
is_register	common/definitions.cpp	/^bool Temporand::is_register() const {$/;"	f	class:Temporand
is_temporary	common/definitions.cpp	/^bool Temporand::is_temporary() const {$/;"	f	class:Temporand
isfinite	third-party/jsoncpp/json_writer.cpp	21;"	d	file:
isfinite	third-party/jsoncpp/json_writer.cpp	25;"	d	file:
isfinite	third-party/jsoncpp/json_writer.cpp	30;"	d	file:
isfinite	third-party/jsoncpp/json_writer.cpp	35;"	d	file:
isfinite	third-party/jsoncpp/json_writer.cpp	39;"	d	file:
isfinite	third-party/jsoncpp/json_writer.cpp	45;"	d	file:
isfinite	third-party/jsoncpp/json_writer.cpp	67;"	d	file:
issue_cycle	common/definitions.hpp	/^typedef int issue_cycle;$/;"	t
it_fail	diversifier.cpp	/^  long long int it_fail;$/;"	m	class:ResultData	file:
it_fail	diversifier.cpp	/^  long long int it_fail;$/;"	m	class:ResultDivData	file:
it_fail	solver.cpp	/^  long long int it_fail;$/;"	m	class:ResultData	file:
it_node	diversifier.cpp	/^  long long int it_node;$/;"	m	class:ResultData	file:
it_node	diversifier.cpp	/^  long long int it_node;$/;"	m	class:ResultDivData	file:
it_node	solver.cpp	/^  long long int it_node;$/;"	m	class:ResultData	file:
it_solving_time	diversifier.cpp	/^  int it_solving_time;$/;"	m	class:ResultData	file:
it_solving_time	diversifier.cpp	/^  int it_solving_time;$/;"	m	class:ResultDivData	file:
it_solving_time	solver.cpp	/^  int it_solving_time;$/;"	m	class:ResultData	file:
iteration	solver.cpp	/^  int iteration;$/;"	m	class:LocalJob	file:
iteration	solver.cpp	/^  int iteration;$/;"	m	class:LocalJobs	file:
iterator	third-party/jsoncpp/json/value.h	/^  typedef ValueIterator iterator;$/;"	t	class:Json::Value
iterator_category	third-party/jsoncpp/json/value.h	/^  typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:Json::ValueIteratorBase
j	common/definitions.hpp	/^  operation i, j;$/;"	m	class:PrecedenceEdge
j	common/definitions.hpp	/^  operation i, j;$/;"	m	class:PresolverPrecedence
job	diversifier.cpp	/^  LocalJob * job(void) {$/;"	f	class:LocalJobs
job	procedures/globalprocedures.cpp	/^  PresolveRelaxationJob * job(void) {$/;"	f	class:PresolveRelaxationJobs
job	procedures/globalprocedures.cpp	/^  PresolveShavingJob * job(void) {$/;"	f	class:PresolveShavingJobs
job	solver.cpp	/^  LocalJob * job(void) {$/;"	f	class:LocalJobs
jobs	procedures/globalprocedures.cpp	/^  vector<tuple<operation, activation_class, block> > jobs;$/;"	m	class:PresolveRelaxationJobs	file:
k	diversifier.cpp	/^  unsigned int k;$/;"	m	class:LocalJobs	file:
k	procedures/globalprocedures.cpp	/^  unsigned int k;$/;"	m	class:PresolveRelaxationJobs	file:
k	procedures/globalprocedures.cpp	/^  unsigned int k;$/;"	m	class:PresolveShavingJobs	file:
k	solver.cpp	/^  unsigned int k;$/;"	m	class:LocalJobs	file:
kernel_set	presolver/auxiliary.cpp	/^vector<presolver_conj> kernel_set(const vector<presolver_conj>& disj,$/;"	f
key	inspectors/dot.hpp	/^  EdgeId key;$/;"	m	class:DotEdge
key_	third-party/jsoncpp/json/value.h	/^  JSONCPP_STRING key_;$/;"	m	class:Json::PathArgument
kindIndex	third-party/jsoncpp/json/value.h	/^    kindIndex,$/;"	e	enum:Json::PathArgument::Kind
kindKey	third-party/jsoncpp/json/value.h	/^    kindKey$/;"	e	enum:Json::PathArgument::Kind
kindNone	third-party/jsoncpp/json/value.h	/^    kindNone = 0,$/;"	e	enum:Json::PathArgument::Kind
kind_	third-party/jsoncpp/json/value.h	/^  Kind kind_;$/;"	m	class:Json::PathArgument
l	diversifier.cpp	/^  LocalDivModel * l;$/;"	m	class:LocalJob	file:
l	diversifier.cpp	/^  map<block, LocalDivModel*> l;$/;"	m	class:LocalJobs	file:
l	models/model.hpp	/^  BoolVar l(temporary t) const { return x(input->definer[t]); }$/;"	f	class:Model
labelings	procedures/presolverprocedures.hpp	/^  at_map labelings;$/;"	m	class:TmpTableResult
labelings	procedures/presolverprocedures.hpp	/^  vector<vector<int> > labelings;$/;"	m	class:ActiveTableResult
lastValueEnd_	third-party/jsoncpp/json_reader.cpp	/^  Location lastValueEnd_;$/;"	m	class:Json::OurReader	file:
lastValue_	third-party/jsoncpp/json_reader.cpp	/^  Value* lastValue_;$/;"	m	class:Json::OurReader	file:
last_use	models/parameters.hpp	/^  vector<operand> last_use;$/;"	m	class:Parameters
last_use	presolver/last_use.cpp	/^void last_use(PresolverAsserts& PA, Parameters& input) {$/;"	f
lat	models/completemodel.cpp	/^IntVar CompleteModel::lat(operand p, temporary t) const {$/;"	f	class:CompleteModel
lat	models/localmodel.cpp	/^IntVar LocalModel::lat(operand p, temporary t) const {$/;"	f	class:LocalModel
lat	models/parameters.hpp	/^  vector<vector<vector<int> > > lat;$/;"	m	class:Parameters
lat	models/relaxedmodel.cpp	/^IntVar RelaxedModel::lat(operand p, temporary t) const {$/;"	f	class:RelaxedModel
latency	common/definitions.hpp	/^typedef int latency;$/;"	t
lb	procedures/globalprocedures.cpp	/^  int lb;$/;"	m	class:RelaxationResult	file:
ld	models/model.hpp	/^  IntVar ld(temporary t) const { return v_ld[temp(t)]; }$/;"	f	class:Model
le	models/model.hpp	/^  IntVar le(temporary t) const { return v_le[temp(t)]; }$/;"	f	class:Model
least_assigned	branchers/value.cpp	/^register_atom least_assigned(const Space& s, IntVar pr, global_congruence g) {$/;"	f
length	third-party/jsoncpp/json_value.cpp	/^unsigned Value::CZString::length() const { return storage_.length_; }$/;"	f	class:Json::Value::CZString
length_	third-party/jsoncpp/json/value.h	/^      unsigned length_: 30; \/\/ 1GB max$/;"	m	struct:Json::Value::CZString::StringStorage
limit_	third-party/jsoncpp/json/value.h	/^  ptrdiff_t limit_;$/;"	m	class:Json::Value
limit_unit	models/options.hpp	/^  string limit_unit(void) const {return _limit_unit.value();}$/;"	f	class:ModelOptions
lo	procedures/globalprocedures.cpp	/^  GIST_OPTIONS * lo;$/;"	m	class:PresolveRelaxationJob	file:
lo	procedures/globalprocedures.cpp	/^  GIST_OPTIONS * lo;$/;"	m	class:PresolveRelaxationJobs	file:
lo	solver.cpp	/^  GIST_OPTIONS * lo;$/;"	m	class:LocalJob	file:
lo	solver.cpp	/^  GIST_OPTIONS * lo;$/;"	m	class:LocalJobs	file:
local	procedures/localprocedures.cpp	/^string local(block b) {$/;"	f
local_cost_lb	procedures/globalprocedures.cpp	/^  int local_cost_lb;$/;"	m	class:ShavingResults	file:
local_limit	models/options.hpp	/^  double local_limit(void) const {return _local_limit.value();}$/;"	f	class:ModelOptions
local_portfolio	models/options.hpp	/^  string local_portfolio(void) const {return _local_portfolio.value();}$/;"	f	class:ModelOptions
local_problem	procedures/localdivprocedures.cpp	/^Solution<LocalDivModel> local_problem(DecompDivModel * g1, block b) {$/;"	f
local_problem	procedures/localprocedures.cpp	/^Solution<LocalModel> local_problem(GlobalModel * g1, block b) {$/;"	f
local_relaxation_limit	models/options.hpp	/^  double local_relaxation_limit(void) const {return _local_relaxation_limit.value();}$/;"	f	class:ModelOptions
local_shaving_limit	models/options.hpp	/^  double local_shaving_limit(void) const {return _local_shaving_limit.value();}$/;"	f	class:ModelOptions
local_solutions	solver.cpp	/^  vector<vector<LocalModel *> > * local_solutions;$/;"	m	class:LocalJob	file:
local_solutions	solver.cpp	/^  vector<vector<LocalModel *> > * local_solutions;$/;"	m	class:LocalJobs	file:
long_latency_def_use	models/parameters.hpp	/^  vector<vector<operand> > long_latency_def_use;$/;"	m	class:Parameters
long_latency_index	models/parameters.hpp	/^  vector<vector<vector<int> > > long_latency_index;$/;"	m	class:Parameters
lower_bound_file	models/options.hpp	/^  string lower_bound_file(void) const {return _lower_bound_file.value();}$/;"	f	class:ModelOptions
ls	models/model.hpp	/^  IntVar ls(temporary t) const { return v_ls[temp(t)]; }$/;"	f	class:Model
ls	procedures/globalprocedures.cpp	/^  LocalModel * ls;$/;"	m	class:PresolveRelaxationJob	file:
ls	solver.cpp	/^  Solution<LocalModel> ls;$/;"	m	class:LocalJob	file:
lt	models/model.hpp	/^  IntVar lt(operand p) const { return v_lt[opr(p)]; }$/;"	f	class:Model
main	diversifier.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	presolver.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	solver.cpp	/^int main(int argc, char* argv[]) {$/;"	f
make	third-party/jsoncpp/json_value.cpp	/^Value& Path::make(Value& root) const {$/;"	f	class:Json::Path
makePath	third-party/jsoncpp/json_value.cpp	/^void Path::makePath(const JSONCPP_STRING& path, const InArgs& in) {$/;"	f	class:Json::Path
make_div_local	procedures/localdivprocedures.cpp	/^LocalDivModel * make_div_local(const DecompDivModel * gs, block b, int seed_correction) {$/;"	f
make_div_local	procedures/localdivprocedures.cpp	/^LocalDivModel * make_div_local(const DecompDivModel * gs, block b, int seed_correction, IntPropLevel p_ipl) {$/;"	f
make_local	models/parameters.cpp	/^Parameters Parameters::make_local(block b) {$/;"	f	class:Parameters
make_local	procedures/commonprocedures.cpp	/^LocalModel * make_local(const GlobalModel * gs, block b) {$/;"	f
make_local	procedures/commonprocedures.cpp	/^LocalModel * make_local(const GlobalModel * gs, block b, IntPropLevel p_ipl) {$/;"	f
make_set	presolver/disjoint_set.hpp	/^  void make_set(const T& x){$/;"	f	class:Disjoint_set
make_union	presolver/disjoint_set.hpp	/^  void make_union(const T& x, const T& y) {$/;"	f	class:Disjoint_set
mandatory	models/parameters.hpp	/^  vector<vector<operation> > mandatory;$/;"	m	class:Parameters
mandatory_index	models/parameters.hpp	/^  vector<int> mandatory_index;$/;"	m	class:Parameters
map_	third-party/jsoncpp/json/value.h	/^    ObjectValues* map_;$/;"	m	union:Json::Value::ValueHolder
master	models/decompdivmodel.cpp	/^bool DecompDivModel::master(const MetaInfo& mi) {$/;"	f	class:DecompDivModel
master	models/divmodel.cpp	/^bool DivModel::master(const MetaInfo& mi) {$/;"	f	class:DivModel
master	models/globalmodel.cpp	/^bool GlobalModel::master(const MetaInfo& mi) {$/;"	f	class:GlobalModel
master	models/localdivmodel.cpp	/^bool LocalDivModel::master(const MetaInfo& mi) {$/;"	f	class:LocalDivModel
master	models/localmodel.cpp	/^bool LocalModel::master(const MetaInfo& mi) {$/;"	f	class:LocalModel
match	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::match(Location pattern, int patternLength) {$/;"	f	class:Json::OurReader
match	third-party/jsoncpp/json_reader.cpp	/^bool Reader::match(Location pattern, int patternLength) {$/;"	f	class:Json::Reader
maxInt	third-party/jsoncpp/json/value.h	/^  static const Int maxInt;$/;"	m	class:Json::Value
maxInt	third-party/jsoncpp/json_value.cpp	/^const Int Value::maxInt = Int(UInt(-1) \/ 2);$/;"	m	class:Json::Value	file:
maxInt64	third-party/jsoncpp/json/value.h	/^  static const Int64 maxInt64;$/;"	m	class:Json::Value
maxInt64	third-party/jsoncpp/json_value.cpp	/^const Int64 Value::maxInt64 = Int64(UInt64(-1) \/ 2);$/;"	m	class:Json::Value	file:
maxLargestInt	third-party/jsoncpp/json/value.h	/^  static const LargestInt maxLargestInt;$/;"	m	class:Json::Value
maxLargestInt	third-party/jsoncpp/json_value.cpp	/^const LargestInt Value::maxLargestInt = LargestInt(LargestUInt(-1) \/ 2);$/;"	m	class:Json::Value	file:
maxLargestUInt	third-party/jsoncpp/json/value.h	/^  static const LargestUInt maxLargestUInt;$/;"	m	class:Json::Value
maxLargestUInt	third-party/jsoncpp/json_value.cpp	/^const LargestUInt Value::maxLargestUInt = LargestUInt(-1);$/;"	m	class:Json::Value	file:
maxUInt	third-party/jsoncpp/json/value.h	/^  static const UInt maxUInt;$/;"	m	class:Json::Value
maxUInt	third-party/jsoncpp/json_value.cpp	/^const UInt Value::maxUInt = UInt(-1);$/;"	m	class:Json::Value	file:
maxUInt64	third-party/jsoncpp/json/value.h	/^  static const UInt64 maxUInt64;$/;"	m	class:Json::Value
maxUInt64	third-party/jsoncpp/json_value.cpp	/^const UInt64 Value::maxUInt64 = UInt64(-1);$/;"	m	class:Json::Value	file:
maxUInt64AsDouble	third-party/jsoncpp/json_value.cpp	/^static const double maxUInt64AsDouble = 18446744073709551615.0;$/;"	m	namespace:Json	file:
max_atom	inspectors/registerarrayinspector.cpp	/^register_atom RegisterArrayInspector::max_atom(const Model& m, block b) {$/;"	f	class:RegisterArrayInspector
max_cliques	presolver/digraph.cpp	/^vector<vector<vertex>> Digraph::max_cliques() {$/;"	f	class:Digraph
max_lat	models/parameters.hpp	/^  int max_lat;$/;"	m	class:Parameters
max_of	common/util.hpp	/^T max_of(const vector<T> & v) {$/;"	f
max_of	common/util.hpp	/^T max_of(vector<vector<vector<T> > > & v3) {$/;"	f
max_size	third-party/jsoncpp/json/allocator.h	/^		size_type max_size() const {$/;"	f	class:Json::SecureAllocator
maxc	models/parameters.hpp	/^  vector<int> maxc;$/;"	m	class:Parameters
maxdist	models/maxdivmodel.hpp	/^  IntVar maxdist; \/\/  = IntVar(*this, 1, 10000);$/;"	m	class:MaxDivModel
maxduration	inspectors/livedurationinspector.cpp	/^int LiveDurationInspector::maxduration(const Model& m, block b) {$/;"	f	class:LiveDurationInspector
maxf	models/parameters.hpp	/^  vector<int> maxf;$/;"	m	class:Parameters
may_saturate	models/model.cpp	/^bool Model::may_saturate(block b, register_atom fa, register_atom la) const {$/;"	f	class:Model
maybe_max_of	common/util.hpp	/^T maybe_max_of(T e, const vector<T> & v) {$/;"	f
maybe_min_of	common/util.hpp	/^T maybe_min_of(T e, const vector<T> & v) {$/;"	f
merge	common/util.hpp	/^  void merge(T e1, T e2) {$/;"	f	class:disjointSet
merge_disjunctions	presolver/across.cpp	/^presolver_disj merge_disjunctions(const Parameters& input,$/;"	f
message	third-party/jsoncpp/json_reader.cpp	/^    JSONCPP_STRING message;$/;"	m	struct:Json::OurReader::StructuredError	file:
message_	third-party/jsoncpp/json_reader.cpp	/^    JSONCPP_STRING message_;$/;"	m	class:Json::OurReader::ErrorInfo	file:
metaObject	moc_modelgraphicsview.cpp	/^const QMetaObject *ModelGraphicsView::metaObject() const$/;"	f	class:ModelGraphicsView
minInt	third-party/jsoncpp/json/value.h	/^  static const Int minInt;$/;"	m	class:Json::Value
minInt	third-party/jsoncpp/json_value.cpp	/^const Int Value::minInt = Int(~(UInt(-1) \/ 2));$/;"	m	class:Json::Value	file:
minInt64	third-party/jsoncpp/json/value.h	/^  static const Int64 minInt64;$/;"	m	class:Json::Value
minInt64	third-party/jsoncpp/json_value.cpp	/^const Int64 Value::minInt64 = Int64(~(UInt64(-1) \/ 2));$/;"	m	class:Json::Value	file:
minLargestInt	third-party/jsoncpp/json/value.h	/^  static const LargestInt minLargestInt;$/;"	m	class:Json::Value
minLargestInt	third-party/jsoncpp/json_value.cpp	/^const LargestInt Value::minLargestInt = LargestInt(~(LargestUInt(-1) \/ 2));$/;"	m	class:Json::Value	file:
min_active_lat	models/parameters.hpp	/^  vector<int> min_active_lat;$/;"	m	class:Parameters
min_dist	models/options.hpp	/^  unsigned int min_dist(void) const {return _min_dist.value();}$/;"	f	class:ModelOptions
min_lat	models/parameters.hpp	/^  int min_lat;$/;"	m	class:Parameters
min_latency	presolver/precedences.cpp	/^static int min_latency(const Parameters& input,$/;"	f	file:
min_of	common/util.hpp	/^T min_of(vector<T> & v) {$/;"	f
min_of	common/util.hpp	/^T min_of(vector<vector<vector<T> > > & v3) {$/;"	f
mindist	models/divmodel.hpp	/^  int mindist;$/;"	m	class:DivModel
minlive	models/parameters.hpp	/^  vector<int> minlive;$/;"	m	class:Parameters
monolithic	models/options.hpp	/^  bool monolithic(void) const {return _monolithic.value();}$/;"	f	class:ModelOptions
monolithic	procedures/globalprocedures.cpp	/^string monolithic() { return "[mthic]\\t "; }$/;"	f
monolithic_budget	models/options.hpp	/^  double monolithic_budget(void) const {return _monolithic_budget.value();}$/;"	f	class:ModelOptions
monolithic_threshold	models/options.hpp	/^  unsigned int monolithic_threshold(void) const {return _monolithic_threshold.value();}$/;"	f	class:ModelOptions
more_nogoods	presolver/presolver_asserts.hpp	/^  vector<presolver_conj> more_nogoods;$/;"	m	class:PresolverAsserts
most_effective	branchers/value.cpp	/^register_space most_effective(const Space& s, SetVar pals, global_congruence g) {$/;"	f
most_effective_connection_decision	branchers/value.cpp	/^int most_effective_connection_decision($/;"	f
mouseMoveEvent	inspectors/modelgraphicsview.cpp	/^void ModelGraphicsView::mouseMoveEvent(QMouseEvent* event) {$/;"	f	class:ModelGraphicsView
mousePressEvent	inspectors/modelgraphicsview.cpp	/^void ModelGraphicsView::mousePressEvent(QMouseEvent* event) {$/;"	f	class:ModelGraphicsView
mouseReleaseEvent	inspectors/modelgraphicsview.cpp	/^void ModelGraphicsView::mouseReleaseEvent(QMouseEvent*) {$/;"	f	class:ModelGraphicsView
msg_	third-party/jsoncpp/json/value.h	/^  JSONCPP_STRING msg_;$/;"	m	class:Json::Exception
multiple_non_null_temps	models/model.cpp	/^bool Model::multiple_non_null_temps(operand p) const {$/;"	f	class:Model
must_connect	models/model.cpp	/^bool Model::must_connect(operand p) const {$/;"	f	class:Model
mw	inspectors/modelinspector.hpp	/^  QMainWindow* mw;$/;"	m	class:ModelInspector
n	common/definitions.cpp	/^Temporand Temporand::n(int id){$/;"	f	class:Temporand
n	common/definitions.hpp	/^  int n;$/;"	m	class:PresolverPrecedence
n	common/definitions.hpp	/^  latency n;$/;"	m	class:PrecedenceEdge
n_bool_vars	models/model.hpp	/^  int n_bool_vars;$/;"	m	class:Model
n_global	models/parameters.hpp	/^  vector<int> n_global;$/;"	m	class:Parameters
n_global_optionals	models/parameters.hpp	/^  vector<int> n_global_optionals;$/;"	m	class:Parameters
n_int_vars	models/model.hpp	/^  int n_int_vars;$/;"	m	class:Model
n_set_vars	models/model.hpp	/^  int n_set_vars;$/;"	m	class:Model
name	inspectors/alignmentinspector.cpp	/^GlobalAlignmentInspector::name(void) {$/;"	f	class:GlobalAlignmentInspector
name	inspectors/assignmentinspector.cpp	/^std::string AssignmentInspector::name(void) { return "Temporary assignment"; }$/;"	f	class:AssignmentInspector
name	inspectors/consoleinspector.cpp	/^string ConsoleInspector::name(void) { return TextOutput::name(); }$/;"	f	class:ConsoleInspector
name	inspectors/dataflowinspector.cpp	/^std::string DataFlowInspector::name(void) { return "Data flow"; }$/;"	f	class:DataFlowInspector
name	inspectors/dot.hpp	/^  NodeId name;$/;"	m	class:DotNode
name	inspectors/issuecycleinspector.cpp	/^std::string IssueCycleInspector::name(void) { return "Issue cycles"; }$/;"	f	class:IssueCycleInspector
name	inspectors/livedurationinspector.cpp	/^std::string LiveDurationInspector::name(void) { return "Temporary live durations"; }$/;"	f	class:LiveDurationInspector
name	inspectors/liverangeinspector.cpp	/^std::string LiveRangeInspector::name(void) { return "Temporary live ranges"; }$/;"	f	class:LiveRangeInspector
name	inspectors/operandassignmentinspector.cpp	/^OperandAssignmentInspector::name(void) {$/;"	f	class:OperandAssignmentInspector
name	inspectors/precedenceinspector.cpp	/^std::string PrecedenceInspector::name(void) { return "Precedence"; }$/;"	f	class:PrecedenceInspector
name	inspectors/registerarrayinspector.cpp	/^std::string RegisterArrayInspector::name(void) { return "Register array"; }$/;"	f	class:RegisterArrayInspector
name	inspectors/resourceconsumptioninspector.cpp	/^std::string ResourceConsumptionInspector::name(void) {$/;"	f	class:ResourceConsumptionInspector
necessary	models/globalmodel.cpp	/^bool GlobalModel::necessary(activation_class ac) {$/;"	f	class:GlobalModel
neighbors	presolver/digraph.cpp	/^vector<vertex> Digraph::neighbors(vertex v) {$/;"	f	class:Digraph
newCharReader	third-party/jsoncpp/json_reader.cpp	/^CharReader* CharReaderBuilder::newCharReader() const$/;"	f	class:Json::CharReaderBuilder
newStreamWriter	third-party/jsoncpp/json_writer.cpp	/^StreamWriter* StreamWriterBuilder::newStreamWriter() const$/;"	f	class:Json::StreamWriterBuilder
new_nogood	presolver/presolver_asserts.hpp	/^  vector<presolver_conj> new_nogood;$/;"	m	class:PresolverAsserts
new_stop	procedures/commonprocedures.cpp	/^Search::Stop * new_stop(double limit, ModelOptions * options) {$/;"	f
next	models/decompdivmodel.cpp	/^void DecompDivModel::next(const DecompDivModel& l) {$/;"	f	class:DecompDivModel
next	models/divmodel.cpp	/^void DivModel::next(const DivModel& b) {$/;"	f	class:DivModel
next	models/localdivmodel.cpp	/^void LocalDivModel::next(const LocalDivModel& l) {$/;"	f	class:LocalDivModel
next	procedures/commonprocedures.cpp	/^void IterationState::next(ModelOptions * options) {$/;"	f	class:IterationState
noDuplication	third-party/jsoncpp/json/value.h	/^      noDuplication = 0,$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
node	diversifier.cpp	/^  long long int node;$/;"	m	class:ResultData	file:
node	diversifier.cpp	/^  long long int node;$/;"	m	class:ResultDivData	file:
node	solver.cpp	/^  long long int node;$/;"	m	class:ResultData	file:
nodeLabel	inspectors/dataflowinspector.hpp	/^  QString nodeLabel(operation o, bool ini = false) {$/;"	f	class:DataFlowGraph
nodeLabel	inspectors/precedenceinspector.hpp	/^  QString nodeLabel(operation o) {$/;"	f	class:PrecedenceGraph
nodeLabelSize	inspectors/dataflowinspector.hpp	/^  QSize nodeLabelSize(operation o, double DPI) {$/;"	f	class:DataFlowGraph
nodeLabelSize	inspectors/precedenceinspector.hpp	/^  QSize nodeLabelSize(operation o, double DPI) {$/;"	f	class:PrecedenceGraph
nodeType	inspectors/dataflowinspector.hpp	/^  map<operation, NodeType > nodeType;$/;"	m	class:DataFlowGraph
nodes	inspectors/dot.hpp	/^  map<NodeId, Agnode_t*> nodes;$/;"	m	class:Dot
nodes	procedures/commonprocedures.hpp	/^  unsigned long int nodes;$/;"	m	class:Solution
nodes_	third-party/jsoncpp/json_reader.cpp	/^  Nodes nodes_;$/;"	m	class:Json::OurReader	file:
nogood_cand	presolver/auxiliary.hpp	/^typedef vector<Temporand> nogood_cand;$/;"	t
nogood_cand_set	presolver/auxiliary.hpp	/^typedef vector<nogood_cand> nogood_cand_set;$/;"	t
nogoods	models/parameters.hpp	/^  vector<UnisonConstraintExpr> nogoods;$/;"	m	class:Parameters
nogoods2	models/parameters.hpp	/^  vector<UnisonConstraintExpr> nogoods2;$/;"	m	class:Parameters
nogoods_or_across	presolver/across.cpp	/^void nogoods_or_across(const Parameters& input,$/;"	f
noop_copy_conjunction	presolver/dominance.cpp	/^bool noop_copy_conjunction(const Parameters& input, const presolver_conj& c) {$/;"	f
noop_copy_literal	presolver/dominance.cpp	/^bool noop_copy_literal(const Parameters& input, const UnisonConstraintExpr& c) {$/;"	f
normal_conjunction	presolver/auxiliary.cpp	/^presolver_conj normal_conjunction(const Parameters& input, const presolver_conj& c) {$/;"	f
normalizeEOL	third-party/jsoncpp/json_reader.cpp	/^JSONCPP_STRING OurReader::normalizeEOL(OurReader::Location begin, OurReader::Location end) {$/;"	f	class:Json::OurReader
normalizeEOL	third-party/jsoncpp/json_reader.cpp	/^JSONCPP_STRING Reader::normalizeEOL(Reader::Location begin, Reader::Location end) {$/;"	f	class:Json::Reader
normalize_precedences	presolver/precedences.cpp	/^void normalize_precedences(const Parameters& input, const precedence_set& P, vector<UnisonConstraintExpr>& P1) {$/;"	f
nu	models/parameters.hpp	/^  unsigned int nu;$/;"	m	class:Parameters
null	third-party/jsoncpp/json/value.h	/^  static const Value& null;  \/\/\/< We regret this reference to a global instance; prefer the simpler Value().$/;"	m	class:Json::Value
null	third-party/jsoncpp/json_value.cpp	/^Value const& Value::null = Value::nullSingleton();$/;"	m	class:Json::Value	file:
nullRef	third-party/jsoncpp/json/value.h	/^  static const Value& nullRef;  \/\/\/< just a kludge for binary-compatibility; same as null$/;"	m	class:Json::Value
nullRef	third-party/jsoncpp/json_value.cpp	/^Value const& Value::nullRef = Value::nullSingleton();$/;"	m	class:Json::Value	file:
nullSingleton	third-party/jsoncpp/json_value.cpp	/^Value const& Value::nullSingleton()$/;"	f	class:Json::Value
nullSymbol_	third-party/jsoncpp/json_writer.cpp	/^  JSONCPP_STRING nullSymbol_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
nullValue	third-party/jsoncpp/json/value.h	/^  nullValue = 0, \/\/\/< 'null' value$/;"	e	enum:Json::ValueType
numberOfCommentPlacement	third-party/jsoncpp/json/value.h	/^  numberOfCommentPlacement$/;"	e	enum:Json::CommentPlacement
number_divs	models/options.hpp	/^  int number_divs(void) const {return _number_divs.value();}$/;"	f	class:ModelOptions
o	common/definitions.hpp	/^  operation o;$/;"	m	class:PresolverAcross
o	common/definitions.hpp	/^  operation o;$/;"	m	class:PresolverAcrossJSON
o	common/definitions.hpp	/^  operation o;$/;"	m	class:PresolverAcrossTuple
o	common/definitions.hpp	/^  operation o;$/;"	m	class:PresolverInstrCond
o	common/definitions.hpp	/^  operation o;$/;"	m	class:PresolverSetAcross
o	common/definitions.hpp	/^  operation o;$/;"	m	class:PresolverWCET
o	common/util.hpp	/^  BoolVar o;$/;"	m	class:UsageTask
o	presolver/across.hpp	/^  operation o;$/;"	m	class:PresolverSetAcrossTuple
o1	common/definitions.hpp	/^  operation o1, o2;$/;"	m	class:PresolverDominates
o2	common/definitions.hpp	/^  operation o1, o2;$/;"	m	class:PresolverDominates
oa	models/globalmodel.hpp	/^  BoolVar oa(alignable a) const { return v_oa[a]; }$/;"	f	class:GlobalModel
objectValue	third-party/jsoncpp/json/value.h	/^  objectValue    \/\/\/< object value (collection of name\/value pairs).$/;"	e	enum:Json::ValueType
objective_domain	models/model.cpp	/^int Model::objective_domain(void) {$/;"	f	class:Model
oblock	models/parameters.hpp	/^  vector<block> oblock;$/;"	m	class:Parameters
oc	models/divmodel.hpp	/^  SetVar oc(int c) const {return v_oc[c]; }$/;"	f	class:DivModel
odd_operand	presolver/infeasible_presolver.hpp	/^  vector<bool> odd_operand;$/;"	m	class:InfeasiblePresolver
off	models/parameters.hpp	/^  vector<vector<int> > off;$/;"	m	class:Parameters
offset_limit	third-party/jsoncpp/json_reader.cpp	/^    ptrdiff_t offset_limit;$/;"	m	struct:Json::OurReader::StructuredError	file:
offset_start	third-party/jsoncpp/json_reader.cpp	/^    ptrdiff_t offset_start;$/;"	m	struct:Json::OurReader::StructuredError	file:
oi	branchers/routingbrancher.cpp	/^  mutable int oi;$/;"	m	class:RoutingBrancher	file:
omitEndingLineFeed	third-party/jsoncpp/json_writer.cpp	/^void FastWriter::omitEndingLineFeed() { omitEndingLineFeed_ = true; }$/;"	f	class:Json::FastWriter
one	models/model.hpp	/^  IntVar zero, one;$/;"	m	class:Model
oo	procedures/globalprocedures.cpp	/^  operation oo;$/;"	m	class:RelaxationResult	file:
ope	models/parameters.hpp	/^  vector<vector<operand> > ope;$/;"	m	class:Parameters
oper	models/parameters.hpp	/^  vector<operation> oper;$/;"	m	class:Parameters
oper_defs	presolver/auxiliary.cpp	/^vector<operand> oper_defs(const Parameters& input, operation o) {$/;"	f
oper_insns	presolver/auxiliary.cpp	/^vector<instruction> oper_insns(const Parameters& input, operation o) {$/;"	f
oper_opnds	presolver/auxiliary.cpp	/^vector<operand> oper_opnds(const Parameters& input, operation o) {$/;"	f
oper_type	presolver/auxiliary.cpp	/^int oper_type(const Parameters& input, operation o) {$/;"	f
oper_uses	presolver/auxiliary.cpp	/^vector<operand> oper_uses(const Parameters& input, operation o) {$/;"	f
operand	common/definitions.hpp	/^typedef int operand;$/;"	t
operandLabel	inspectors/alignmentinspector.cpp	/^QString GlobalAlignmentInspector::operandLabel(operand p) {$/;"	f	class:GlobalAlignmentInspector
operand_allocation_cost	models/globalmodel.cpp	/^operand_allocation_cost(operand p, RangeListIter & A) const {$/;"	f	class:GlobalModel
operand_congruence	models/parameters.hpp	/^  vector<congruence> operand_congruence;$/;"	m	class:Parameters
operand_energy	models/globalmodel.cpp	/^double GlobalModel::operand_energy(operand p) const {$/;"	f	class:GlobalModel
operand_index	models/parameters.hpp	/^  map<operand, unsigned int> operand_index;$/;"	m	class:Parameters
operand_width	models/parameters.hpp	/^  vector<int> operand_width;$/;"	m	class:Parameters
operands	inspectors/modelinspector.cpp	/^ModelInspector::operands(const Model& m, block b) const {$/;"	f	class:ModelInspector
operands	models/parameters.hpp	/^  vector<vector<operand> > operands;$/;"	m	class:Parameters
operandsLabel	inspectors/alignmentinspector.cpp	/^QString GlobalAlignmentInspector::operandsLabel(vector<operand> ps) {$/;"	f	class:GlobalAlignmentInspector
operation	common/definitions.hpp	/^typedef int operation;$/;"	t
operations	inspectors/modelinspector.cpp	/^ModelInspector::operations(const Model& m, block b) const {$/;"	f	class:ModelInspector
operator !	third-party/jsoncpp/json_value.cpp	/^bool Value::operator!() const { return isNull(); }$/;"	f	class:Json::Value
operator !=	common/definitions.cpp	/^bool Temporand::operator!=(const Temporand& t) const {$/;"	f	class:Temporand
operator !=	common/definitions.hpp	/^  bool operator!=(const UnisonConstraintExpr& e) const {$/;"	f	class:UnisonConstraintExpr
operator !=	presolver.cpp	/^  bool operator!=(const FDSet& s) const {$/;"	f	class:FDSet
operator !=	presolver.cpp	/^  bool operator!=(const Quad& e) const {$/;"	f	class:Quad
operator !=	third-party/jsoncpp/json/allocator.h	/^bool operator!=(const SecureAllocator<T>&, const SecureAllocator<U>&) {$/;"	f	namespace:Json
operator !=	third-party/jsoncpp/json/value.h	/^  bool operator!=(const SelfType& other) const { return !isEqual(other); }$/;"	f	class:Json::ValueIteratorBase
operator !=	third-party/jsoncpp/json_value.cpp	/^bool Value::operator!=(const Value& other) const { return !(*this == other); }$/;"	f	class:Json::Value
operator ()	diversifier.cpp	/^  bool operator ()(void) const {$/;"	f	class:LocalJobs
operator ()	procedures/globalprocedures.cpp	/^  bool operator ()(void) const {$/;"	f	class:PresolveRelaxationJobs
operator ()	procedures/globalprocedures.cpp	/^  bool operator ()(void) const {$/;"	f	class:PresolveShavingJobs
operator ()	solver.cpp	/^  bool operator ()(void) const {$/;"	f	class:LocalJobs
operator *	third-party/jsoncpp/json/value.h	/^  reference operator*() const { return deref(); }$/;"	f	class:Json::ValueConstIterator
operator *	third-party/jsoncpp/json/value.h	/^  reference operator*() const { return deref(); }$/;"	f	class:Json::ValueIterator
operator ++	third-party/jsoncpp/json/value.h	/^  SelfType operator++(int) {$/;"	f	class:Json::ValueConstIterator
operator ++	third-party/jsoncpp/json/value.h	/^  SelfType operator++(int) {$/;"	f	class:Json::ValueIterator
operator ++	third-party/jsoncpp/json/value.h	/^  SelfType& operator++() {$/;"	f	class:Json::ValueConstIterator
operator ++	third-party/jsoncpp/json/value.h	/^  SelfType& operator++() {$/;"	f	class:Json::ValueIterator
operator -	third-party/jsoncpp/json/value.h	/^  difference_type operator-(const SelfType& other) const {$/;"	f	class:Json::ValueIteratorBase
operator --	third-party/jsoncpp/json/value.h	/^  SelfType operator--(int) {$/;"	f	class:Json::ValueConstIterator
operator --	third-party/jsoncpp/json/value.h	/^  SelfType operator--(int) {$/;"	f	class:Json::ValueIterator
operator --	third-party/jsoncpp/json/value.h	/^  SelfType& operator--() {$/;"	f	class:Json::ValueConstIterator
operator --	third-party/jsoncpp/json/value.h	/^  SelfType& operator--() {$/;"	f	class:Json::ValueIterator
operator ->	third-party/jsoncpp/json/value.h	/^  pointer operator->() const { return &deref(); }$/;"	f	class:Json::ValueConstIterator
operator ->	third-party/jsoncpp/json/value.h	/^  pointer operator->() const { return &deref(); }$/;"	f	class:Json::ValueIterator
operator <	common/definitions.cpp	/^bool Temporand::operator<(const Temporand& t) const {$/;"	f	class:Temporand
operator <	common/definitions.hpp	/^  bool operator<(const PrecedenceEdge& p) const {$/;"	f	class:PrecedenceEdge
operator <	common/definitions.hpp	/^  bool operator<(const PresolverAcross &that) const {$/;"	f	class:PresolverAcross
operator <	common/definitions.hpp	/^  bool operator<(const PresolverAcrossItem& that) const {$/;"	f	class:PresolverAcrossItem
operator <	common/definitions.hpp	/^  bool operator<(const PresolverAcrossItemJSON& that) const {$/;"	f	class:PresolverAcrossItemJSON
operator <	common/definitions.hpp	/^  bool operator<(const PresolverAcrossJSON &that) const {$/;"	f	class:PresolverAcrossJSON
operator <	common/definitions.hpp	/^  bool operator<(const PresolverActiveTable &t) const {$/;"	f	class:PresolverActiveTable
operator <	common/definitions.hpp	/^  bool operator<(const PresolverBefore &b) const {$/;"	f	class:PresolverBefore
operator <	common/definitions.hpp	/^  bool operator<(const PresolverBeforeJSON &b) const {$/;"	f	class:PresolverBeforeJSON
operator <	common/definitions.hpp	/^  bool operator<(const PresolverDominates &d) const {$/;"	f	class:PresolverDominates
operator <	common/definitions.hpp	/^  bool operator<(const PresolverInsn2Class2& that) const {$/;"	f	class:PresolverInsn2Class2
operator <	common/definitions.hpp	/^  bool operator<(const PresolverInsnClass& that) const {$/;"	f	class:PresolverInsnClass
operator <	common/definitions.hpp	/^  bool operator<(const PresolverPrecedence & p) const {$/;"	f	class:PresolverPrecedence
operator <	common/definitions.hpp	/^  bool operator<(const UnisonConstraintExpr & e) const {$/;"	f	class:UnisonConstraintExpr
operator <	presolver.cpp	/^  bool operator<(const FDSet& s) const {$/;"	f	class:FDSet
operator <	presolver.cpp	/^  bool operator<(const Quad & e) const {$/;"	f	class:Quad
operator <	third-party/jsoncpp/json_value.cpp	/^bool Value::CZString::operator<(const CZString& other) const {$/;"	f	class:Json::Value::CZString
operator <	third-party/jsoncpp/json_value.cpp	/^bool Value::operator<(const Value& other) const {$/;"	f	class:Json::Value
operator <<	common/definitions.cpp	/^std::ostream& operator<<(std::ostream& os, const Temporand& t){$/;"	f
operator <<	presolver.cpp	/^ostream& operator<<(ostream& os, const FDSet& fd) {$/;"	f
operator <<	presolver/digraph.cpp	/^ostream& operator<<(ostream& os, const Digraph& g){$/;"	f
operator <<	procedures/commonprocedures.cpp	/^ostream& operator<<(ostream& os, const IterationState & state) {$/;"	f
operator <<	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_OSTREAM& operator<<(JSONCPP_OSTREAM& sout, Value const& root) {$/;"	f	namespace:Json
operator <=	third-party/jsoncpp/json_value.cpp	/^bool Value::operator<=(const Value& other) const { return !(other < *this); }$/;"	f	class:Json::Value
operator =	third-party/jsoncpp/json_value.cpp	/^Value& Value::operator=(Value other) {$/;"	f	class:Json::Value
operator =	third-party/jsoncpp/json_value.cpp	/^Value::CZString& Value::CZString::operator=(CZString&& other) {$/;"	f	class:Json::Value::CZString
operator =	third-party/jsoncpp/json_value.cpp	/^Value::CZString& Value::CZString::operator=(const CZString& other) {$/;"	f	class:Json::Value::CZString
operator ==	common/definitions.cpp	/^bool Temporand::operator==(const Temporand& t) const {$/;"	f	class:Temporand
operator ==	common/definitions.hpp	/^  bool operator==(const PrecedenceEdge& p) const {$/;"	f	class:PrecedenceEdge
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverAcross& that) const {$/;"	f	class:PresolverAcross
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverAcrossItem& that) const {$/;"	f	class:PresolverAcrossItem
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverAcrossItemJSON& that) const {$/;"	f	class:PresolverAcrossItemJSON
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverAcrossJSON& that) const {$/;"	f	class:PresolverAcrossJSON
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverActiveTable& t) const {$/;"	f	class:PresolverActiveTable
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverBefore& b) const {$/;"	f	class:PresolverBefore
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverBeforeJSON& b) const {$/;"	f	class:PresolverBeforeJSON
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverCopyTmpTable& t) const {$/;"	f	class:PresolverCopyTmpTable
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverDominates& that) const {$/;"	f	class:PresolverDominates
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverInsn2Class2& that) const {$/;"	f	class:PresolverInsn2Class2
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverInsnClass& that) const {$/;"	f	class:PresolverInsnClass
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverInstrCond& that) const {$/;"	f	class:PresolverInstrCond
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverPrecedence & p) const {$/;"	f	class:PresolverPrecedence
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverSetAcross& that) const {$/;"	f	class:PresolverSetAcross
operator ==	common/definitions.hpp	/^  bool operator==(const PresolverValuePrecedeChain& that) const {$/;"	f	class:PresolverValuePrecedeChain
operator ==	common/definitions.hpp	/^  bool operator==(const UnisonConstraintExpr& e) const {$/;"	f	class:UnisonConstraintExpr
operator ==	presolver.cpp	/^  bool operator==(const FDSet& s) const {$/;"	f	class:FDSet
operator ==	presolver.cpp	/^  bool operator==(const Quad& e) const {$/;"	f	class:Quad
operator ==	third-party/jsoncpp/json/allocator.h	/^bool operator==(const SecureAllocator<T>&, const SecureAllocator<U>&) {$/;"	f	namespace:Json
operator ==	third-party/jsoncpp/json/value.h	/^  bool operator==(const SelfType& other) const { return isEqual(other); }$/;"	f	class:Json::ValueIteratorBase
operator ==	third-party/jsoncpp/json_value.cpp	/^bool Value::CZString::operator==(const CZString& other) const {$/;"	f	class:Json::Value::CZString
operator ==	third-party/jsoncpp/json_value.cpp	/^bool Value::operator==(const Value& other) const {$/;"	f	class:Json::Value
operator >	third-party/jsoncpp/json_value.cpp	/^bool Value::operator>(const Value& other) const { return other < *this; }$/;"	f	class:Json::Value
operator >=	third-party/jsoncpp/json_value.cpp	/^bool Value::operator>=(const Value& other) const { return !(*this < other); }$/;"	f	class:Json::Value
operator >>	third-party/jsoncpp/json_reader.cpp	/^JSONCPP_ISTREAM& operator>>(JSONCPP_ISTREAM& sin, Value& root) {$/;"	f	namespace:Json
operator []	third-party/jsoncpp/json_reader.cpp	/^Value& CharReaderBuilder::operator[](JSONCPP_STRING key)$/;"	f	class:Json::CharReaderBuilder
operator []	third-party/jsoncpp/json_value.cpp	/^Value const& Value::operator[](CppTL::ConstString const& key) const$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^Value const& Value::operator[](JSONCPP_STRING const& key) const$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^Value& Value::operator[](ArrayIndex index) {$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^Value& Value::operator[](const CppTL::ConstString& key) {$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^Value& Value::operator[](const JSONCPP_STRING& key) {$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^Value& Value::operator[](const StaticString& key) {$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^Value& Value::operator[](const char* key) {$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^Value& Value::operator[](int index) {$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^const Value& Value::operator[](ArrayIndex index) const {$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^const Value& Value::operator[](const char* key) const$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_value.cpp	/^const Value& Value::operator[](int index) const {$/;"	f	class:Json::Value
operator []	third-party/jsoncpp/json_writer.cpp	/^Value& StreamWriterBuilder::operator[](JSONCPP_STRING key)$/;"	f	class:Json::StreamWriterBuilder
operator const char*	third-party/jsoncpp/json/value.h	/^  operator const char*() const { return c_str_; }$/;"	f	class:Json::StaticString
opnd_oper	presolver/auxiliary.cpp	/^operation opnd_oper(const Parameters& input, operand p) {$/;"	f
opnd_temps	presolver/auxiliary.cpp	/^vector<temporary> opnd_temps(const Parameters& input, operand p) {$/;"	f
opnd_temps_but_null	presolver/auxiliary.cpp	/^vector<temporary> opnd_temps_but_null(const Parameters& input, operand p) {$/;"	f
opposite	models/model.cpp	/^operand Model::opposite(operand p) const {$/;"	f	class:Model
opr	models/model.hpp	/^  int opr(operand p) const { return p - P()[0]; }$/;"	f	class:Model
ops	inspectors/dataflowinspector.hpp	/^  vector<QString> ops(operation o, bool ini = false) {$/;"	f	class:DataFlowGraph
ops	models/parameters.hpp	/^  vector<vector<operation> > ops;$/;"	m	class:Parameters
optimality_gap	procedures/commonprocedures.cpp	/^double optimality_gap(GlobalModel * base, const GlobalModel * sol,$/;"	f
optimize_dynamic	models/parameters.hpp	/^  vector<bool> optimize_dynamic;$/;"	m	class:Parameters
optimize_resource	models/parameters.hpp	/^  vector<resource> optimize_resource;$/;"	m	class:Parameters
optional_min	models/parameters.hpp	/^  vector<int> optional_min;$/;"	m	class:Parameters
optional_min_active_tables	presolver/dominance.cpp	/^int optional_min_active_tables(Parameters& input, block b) {$/;"	f
options	models/model.hpp	/^  ModelOptions * options;$/;"	m	class:Model
options	presolver/infeasible_presolver.hpp	/^  PresolverOptions &options;$/;"	m	class:InfeasiblePresolver
ord_contains	presolver/auxiliary.hpp	/^bool ord_contains(const vector<T>& v, const T& e){$/;"	f
ord_difference	presolver/auxiliary.hpp	/^vector<T> ord_difference(const vector<T>& v1, const vector<T>& v2){$/;"	f
ord_intersect	presolver/auxiliary.hpp	/^bool ord_intersect(const vector<T>& v1, const vector<T>& v2) {$/;"	f
ord_intersection	presolver/auxiliary.hpp	/^vector<T> ord_intersection(const vector<T>& v1, const vector<T>& v2){$/;"	f
ord_union	presolver/auxiliary.hpp	/^vector<T> ord_union(const vector<T>& v1, const vector<T>& v2){$/;"	f
os	branchers/routingbrancher.cpp	/^  const vector<operation> os;$/;"	m	class:RoutingBrancher	file:
os	common/definitions.hpp	/^  vector<operation> os;$/;"	m	class:PresolverActiveTable
os	common/definitions.hpp	/^  vector<operation> os;$/;"	m	class:PresolverCopyTmpTable
out	models/parameters.hpp	/^  vector<operation> out;$/;"	m	class:Parameters
output_file	models/options.hpp	/^  string output_file(void) const {return _output_file.value();}$/;"	f	class:ModelOptions
output_file	presolver/presolver-options.hpp	/^  string output_file(void) const {return _output_file.value();}$/;"	f	class:PresolverOptions
overconstrain	models/options.hpp	/^  bool overconstrain(void) const {return _overconstrain.value();}$/;"	f	class:ModelOptions
overlap	common/util.cpp	/^bool overlap(int x, int xw, int y, int yw) {$/;"	f
p	common/definitions.cpp	/^Temporand Temporand::p(int id) {$/;"	f	class:Temporand
p	common/definitions.hpp	/^  operand p, q;$/;"	m	class:PresolverBefore
p	common/definitions.hpp	/^  operand p, q;$/;"	m	class:PresolverBeforeJSON
p	models/completemodel.cpp	/^BoolVar CompleteModel::p(operation o1, operation o2) {$/;"	f	class:CompleteModel
p	models/localmodel.cpp	/^BoolVar LocalModel::p(operation o1, operation o2) {$/;"	f	class:LocalModel
p	models/relaxedmodel.cpp	/^BoolVar RelaxedModel::p(operation, operation) {$/;"	f	class:RelaxedModel
p_finite_register_classes	presolver/auxiliary.cpp	/^void p_finite_register_classes(const Parameters& input, operand p, set<register_class>& RC) {$/;"	f
p_preassign	models/parameters.hpp	/^  vector<int> p_preassign;$/;"	m	class:Parameters
p_preassigned_callee_saved	presolver/auxiliary.cpp	/^bool p_preassigned_callee_saved(const Parameters& input, operand p) {$/;"	f
p_preassigned_caller_saved	presolver/auxiliary.cpp	/^bool p_preassigned_caller_saved(const Parameters& input, operand p) {$/;"	f
p_preassigned_not	presolver/auxiliary.cpp	/^bool p_preassigned_not(const Parameters& input, operand p) {$/;"	f
packed	models/parameters.hpp	/^  vector<vector<operand> > packed;$/;"	m	class:Parameters
pairs	models/parameters.hpp	/^  vector<pair<operand, operand> > pairs;$/;"	m	class:Parameters
pal	models/globalmodel.hpp	/^  BoolVar pal(operand p, register_space rs) const {$/;"	f	class:GlobalModel
pals	models/globalmodel.hpp	/^  SetVar pals(global_congruence g) const { return v_pals[g]; }$/;"	f	class:GlobalModel
param_overstrict	presolver/infeasible_presolver.hpp	/^  const bool param_overstrict;$/;"	m	class:InfeasiblePresolver
parent	presolver/disjoint_set.hpp	/^  map<T,T> parent;$/;"	m	class:Disjoint_set
parse	third-party/jsoncpp/json_reader.cpp	/^Reader::parse(const std::string& document, Value& root, bool collectComments) {$/;"	f	class:Json::Reader
parse	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::parse(const char* beginDoc,$/;"	f	class:Json::OurReader
parse	third-party/jsoncpp/json_reader.cpp	/^bool Reader::parse(const char* beginDoc,$/;"	f	class:Json::Reader
parse	third-party/jsoncpp/json_reader.cpp	/^bool Reader::parse(std::istream& sin, Value& root, bool collectComments) {$/;"	f	class:Json::Reader
parseFromStream	third-party/jsoncpp/json_reader.cpp	/^bool parseFromStream($/;"	f	namespace:Json
partially_in_register_space	models/model.cpp	/^BoolVar Model::partially_in_register_space(temporary t, register_space rs) {$/;"	f	class:Model
partition_nodes	presolver/precedences.cpp	/^void partition_nodes(Digraph& G,$/;"	f
pass1	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::pass1(vector<temporand_set>& Alldiffs, vector<presolver_conj>& Nogoods) {$/;"	f	class:InfeasiblePresolver
pass2	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::pass2(vector<presolver_conj>& Nogoods) {$/;"	f	class:InfeasiblePresolver
path	inspectors/dot.hpp	/^  QPainterPath path;$/;"	m	class:DotEdge
pb	models/parameters.hpp	/^  vector<block> pb;$/;"	m	class:Parameters
pi	branchers/routingbrancher.cpp	/^  mutable int pi;$/;"	m	class:RoutingBrancher	file:
ple	models/model.cpp	/^IntVar Model::ple(operand p) {$/;"	f	class:Model
pls	models/model.cpp	/^IntVar Model::pls(operand p) {$/;"	f	class:Model
pointer	third-party/jsoncpp/json/value.h	/^  typedef Value* pointer;$/;"	t	class:Json::ValueIterator
pointer	third-party/jsoncpp/json/value.h	/^  typedef const Value* pointer;$/;"	t	class:Json::ValueConstIterator
policy_	third-party/jsoncpp/json/value.h	/^      unsigned policy_: 2;$/;"	m	struct:Json::Value::CZString::StringStorage
populate_r_domain	procedures/presolverprocedures.cpp	/^void populate_r_domain(Model * m, temporary t, vector<int>& domain) {$/;"	f
portName	inspectors/alignmentinspector.cpp	/^QString GlobalAlignmentInspector::portName(operand p) {$/;"	f	class:GlobalAlignmentInspector
portfolio_threads	models/options.hpp	/^  unsigned int portfolio_threads(void) const {return _portfolio_threads.value();}$/;"	f	class:ModelOptions
pos	branchers/boolsolutionbrancher.cpp	/^    int pos;$/;"	m	class:BoolSolutionBrancher::Description	file:
pos	branchers/solutionbrancher.cpp	/^    int pos;$/;"	m	class:SolutionBrancher::Description	file:
post	branchers/boolsolutionbrancher.cpp	/^  static void post(Home home, ViewArray<BoolView>& v, int sol[]) {$/;"	f	class:BoolSolutionBrancher
post	branchers/pressureschedulingbrancher.cpp	/^  static void post(Home home, ViewArray<Int::IntView>& c) {$/;"	f	class:PressureSchedulingBrancher
post	branchers/routingbrancher.cpp	/^  static void post(Home home, ViewArray<Int::BoolView>& a,$/;"	f	class:RoutingBrancher
post	branchers/solutionbrancher.cpp	/^  static void post(Home home, ViewArray<IntView>& v, int sol[]) {$/;"	f	class:SolutionBrancher
post_across_call_disjoint_temporary_constraints	models/model.cpp	/^void Model::post_across_call_disjoint_temporary_constraints(block b) {$/;"	f	class:Model
post_across_call_disjoint_temporary_set_constraints	models/model.cpp	/^void Model::post_across_call_disjoint_temporary_set_constraints(block b) {$/;"	f	class:Model
post_activation_constraints	models/completemodel.cpp	/^void CompleteModel::post_activation_constraints(void) {$/;"	f	class:CompleteModel
post_activation_nogood	models/globalmodel.cpp	/^post_activation_nogood(operation o, int lb) {$/;"	f	class:GlobalModel
post_active_first_copy_constraints	models/model.cpp	/^void Model::post_active_first_copy_constraints(block b) {$/;"	f	class:Model
post_active_instructions_constraints	models/model.cpp	/^void Model::post_active_instructions_constraints(block b) {$/;"	f	class:Model
post_active_operation	models/globalmodel.cpp	/^void GlobalModel::post_active_operation(operation o) {$/;"	f	class:GlobalModel
post_active_operation_branching	models/relaxedmodel.cpp	/^void RelaxedModel::post_active_operation_branching(vector<operation> O) {$/;"	f	class:RelaxedModel
post_adhoc_constraints	models/model.cpp	/^void Model::post_adhoc_constraints(block b) {$/;"	f	class:Model
post_aggressive_branchers	models/localmodel.cpp	/^void LocalModel::post_aggressive_branchers(void) {$/;"	f	class:LocalModel
post_alignable_operands_definition	models/globalmodel.cpp	/^void GlobalModel::post_alignable_operands_definition(void) {$/;"	f	class:GlobalModel
post_aligned_congruences_definition	models/globalmodel.cpp	/^void GlobalModel::post_aligned_congruences_definition(void) {$/;"	f	class:GlobalModel
post_aligned_neighbor_operand_constraints	models/globalmodel.cpp	/^void GlobalModel::post_aligned_neighbor_operand_constraints(void) {$/;"	f	class:GlobalModel
post_alignment_constraints	models/model.cpp	/^void Model::post_alignment_constraints(block b) {$/;"	f	class:Model
post_allocation_definition	models/model.cpp	/^void Model::post_allocation_definition(block b) {$/;"	f	class:Model
post_allowed_activation_constraints	models/model.cpp	/^void Model::post_allowed_activation_constraints(block b) {$/;"	f	class:Model
post_allowed_copy_activation_and_dataflow_constraints	models/model.cpp	/^void Model::post_allowed_copy_activation_and_dataflow_constraints(block b) {$/;"	f	class:Model
post_basic_model_constraints	models/completemodel.cpp	/^void CompleteModel::post_basic_model_constraints(void) {$/;"	f	class:CompleteModel
post_basic_model_constraints	models/localmodel.cpp	/^void LocalModel::post_basic_model_constraints(void) {$/;"	f	class:LocalModel
post_basic_model_constraints	models/model.cpp	/^void Model::post_basic_model_constraints(block b) {$/;"	f	class:Model
post_before_scheduling_constraints	models/model.cpp	/^void Model::post_before_scheduling_constraints(block b) {$/;"	f	class:Model
post_before_scheduling_constraints_in_space	models/localmodel.cpp	/^void LocalModel::post_before_scheduling_constraints_in_space(Space& s) {$/;"	f	class:LocalModel
post_branch_issue_cycle_constraints	models/model.cpp	/^void Model::post_branch_issue_cycle_constraints(block b) {$/;"	f	class:Model
post_branchers	models/globalmodel.cpp	/^void GlobalModel::post_branchers(void) {$/;"	f	class:GlobalModel
post_branchers	models/localmodel.cpp	/^void LocalModel::post_branchers(char search) {$/;"	f	class:LocalModel
post_bypassing_constraints	models/model.cpp	/^void Model::post_bypassing_constraints(block b) {$/;"	f	class:Model
post_callee_saved_branchers	models/globalmodel.cpp	/^void GlobalModel::post_callee_saved_branchers(void) {$/;"	f	class:GlobalModel
post_callee_saved_symmetry_breaking_constraints	models/model.cpp	/^void Model::post_callee_saved_symmetry_breaking_constraints(block b) {$/;"	f	class:Model
post_cloriginal_branchers	models/divmodel.cpp	/^void DivModel::post_cloriginal_branchers(void) {$/;"	f	class:DivModel
post_clrandom_branchers	models/divmodel.cpp	/^void DivModel::post_clrandom_branchers(void) {$/;"	f	class:DivModel
post_cluster_connection_decision	models/globalmodel.cpp	/^void GlobalModel::post_cluster_connection_decision($/;"	f	class:GlobalModel
post_complete_branchers	models/globalmodel.cpp	/^void GlobalModel::post_complete_branchers(unsigned int s) {$/;"	f	class:GlobalModel
post_conditional_precedence_constraints	models/model.cpp	/^void Model::post_conditional_precedence_constraints(block b) {$/;"	f	class:Model
post_congruence_constraints	models/completemodel.cpp	/^void CompleteModel::post_congruence_constraints(void) {$/;"	f	class:CompleteModel
post_connected_operand_definition	models/model.cpp	/^void Model::post_connected_operand_definition(block b) {$/;"	f	class:Model
post_connected_users_constraints	models/model.cpp	/^void Model::post_connected_users_constraints(block b) {$/;"	f	class:Model
post_connection_lower_bound	models/globalmodel.cpp	/^post_connection_lower_bound(operand p, bool connect, block b, int lb) {$/;"	f	class:GlobalModel
post_conservative_branchers	models/localmodel.cpp	/^void LocalModel::post_conservative_branchers(void) {$/;"	f	class:LocalModel
post_constrain	models/decompdivmodel.cpp	/^void DecompDivModel::post_constrain(DecompDivModel* _b) {$/;"	f	class:DecompDivModel
post_copy_dominance_constraints	models/model.cpp	/^void Model::post_copy_dominance_constraints(block b) {$/;"	f	class:Model
post_copy_symmetry_breaking_constraints	models/model.cpp	/^void Model::post_copy_symmetry_breaking_constraints(block b) {$/;"	f	class:Model
post_core_constraints	models/relaxedmodel.cpp	/^void RelaxedModel::post_core_constraints(void) {$/;"	f	class:RelaxedModel
post_cost_definition	models/completemodel.cpp	/^void CompleteModel::post_cost_definition(void) {$/;"	f	class:CompleteModel
post_cost_definition	models/localmodel.cpp	/^void LocalModel::post_cost_definition(void) {$/;"	f	class:LocalModel
post_cost_definition	models/model.cpp	/^void Model::post_cost_definition(block b) {$/;"	f	class:Model
post_cost_domain_constraints	models/model.cpp	/^void Model::post_cost_domain_constraints(block b) {$/;"	f	class:Model
post_data_precedences_constraints	models/model.cpp	/^void Model::post_data_precedences_constraints(block b) {$/;"	f	class:Model
post_decision_variable_domain_definitions	models/completemodel.cpp	/^void CompleteModel::post_decision_variable_domain_definitions(void) {$/;"	f	class:CompleteModel
post_decision_variable_domain_definitions	models/localmodel.cpp	/^void LocalModel::post_decision_variable_domain_definitions(void) {$/;"	f	class:LocalModel
post_decision_variable_domain_definitions	models/model.cpp	/^void Model::post_decision_variable_domain_definitions(block b) {$/;"	f	class:Model
post_define_issue_cycle_constraints	models/model.cpp	/^void Model::post_define_issue_cycle_constraints(block b) {$/;"	f	class:Model
post_different_solution	models/globalmodel.cpp	/^void GlobalModel::post_different_solution(GlobalModel * g1, bool unsat) {$/;"	f	class:GlobalModel
post_diffregs_constraints	models/model.cpp	/^void Model::post_diffregs_constraints(block b) {$/;"	f	class:Model
post_difftemps_constraints	models/model.cpp	/^void Model::post_difftemps_constraints(block b) {$/;"	f	class:Model
post_disjoint_component_operand_constraints	models/model.cpp	/^void Model::post_disjoint_component_operand_constraints(block b) {$/;"	f	class:Model
post_disjoint_congruent_operand_constraints	models/model.cpp	/^void Model::post_disjoint_congruent_operand_constraints(block b) {$/;"	f	class:Model
post_disjoint_live_ranges_constraints	models/model.cpp	/^void Model::post_disjoint_live_ranges_constraints(block b) {$/;"	f	class:Model
post_disjoint_operand_congruence_constraints	models/globalmodel.cpp	/^void GlobalModel::post_disjoint_operand_congruence_constraints(void) {$/;"	f	class:GlobalModel
post_disjoint_operand_constraints	models/model.cpp	/^void Model::post_disjoint_operand_constraints(block b) {$/;"	f	class:Model
post_div_branchers	models/divmodel.cpp	/^void DivModel::post_div_branchers(void) {$/;"	f	class:DivModel
post_div_branchers	models/localdivmodel.cpp	/^void LocalDivModel::post_div_branchers(void) {$/;"	f	class:LocalDivModel
post_div_decomp_branchers	models/decompdivmodel.cpp	/^void DecompDivModel::post_div_decomp_branchers() {$/;"	f	class:DecompDivModel
post_diversification_br_diffs	models/divmodel.cpp	/^void DivModel::post_diversification_br_diffs(void) {$/;"	f	class:DivModel
post_diversification_channel	models/divmodel.cpp	/^void DivModel::post_diversification_channel(void) {$/;"	f	class:DivModel
post_diversification_constraints	models/divmodel.cpp	/^void DivModel::post_diversification_constraints(void) {$/;"	f	class:DivModel
post_diversification_constraints	models/localdivmodel.cpp	/^void LocalDivModel::post_diversification_constraints(void) {$/;"	f	class:LocalDivModel
post_diversification_diffs	models/divmodel.cpp	/^void DivModel::post_diversification_diffs(void) {$/;"	f	class:DivModel
post_diversification_diffs	models/localdivmodel.cpp	/^void LocalDivModel::post_diversification_diffs(void) {$/;"	f	class:LocalDivModel
post_diversification_hamming	models/divmodel.cpp	/^void DivModel::post_diversification_hamming(void) {$/;"	f	class:DivModel
post_diversification_hamming	models/localdivmodel.cpp	/^void LocalDivModel::post_diversification_hamming(void) {$/;"	f	class:LocalDivModel
post_diversification_reg_gadget	models/divmodel.cpp	/^void DivModel::post_diversification_reg_gadget(void) {$/;"	f	class:DivModel
post_diversification_reghamming	models/divmodel.cpp	/^void DivModel::post_diversification_reghamming(void) {$/;"	f	class:DivModel
post_dominates_constraints	models/model.cpp	/^void Model::post_dominates_constraints(block b) {$/;"	f	class:Model
post_effective_callee_saved_spilling	models/globalmodel.cpp	/^void GlobalModel::post_effective_callee_saved_spilling(operation o) {$/;"	f	class:GlobalModel
post_effective_copy_constraints	models/model.cpp	/^void Model::post_effective_copy_constraints(block b) {$/;"	f	class:Model
post_extensional_constraints	models/model.cpp	/^void Model::post_extensional_constraints(block b) {$/;"	f	class:Model
post_fail_first_branchers	models/localmodel.cpp	/^void LocalModel::post_fail_first_branchers(void) {$/;"	f	class:LocalModel
post_first_k_copies_constraints	models/model.cpp	/^void Model::post_first_k_copies_constraints(block b) {$/;"	f	class:Model
post_fixed_precedences_constraints	models/model.cpp	/^void Model::post_fixed_precedences_constraints(block b) {$/;"	f	class:Model
post_global_cost_definition	models/completemodel.cpp	/^void CompleteModel::post_global_cost_definition(void) {$/;"	f	class:CompleteModel
post_global_cost_domain_constraints	models/globalmodel.cpp	/^void GlobalModel::post_global_cost_domain_constraints() {$/;"	f	class:GlobalModel
post_global_cycles	models/divmodel.cpp	/^void DivModel::post_global_cycles(void) {$/;"	f	class:DivModel
post_global_operand_connection_constraints	models/completemodel.cpp	/^void CompleteModel::post_global_operand_connection_constraints(void) {$/;"	f	class:CompleteModel
post_global_shaving_limit	models/options.hpp	/^  double post_global_shaving_limit(void) const {return _post_global_shaving_limit.value();}$/;"	f	class:ModelOptions
post_improved_model_constraints	models/completemodel.cpp	/^void CompleteModel::post_improved_model_constraints(void) {$/;"	f	class:CompleteModel
post_improved_model_constraints	models/globalmodel.cpp	/^void GlobalModel::post_improved_model_constraints(void) {$/;"	f	class:GlobalModel
post_improved_model_constraints	models/localmodel.cpp	/^void LocalModel::post_improved_model_constraints(void) {$/;"	f	class:LocalModel
post_improved_model_constraints	models/model.cpp	/^void Model::post_improved_model_constraints(block b) {$/;"	f	class:Model
post_inactive_operation	models/globalmodel.cpp	/^void GlobalModel::post_inactive_operation(operation o) {$/;"	f	class:GlobalModel
post_initial_precedence_constraints	models/model.cpp	/^void Model::post_initial_precedence_constraints(block b) {$/;"	f	class:Model
post_input_solution_constrain	models/maxdivmodel.cpp	/^void MaxDivModel::post_input_solution_constrain() {$/;"	f	class:MaxDivModel
post_instruction_assignment_constraints	models/model.cpp	/^void Model::post_instruction_assignment_constraints($/;"	f	class:Model
post_instruction_constraints	models/relaxedmodel.cpp	/^void RelaxedModel::post_instruction_constraints(void) {$/;"	f	class:RelaxedModel
post_instruction_domains	models/model.cpp	/^void Model::post_instruction_domains(block b) {$/;"	f	class:Model
post_instruction_nogood	models/globalmodel.cpp	/^post_instruction_nogood(int cost, InstructionAssignment forbidden) {$/;"	f	class:GlobalModel
post_instruction_operation_branching	models/relaxedmodel.cpp	/^void RelaxedModel::post_instruction_operation_branching(vector<operation> O) {$/;"	f	class:RelaxedModel
post_irreflexive_precedence_constraints	models/model.cpp	/^void Model::post_irreflexive_precedence_constraints(block b) {$/;"	f	class:Model
post_issue_cycle_domains	models/model.cpp	/^void Model::post_issue_cycle_domains(block b) {$/;"	f	class:Model
post_kill_issue_cycle_constraints	models/model.cpp	/^void Model::post_kill_issue_cycle_constraints(block b) {$/;"	f	class:Model
post_killed_temporary_precedence_constraints	models/model.cpp	/^void Model::post_killed_temporary_precedence_constraints(block b) {$/;"	f	class:Model
post_killer_operand_constraints	models/model.cpp	/^void Model::post_killer_operand_constraints(block b) {$/;"	f	class:Model
post_levenshtein	models/divmodel.cpp	/^void DivModel::post_levenshtein(const DivModel & b)$/;"	f	class:DivModel
post_levenshtein	models/maxdivmodel.cpp	/^void MaxDivModel::post_levenshtein(void)$/;"	f	class:MaxDivModel
post_levenshtein_set	models/divmodel.cpp	/^void DivModel::post_levenshtein_set(const DivModel & b)$/;"	f	class:DivModel
post_levenshtein_set	models/maxdivmodel.cpp	/^void MaxDivModel::post_levenshtein_set(void)$/;"	f	class:MaxDivModel
post_live_duration_definition	models/model.cpp	/^void Model::post_live_duration_definition(block b) {$/;"	f	class:Model
post_live_end_definition	models/model.cpp	/^void Model::post_live_end_definition(block b) {$/;"	f	class:Model
post_live_start_definition	models/model.cpp	/^void Model::post_live_start_definition(block b) {$/;"	f	class:Model
post_local_congruence_constraints	models/model.cpp	/^void Model::post_local_congruence_constraints(block b) {$/;"	f	class:Model
post_local_solution_cost	models/globalmodel.cpp	/^void GlobalModel::post_local_solution_cost(LocalModel * l) {$/;"	f	class:GlobalModel
post_lower_bound	models/completemodel.cpp	/^void CompleteModel::post_lower_bound(vector<int> mincost) {$/;"	f	class:CompleteModel
post_lower_bounds	models/globalmodel.cpp	/^post_lower_bounds(operation o1, operation o2, block b, int lb) {$/;"	f	class:GlobalModel
post_mandatory_reuse_constraints	models/model.cpp	/^void Model::post_mandatory_reuse_constraints(block b) {$/;"	f	class:Model
post_maximum_temporary_usage_constraints	models/model.cpp	/^void Model::post_maximum_temporary_usage_constraints(block b) {$/;"	f	class:Model
post_minimum_cost_branchers	models/localmodel.cpp	/^void LocalModel::post_minimum_cost_branchers(void) {$/;"	f	class:LocalModel
post_minimum_number_of_optional_operations_constraints	models/model.cpp	/^void Model::post_minimum_number_of_optional_operations_constraints(block b) {$/;"	f	class:Model
post_minimum_temporary_duration_constraints	models/model.cpp	/^void Model::post_minimum_temporary_duration_constraints(block b) {$/;"	f	class:Model
post_nogood_constraints	models/model.cpp	/^void Model::post_nogood_constraints(block b) {$/;"	f	class:Model
post_non_decreasing_temporary_usage_constraints	models/model.cpp	/^void Model::post_non_decreasing_temporary_usage_constraints(block b) {$/;"	f	class:Model
post_null_register_constraints	models/model.cpp	/^void Model::post_null_register_constraints(block b) {$/;"	f	class:Model
post_operand_allocation_definition	models/globalmodel.cpp	/^void GlobalModel::post_operand_allocation_definition(void) {$/;"	f	class:GlobalModel
post_operand_allocation_set_definition	models/globalmodel.cpp	/^void GlobalModel::post_operand_allocation_set_definition(void) {$/;"	f	class:GlobalModel
post_operand_latency_definition	models/model.cpp	/^void Model::post_operand_latency_definition(block b) {$/;"	f	class:Model
post_operand_register_definition	models/model.cpp	/^void Model::post_operand_register_definition(block b) {$/;"	f	class:Model
post_operand_symmetry_breaking_constraints	models/localmodel.cpp	/^void LocalModel::post_operand_symmetry_breaking_constraints(block b) {$/;"	f	class:LocalModel
post_operand_temporary_branching	models/relaxedmodel.cpp	/^void RelaxedModel::post_operand_temporary_branching(vector<operand> P) {$/;"	f	class:RelaxedModel
post_packing_constraints	models/model.cpp	/^void Model::post_packing_constraints(block b) {$/;"	f	class:Model
post_partially_ordered_live_range_constraints	models/model.cpp	/^void Model::post_partially_ordered_live_range_constraints(block b) {$/;"	f	class:Model
post_preassignment_constraints	models/model.cpp	/^void Model::post_preassignment_constraints(block b) {$/;"	f	class:Model
post_precedence_definition	models/model.cpp	/^void Model::post_precedence_definition(block b) {$/;"	f	class:Model
post_prescheduling_constraints	models/model.cpp	/^void Model::post_prescheduling_constraints(block b) {$/;"	f	class:Model
post_preserved_space_capacity_constraints	models/globalmodel.cpp	/^void GlobalModel::post_preserved_space_capacity_constraints(void) {$/;"	f	class:GlobalModel
post_presolver_constraints	models/completemodel.cpp	/^void CompleteModel::post_presolver_constraints(void) {$/;"	f	class:CompleteModel
post_presolver_constraints	models/localmodel.cpp	/^void LocalModel::post_presolver_constraints(void) {$/;"	f	class:LocalModel
post_presolver_constraints	models/model.cpp	/^void Model::post_presolver_constraints(block b) {$/;"	f	class:Model
post_processor_resources_constraints	models/model.cpp	/^void Model::post_processor_resources_constraints(block b) {$/;"	f	class:Model
post_random_branchers	models/divmodel.cpp	/^void DivModel::post_random_branchers(void) {$/;"	f	class:DivModel
post_redefined_operand_constraints	models/model.cpp	/^void Model::post_redefined_operand_constraints(block b) {$/;"	f	class:Model
post_register_class_constraints	models/model.cpp	/^void Model::post_register_class_constraints(block b) {$/;"	f	class:Model
post_register_symmetry_breaking_constraints	models/globalmodel.cpp	/^void GlobalModel::post_register_symmetry_breaking_constraints(void) {$/;"	f	class:GlobalModel
post_register_symmetry_breaking_constraints	models/localmodel.cpp	/^void LocalModel::post_register_symmetry_breaking_constraints(block b) {$/;"	f	class:LocalModel
post_relaxation_nogood	models/globalmodel.cpp	/^post_relaxation_nogood(operation o1, operation o2) {$/;"	f	class:GlobalModel
post_relaxed_decision_variable_domain_definitions	models/relaxedmodel.cpp	/^void RelaxedModel::post_relaxed_decision_variable_domain_definitions(void) {$/;"	f	class:RelaxedModel
post_relaxed_nogood_constraints	models/relaxedmodel.cpp	/^void RelaxedModel::post_relaxed_nogood_constraints(void) {$/;"	f	class:RelaxedModel
post_relaxed_secondary_variable_definitions	models/relaxedmodel.cpp	/^void RelaxedModel::post_relaxed_secondary_variable_definitions(void) {$/;"	f	class:RelaxedModel
post_routing_branchers	models/localmodel.cpp	/^void LocalModel::post_routing_branchers(bool aggressive) {$/;"	f	class:LocalModel
post_secondary_variable_definitions	models/completemodel.cpp	/^void CompleteModel::post_secondary_variable_definitions(void) {$/;"	f	class:CompleteModel
post_secondary_variable_definitions	models/globalmodel.cpp	/^void GlobalModel::post_secondary_variable_definitions(void) {$/;"	f	class:GlobalModel
post_secondary_variable_definitions	models/localmodel.cpp	/^void LocalModel::post_secondary_variable_definitions(void) {$/;"	f	class:LocalModel
post_secondary_variable_definitions	models/model.cpp	/^void Model::post_secondary_variable_definitions(block b) {$/;"	f	class:Model
post_slack_balancing_constraints	models/completemodel.cpp	/^void CompleteModel::post_slack_balancing_constraints(void) {$/;"	f	class:CompleteModel
post_slack_functional_constraints	models/completemodel.cpp	/^void CompleteModel::post_slack_functional_constraints(void) {$/;"	f	class:CompleteModel
post_solution_brancher	models/divmodel.cpp	/^void DivModel::post_solution_brancher(void) {$/;"	f	class:DivModel
post_space_capacity_constraints	models/model.cpp	/^void Model::post_space_capacity_constraints(block b) {$/;"	f	class:Model
post_standalone_constraints	models/completemodel.cpp	/^void CompleteModel::post_standalone_constraints(void) {$/;"	f	class:CompleteModel
post_temporary_domains	models/model.cpp	/^void Model::post_temporary_domains(block b) {$/;"	f	class:Model
post_temporary_interference_constraints	models/model.cpp	/^void Model::post_temporary_interference_constraints(block b) {$/;"	f	class:Model
post_temporary_symmetry_breaking_constraints	models/model.cpp	/^void Model::post_temporary_symmetry_breaking_constraints(block b) {$/;"	f	class:Model
post_temporary_use_latency_definition	models/model.cpp	/^void Model::post_temporary_use_latency_definition(block b) {$/;"	f	class:Model
post_temporary_users_definition	models/model.cpp	/^void Model::post_temporary_users_definition(block b) {$/;"	f	class:Model
post_temporary_uses_definition	models/model.cpp	/^void Model::post_temporary_uses_definition(block b) {$/;"	f	class:Model
post_transitive_precedence_constraints	models/model.cpp	/^void Model::post_transitive_precedence_constraints(block b) {$/;"	f	class:Model
post_trivial_branchers	models/localmodel.cpp	/^void LocalModel::post_trivial_branchers(void) {$/;"	f	class:LocalModel
post_trivial_branchers	models/simplemodel.cpp	/^void SimpleModel::post_trivial_branchers(void) {$/;"	f	class:SimpleModel
post_ultimate_source_constraints	models/model.cpp	/^void Model::post_ultimate_source_constraints(block b) {$/;"	f	class:Model
post_upper_bound	models/completemodel.cpp	/^void CompleteModel::post_upper_bound(vector<int> maxcost) {$/;"	f	class:CompleteModel
post_use_temporary_definition	models/model.cpp	/^void Model::post_use_temporary_definition(block b) {$/;"	f	class:Model
post_wcet_constraints	models/model.cpp	/^void Model::post_wcet_constraints(block b) {$/;"	f	class:Model
pre	presolver/auxiliary.cpp	/^string pre() { return "[pre]\\t "; }$/;"	f
pre	procedures/globalprocedures.cpp	/^string pre() { return "[pre]\\t "; }$/;"	f
preassign	models/parameters.hpp	/^  vector<vector<int> > preassign;$/;"	m	class:Parameters
preassigned	models/parameters.hpp	/^  vector<bool> preassigned;$/;"	m	class:Parameters
precedenceGraph	inspectors/precedenceinspector.cpp	/^PrecedenceGraph PrecedenceInspector::precedenceGraph(const LocalModel& m0, block b) {$/;"	f	class:PrecedenceInspector
precedence_set	presolver/precedences.hpp	/^typedef vector<PresolverPrecedence> precedence_set;$/;"	t
precedences	models/parameters.hpp	/^  vector<UnisonConstraintExpr> precedences;$/;"	m	class:Parameters
precedences2	models/parameters.hpp	/^  vector<UnisonConstraintExpr> precedences2;$/;"	m	class:Parameters
precision_	third-party/jsoncpp/json_writer.cpp	/^  unsigned int precision_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
precs	models/parameters.hpp	/^  vector<vector<operation> > precs;$/;"	m	class:Parameters
prescheduled	models/parameters.hpp	/^  vector<vector<int> > prescheduled;$/;"	m	class:Parameters
presolve	presolver/before_presolver.cpp	/^void BeforePresolver::presolve(Parameters& input, vector<presolver_conj>& Nogoods) {$/;"	f	class:BeforePresolver
presolve	presolver/before_presolver.cpp	/^void BeforePresolver::presolve(vector<presolver_conj>& Nogoods) {$/;"	f	class:BeforePresolver
presolve	presolver/presolve.cpp	/^void presolve(Parameters & input, PresolverOptions & options) {$/;"	f
presolve_across	presolver/across.cpp	/^void presolve_across(PresolverAsserts& PA,$/;"	f
presolve_effective_callee_saved_spilling	procedures/globalprocedures.cpp	/^void presolve_effective_callee_saved_spilling(GlobalModel * base) {$/;"	f
presolve_global_activation_shaving	procedures/globalprocedures.cpp	/^void presolve_global_activation_shaving(GlobalModel * base) {$/;"	f
presolve_global_cluster_impact	procedures/globalprocedures.cpp	/^void presolve_global_cluster_impact($/;"	f
presolve_global_cluster_impact	procedures/globalprocedures.cpp	/^void presolve_global_cluster_impact(GlobalModel * base, GIST_OPTIONS * lo) {$/;"	f
presolve_global_shaving	procedures/globalprocedures.cpp	/^void presolve_global_shaving(GlobalModel * base) {$/;"	f
presolve_minimum_consumption	procedures/globalprocedures.cpp	/^void presolve_minimum_consumption(GlobalModel * base) {$/;"	f
presolve_relaxation	procedures/globalprocedures.cpp	/^void presolve_relaxation(GlobalModel * base, GIST_OPTIONS * lo) {$/;"	f
presolve_shaving	procedures/globalprocedures.cpp	/^void presolve_shaving(GlobalModel * base) {$/;"	f
presolver_conj	common/definitions.hpp	/^typedef vector<UnisonConstraintExpr> presolver_conj;$/;"	t
presolver_disj	common/definitions.hpp	/^typedef vector<presolver_conj> presolver_disj;$/;"	t
presolver_time	diversifier.cpp	/^  int presolver_time;$/;"	m	class:ResultData	file:
presolver_time	diversifier.cpp	/^  int presolver_time;$/;"	m	class:ResultDivData	file:
presolver_time	models/solver-parameters.hpp	/^  int presolver_time;$/;"	m	class:SolverParameters
presolver_time	solver.cpp	/^  int presolver_time;$/;"	m	class:ResultData	file:
presolving_time	diversifier.cpp	/^  int presolving_time;$/;"	m	class:ResultData	file:
presolving_time	diversifier.cpp	/^  int presolving_time;$/;"	m	class:ResultDivData	file:
presolving_time	solver.cpp	/^  int presolving_time;$/;"	m	class:ResultData	file:
pressure	models/model.cpp	/^double Model::pressure(operand p, register_class rc) const {$/;"	f	class:Model
pressure_balance	models/model.cpp	/^double Model::pressure_balance(operation o) const {$/;"	f	class:Model
print	branchers/boolsolutionbrancher.cpp	/^  virtual void print(const Space&, const Choice& c, unsigned int a,$/;"	f	class:BoolSolutionBrancher
print	branchers/pressureschedulingbrancher.cpp	/^  void print(const Space& home, const Gecode::Choice& ch,$/;"	f	class:PressureSchedulingBrancher
print	branchers/routingbrancher.cpp	/^  void print(const Space& home, const Gecode::Choice& ch,$/;"	f	class:RoutingBrancher
print	branchers/solutionbrancher.cpp	/^  virtual void print(const Space&, const Choice& c, unsigned int a,$/;"	f	class:SolutionBrancher
print	inspectors/alignmentpartitioninspector.cpp	/^void GlobalAlignmentPartitionInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:GlobalAlignmentPartitionInspector
print	inspectors/allocationinspector.cpp	/^void GlobalAllocationInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:GlobalAllocationInspector
print	inspectors/allocationinspector.cpp	/^void LocalAllocationInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:LocalAllocationInspector
print	inspectors/congruenceallocationinspector.cpp	/^void GlobalCongruenceAllocationInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:GlobalCongruenceAllocationInspector
print	inspectors/operandallocationinspector.cpp	/^void GlobalOperandAllocationInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:GlobalOperandAllocationInspector
print	inspectors/operandlatencyinspector.cpp	/^void GlobalOperandLatencyInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:GlobalOperandLatencyInspector
print	inspectors/operandlatencyinspector.cpp	/^void LocalOperandLatencyInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:LocalOperandLatencyInspector
print	inspectors/precedencematrixinspector.cpp	/^void LocalPrecedenceMatrixInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:LocalPrecedenceMatrixInspector
print	inspectors/selectioninspector.cpp	/^void GlobalSelectionInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:GlobalSelectionInspector
print	inspectors/selectioninspector.cpp	/^void LocalSelectionInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:LocalSelectionInspector
print	inspectors/usersinspector.cpp	/^void GlobalUsersInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:GlobalUsersInspector
print	inspectors/usersinspector.cpp	/^void LocalUsersInspector::print(const Model& s, ostream & pOs) {$/;"	f	class:LocalUsersInspector
print	models/completemodel.cpp	/^void CompleteModel::print(ostream & pOs) const {$/;"	f	class:CompleteModel
print	models/localmodel.cpp	/^void LocalModel::print(ostream & pOs) const {$/;"	f	class:LocalModel
print	models/model.cpp	/^void Model::print(ostream & pOs, block b) const {$/;"	f	class:Model
print_activation_decision	branchers/printers.cpp	/^void print_activation_decision(const Space &s, const Brancher&,$/;"	f
print_active_decision	branchers/printers.cpp	/^void print_active_decision(const Space &s, const Brancher& bh,$/;"	f
print_alignment_decision	branchers/printers.cpp	/^void print_alignment_decision(const Space &s, const Brancher&,$/;"	f
print_allocation_decision	branchers/printers.cpp	/^void print_allocation_decision(const Space &s, const Brancher&,$/;"	f
print_assignment_decision	branchers/printers.cpp	/^void print_assignment_decision(const Space &s, const Brancher&,$/;"	f
print_cluster_connection_decision	branchers/printers.cpp	/^void print_cluster_connection_decision(const Space &s, const Brancher&,$/;"	f
print_cluster_disconnection_decision	branchers/printers.cpp	/^void print_cluster_disconnection_decision(const Space &s, const Brancher&,$/;"	f
print_cost_decision	branchers/printers.cpp	/^void print_cost_decision(const Space &s, const Brancher&,$/;"	f
print_cycle_decision	branchers/printers.cpp	/^void print_cycle_decision(const Space &s, const Brancher&,$/;"	f
print_global_cost_decision	branchers/printers.cpp	/^void print_global_cost_decision(const Space &, const Brancher&,$/;"	f
print_global_cycle_decision	branchers/printers.cpp	/^void print_global_cycle_decision(const Space &, const Brancher&,$/;"	f
print_global_inactive_decision	branchers/printers.cpp	/^void print_global_inactive_decision(const Space &, const Brancher&,$/;"	f
print_global_instruction_decision	branchers/printers.cpp	/^void print_global_instruction_decision(const Space &s, const Brancher&,$/;"	f
print_global_register_decision	branchers/printers.cpp	/^void print_global_register_decision(const Space &s, const Brancher&,$/;"	f
print_global_temporary_decision	branchers/printers.cpp	/^void print_global_temporary_decision(const Space &s, const Brancher&,$/;"	f
print_header	inspectors/allocationinspector.cpp	/^void AllocationInspector::print_header(const Model& m, ostream & pOs) {$/;"	f	class:AllocationInspector
print_header	inspectors/operandallocationinspector.cpp	/^void OperandAllocationInspector::print_header(const Model& m, ostream & pOs) {$/;"	f	class:OperandAllocationInspector
print_header	inspectors/precedencematrixinspector.cpp	/^void PrecedenceMatrixInspector::print_header(const LocalModel& m, int w, ostream & pOs) {$/;"	f	class:PrecedenceMatrixInspector
print_hinted_assignment_decision	branchers/printers.cpp	/^void print_hinted_assignment_decision(const Space &s, const Brancher&,$/;"	f
print_hinted_avoidance_decision	branchers/printers.cpp	/^void print_hinted_avoidance_decision(const Space &s, const Brancher&,$/;"	f
print_inactive_decision	branchers/printers.cpp	/^void print_inactive_decision(const Space &s, const Brancher&,$/;"	f
print_instruction_decision	branchers/printers.cpp	/^void print_instruction_decision(const Space &s, const Brancher&,$/;"	f
print_register_decision	branchers/printers.cpp	/^void print_register_decision(const Space &s, const Brancher&,$/;"	f
print_slack_assignment_decision	branchers/printers.cpp	/^void print_slack_assignment_decision(const Space &s, const Brancher&,$/;"	f
print_temporary_decision	branchers/printers.cpp	/^void print_temporary_decision(const Space &s, const Brancher&,$/;"	f
printb	inspectors/allocationinspector.cpp	/^void AllocationInspector::printb(const Model& m, ostream & pOs, block b) {$/;"	f	class:AllocationInspector
printb	inspectors/operandallocationinspector.cpp	/^void OperandAllocationInspector::printb(const Model& s, ostream & pOs, block b) {$/;"	f	class:OperandAllocationInspector
printb	inspectors/operandlatencyinspector.cpp	/^void OperandLatencyInspector::printb(const Model& m, ostream & pOs, block b) {$/;"	f	class:OperandLatencyInspector
printb	inspectors/precedencematrixinspector.cpp	/^void PrecedenceMatrixInspector::printb(const LocalModel& m0, ostream & pOs) {$/;"	f	class:PrecedenceMatrixInspector
printb	inspectors/selectioninspector.cpp	/^void SelectionInspector::printb(const Model& m, ostream & pOs, block b) {$/;"	f	class:SelectionInspector
printb	inspectors/usersinspector.cpp	/^void UsersInspector::printb(const Model& m, ostream & pOs, block b) {$/;"	f	class:UsersInspector
produce_dzn	presolver.cpp	/^string produce_dzn(Parameters &input) {$/;"	f
produce_json	diversifier.cpp	/^string produce_json(const ResultData& rd,$/;"	f
produce_json	diversifier.cpp	/^string produce_json(const ResultDivData& rd,$/;"	f
produce_json	presolver.cpp	/^string produce_json(Parameters &input, int presolver_time)$/;"	f
produce_json	solver.cpp	/^string produce_json(const ResultData& rd,$/;"	f
product	presolver/digraph.cpp	/^Digraph Digraph::product(Digraph& B) {$/;"	f	class:Digraph
propagate	procedures/presolverprocedures.cpp	/^bool propagate(Parameters& input) {$/;"	f
proven	diversifier.cpp	/^  bool proven;$/;"	m	class:ResultData	file:
proven	diversifier.cpp	/^  bool proven;$/;"	m	class:ResultDivData	file:
proven	models/solver-parameters.hpp	/^  bool proven;$/;"	m	class:SolverParameters
proven	solver.cpp	/^  bool proven;$/;"	m	class:ResultData	file:
ps	branchers/routingbrancher.cpp	/^  const vector<operand> ps;$/;"	m	class:RoutingBrancher	file:
ps	common/definitions.hpp	/^  vector<operand> ps;$/;"	m	class:PresolverCopyTmpTable
pushError	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::pushError(const Value& value, const JSONCPP_STRING& message) {$/;"	f	class:Json::OurReader
pushError	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::pushError(const Value& value, const JSONCPP_STRING& message, const Value& extra) {$/;"	f	class:Json::OurReader
pushError	third-party/jsoncpp/json_reader.cpp	/^bool Reader::pushError(const Value& value, const JSONCPP_STRING& message) {$/;"	f	class:Json::Reader
pushError	third-party/jsoncpp/json_reader.cpp	/^bool Reader::pushError(const Value& value, const JSONCPP_STRING& message, const Value& extra) {$/;"	f	class:Json::Reader
pushValue	third-party/jsoncpp/json_writer.cpp	/^void BuiltStyledStreamWriter::pushValue(JSONCPP_STRING const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
pushValue	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::pushValue(const JSONCPP_STRING& value) {$/;"	f	class:Json::StyledStreamWriter
pushValue	third-party/jsoncpp/json_writer.cpp	/^void StyledWriter::pushValue(const JSONCPP_STRING& value) {$/;"	f	class:Json::StyledWriter
q	common/definitions.hpp	/^  operand p, q;$/;"	m	class:PresolverBefore
q	common/definitions.hpp	/^  operand p, q;$/;"	m	class:PresolverBeforeJSON
q	common/definitions.hpp	/^  operand q;$/;"	m	class:PresolverInstrCond
qt_meta_data_ModelGraphicsView	moc_modelgraphicsview.cpp	/^static const uint qt_meta_data_ModelGraphicsView[] = {$/;"	v	file:
qt_meta_stringdata_ModelGraphicsView	moc_modelgraphicsview.cpp	/^static const char qt_meta_stringdata_ModelGraphicsView[] = {$/;"	v	file:
qt_metacall	moc_modelgraphicsview.cpp	/^int ModelGraphicsView::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ModelGraphicsView
qt_metacast	moc_modelgraphicsview.cpp	/^void *ModelGraphicsView::qt_metacast(const char *_clname)$/;"	f	class:ModelGraphicsView
qt_static_metacall	moc_modelgraphicsview.cpp	/^void ModelGraphicsView::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ModelGraphicsView
quasi_adjacent	models/parameters.hpp	/^  vector<vector<operand> > quasi_adjacent;$/;"	m	class:Parameters
quasi_adjacent	presolver/quasi_adjacent.cpp	/^void quasi_adjacent(Parameters& input) {$/;"	f
r	common/definitions.cpp	/^Temporand Temporand::r(int id){$/;"	f	class:Temporand
r	inspectors/resourceconsumptioninspector.hpp	/^  static const resource r = 0; \/\/ TODO: let the user choose!$/;"	m	class:ResourceConsumptionInspector
r	models/model.hpp	/^  IntVar r(temporary t) const { return v_r[temp(t)]; }$/;"	f	class:Model
ra_class	models/parameters.hpp	/^  vector<enum RegisterAtomClass> ra_class;$/;"	m	class:Parameters
range	models/parameters.hpp	/^  vector<vector<register_atom> > range;$/;"	m	class:Parameters
range_size	common/util.hpp	/^unsigned int range_size(const T & r) {$/;"	f
rank	presolver/disjoint_set.hpp	/^  map<T,int> rank;$/;"	m	class:Disjoint_set
ras	common/definitions.hpp	/^  vector<register_atom> ras;$/;"	m	class:PresolverAcross
ras	common/definitions.hpp	/^  vector<register_atom> ras;$/;"	m	class:PresolverAcrossJSON
ras	common/definitions.hpp	/^  vector<register_atom> ras;$/;"	m	class:PresolverSetAcross
rclass	common/definitions.hpp	/^  vector<register_class> rclass;$/;"	m	class:PresolverInsnClass
rclass	models/parameters.hpp	/^  vector<vector<vector<register_class> > > rclass;$/;"	m	class:Parameters
reachables	presolver/digraph.cpp	/^vector<vertex> Digraph::reachables(const vertex v) {$/;"	f	class:Digraph
readArray	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readArray(Token& tokenStart) {$/;"	f	class:Json::OurReader
readArray	third-party/jsoncpp/json_reader.cpp	/^bool Reader::readArray(Token& tokenStart) {$/;"	f	class:Json::Reader
readCStyleComment	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readCStyleComment() {$/;"	f	class:Json::OurReader
readCStyleComment	third-party/jsoncpp/json_reader.cpp	/^bool Reader::readCStyleComment() {$/;"	f	class:Json::Reader
readComment	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readComment() {$/;"	f	class:Json::OurReader
readComment	third-party/jsoncpp/json_reader.cpp	/^bool Reader::readComment() {$/;"	f	class:Json::Reader
readCppStyleComment	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readCppStyleComment() {$/;"	f	class:Json::OurReader
readCppStyleComment	third-party/jsoncpp/json_reader.cpp	/^bool Reader::readCppStyleComment() {$/;"	f	class:Json::Reader
readNumber	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readNumber(bool checkInf) {$/;"	f	class:Json::OurReader
readNumber	third-party/jsoncpp/json_reader.cpp	/^void Reader::readNumber() {$/;"	f	class:Json::Reader
readObject	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readObject(Token& tokenStart) {$/;"	f	class:Json::OurReader
readObject	third-party/jsoncpp/json_reader.cpp	/^bool Reader::readObject(Token& tokenStart) {$/;"	f	class:Json::Reader
readString	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readString() {$/;"	f	class:Json::OurReader
readString	third-party/jsoncpp/json_reader.cpp	/^bool Reader::readString() {$/;"	f	class:Json::Reader
readStringSingleQuote	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readStringSingleQuote() {$/;"	f	class:Json::OurReader
readToken	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readToken(Token& token) {$/;"	f	class:Json::OurReader
readToken	third-party/jsoncpp/json_reader.cpp	/^bool Reader::readToken(Token& token) {$/;"	f	class:Json::Reader
readValue	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::readValue() {$/;"	f	class:Json::OurReader
readValue	third-party/jsoncpp/json_reader.cpp	/^bool Reader::readValue() {$/;"	f	class:Json::Reader
reader_	third-party/jsoncpp/json_reader.cpp	/^  OurReader reader_;$/;"	m	class:Json::OurCharReader	file:
ready	branchers/filters.cpp	/^bool ready(const Space& s, IntVar c, int oi) {$/;"	f
realValue	third-party/jsoncpp/json/value.h	/^  realValue,     \/\/\/< double value$/;"	e	enum:Json::ValueType
real_	third-party/jsoncpp/json/value.h	/^    double real_;$/;"	m	union:Json::Value::ValueHolder
real_operations	models/divmodel.hpp	/^  vector<operation> real_operations;$/;"	m	class:DivModel
real_temps	models/parameters.hpp	/^  vector<vector<temporary> > real_temps;$/;"	m	class:Parameters
rebind	third-party/jsoncpp/json/allocator.h	/^		template<typename U> struct rebind { using other = SecureAllocator<U>; };$/;"	s	class:Json::SecureAllocator
recoverFromError	third-party/jsoncpp/json_reader.cpp	/^bool OurReader::recoverFromError(TokenType skipUntilToken) {$/;"	f	class:Json::OurReader
recoverFromError	third-party/jsoncpp/json_reader.cpp	/^bool Reader::recoverFromError(TokenType skipUntilToken) {$/;"	f	class:Json::Reader
rect	inspectors/dot.hpp	/^  QRectF rect;$/;"	m	class:DotNode
rects	inspectors/dot.hpp	/^  vector<QRectF> rects;$/;"	m	class:DotNode
redefined	models/parameters.hpp	/^  vector<vector<pair<operand, operand> > > redefined;$/;"	m	class:Parameters
redefined_operand_nogoods	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::redefined_operand_nogoods(vector<presolver_conj>& Nogoods) {$/;"	f	class:InfeasiblePresolver
reduction	presolver/digraph.cpp	/^Digraph Digraph::reduction() {$/;"	f	class:Digraph
reference	third-party/jsoncpp/json/value.h	/^  typedef Value& reference;$/;"	t	class:Json::ValueIterator
reference	third-party/jsoncpp/json/value.h	/^  typedef const Value& reference;$/;"	t	class:Json::ValueConstIterator
regdomain_nogoods	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::regdomain_nogoods(vector<presolver_conj>& Nogoods) {$/;"	f	class:InfeasiblePresolver
reghamm	models/divmodel.hpp	/^  IntVar reghamm(operand p) const {return v_reghamm[p]; }$/;"	f	class:DivModel
region_finishers	presolver/precedences.cpp	/^vector<operation> region_finishers(Digraph& R,$/;"	f
region_finishers_rec	presolver/precedences.cpp	/^void region_finishers_rec(vector<operation>& In,$/;"	f
regions	presolver/presolver-options.hpp	/^  bool regions(void) const {return _regions.value();}$/;"	f	class:PresolverOptions
register_atom	common/definitions.hpp	/^typedef int register_atom;$/;"	t
register_class	common/definitions.hpp	/^typedef int register_class;$/;"	t
register_space	common/definitions.hpp	/^typedef int register_space;$/;"	t
registers	models/solver-parameters.hpp	/^  vector<int> registers;$/;"	m	class:SolverParameters
regular	models/parameters.hpp	/^  vector<congruence> regular;$/;"	m	class:Parameters
rejectDupKeys_	third-party/jsoncpp/json_reader.cpp	/^  bool rejectDupKeys_;$/;"	m	class:Json::OurFeatures	file:
related_operands	models/parameters.hpp	/^  vector<set<operand> > related_operands;$/;"	m	class:Parameters
relaxed_adhoc_constraint_var	models/relaxedmodel.cpp	/^BoolVar RelaxedModel::relaxed_adhoc_constraint_var(UnisonConstraintExpr & e) {$/;"	f	class:RelaxedModel
releasePrefixedStringValue	third-party/jsoncpp/json_value.cpp	/^static inline void releasePrefixedStringValue(char* value) {$/;"	f	namespace:Json
releaseStringValue	third-party/jsoncpp/json_value.cpp	/^static inline void releaseStringValue(char* value, unsigned length) {$/;"	f	namespace:Json
releaseStringValue	third-party/jsoncpp/json_value.cpp	/^static inline void releaseStringValue(char* value, unsigned) {$/;"	f	namespace:Json
remat	models/parameters.hpp	/^  map<operand, set<operation> > remat;$/;"	m	class:Parameters
remat	presolver/presolver_asserts.hpp	/^  vector<temporary> remat;$/;"	m	class:PresolverAsserts
removeIndex	third-party/jsoncpp/json_value.cpp	/^bool Value::removeIndex(ArrayIndex index, Value* removed) {$/;"	f	class:Json::Value
removeMember	third-party/jsoncpp/json_value.cpp	/^Value Value::removeMember(const JSONCPP_STRING& key)$/;"	f	class:Json::Value
removeMember	third-party/jsoncpp/json_value.cpp	/^Value Value::removeMember(const char* key)$/;"	f	class:Json::Value
removeMember	third-party/jsoncpp/json_value.cpp	/^bool Value::removeMember(JSONCPP_STRING const& key, Value* removed)$/;"	f	class:Json::Value
removeMember	third-party/jsoncpp/json_value.cpp	/^bool Value::removeMember(const char* key, Value* removed)$/;"	f	class:Json::Value
removeMember	third-party/jsoncpp/json_value.cpp	/^bool Value::removeMember(const char* key, const char* cend, Value* removed)$/;"	f	class:Json::Value
rep	common/util.hpp	/^  map<T, T> rep;$/;"	m	class:disjointSet
representative	models/parameters.hpp	/^  vector<operand> representative;$/;"	m	class:Parameters
resize	third-party/jsoncpp/json_value.cpp	/^void Value::resize(ArrayIndex newSize) {$/;"	f	class:Json::Value
resizeEvent	inspectors/modelgraphicsview.cpp	/^void ModelGraphicsView::resizeEvent(QResizeEvent* event) {$/;"	f	class:ModelGraphicsView
resolve	third-party/jsoncpp/json_value.cpp	/^Value Path::resolve(const Value& root, const Value& defaultValue) const {$/;"	f	class:Json::Path
resolve	third-party/jsoncpp/json_value.cpp	/^const Value& Path::resolve(const Value& root) const {$/;"	f	class:Json::Path
resolveReference	third-party/jsoncpp/json_value.cpp	/^Value& Value::resolveReference(char const* key, char const* cend)$/;"	f	class:Json::Value
resolveReference	third-party/jsoncpp/json_value.cpp	/^Value& Value::resolveReference(const char* key) {$/;"	f	class:Json::Value
resource	common/definitions.hpp	/^typedef int resource;$/;"	t
result	procedures/commonprocedures.hpp	/^  SolverResult result;$/;"	m	class:Solution
result	procedures/globalprocedures.cpp	/^  SolverResult result;$/;"	m	class:RelaxationResult	file:
result	procedures/globalprocedures.cpp	/^  SolverResult result;$/;"	m	class:ShavingResults	file:
rightMargin_	third-party/jsoncpp/json_writer.cpp	/^  unsigned int rightMargin_;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
rss	common/definitions.hpp	/^  vector<vector<register_atom>> rss;$/;"	m	class:PresolverValuePrecedeChain
run	diversifier.cpp	/^  virtual LocalSolution * run(int) {$/;"	f	class:LocalJob
run	procedures/globalprocedures.cpp	/^  virtual RelaxationResult run(int) {$/;"	f	class:PresolveRelaxationJob
run	procedures/globalprocedures.cpp	/^  virtual ShavingResults run(int) {$/;"	f	class:PresolveShavingJob
run	solver.cpp	/^  virtual Solution<LocalModel> run(int) {$/;"	f	class:LocalJob
run_test	presolver/auxiliary.hpp	/^void run_test(string name, const C& expected, const C& actual) {$/;"	f
ry	models/model.hpp	/^  IntVar ry(operand p) const { return v_ry[opr(p)]; }$/;"	f	class:Model
s	models/completemodel.cpp	/^IntVar CompleteModel::s(operand p) const {$/;"	f	class:CompleteModel
s	models/localmodel.cpp	/^IntVar LocalModel::s(operand p) const {$/;"	f	class:LocalModel
s	models/relaxedmodel.cpp	/^IntVar RelaxedModel::s(operand) const {$/;"	f	class:RelaxedModel
saturation_likelihood	models/model.cpp	/^saturation_likelihood(block b, pair<int,int> C, RangeListIter & A) const {$/;"	f	class:Model
scc	presolver/digraph.cpp	/^vector<vector<vertex> > Digraph::scc() {$/;"	f	class:Digraph
scene	inspectors/modelinspector.hpp	/^  QGraphicsScene* scene;$/;"	m	class:ModelInspector
schedulable	branchers/filters.cpp	/^bool schedulable(const Space& s, IntVar, int oi) {$/;"	f
score	procedures/commonprocedures.cpp	/^int score(SolverResult r) {$/;"	f
second	common/util.hpp	/^  J second;$/;"	m	class:DoubleChoice
sepBy	common/util.hpp	/^S sepBy(vector<S> s, S sep) {$/;"	f
setComment	third-party/jsoncpp/json_value.cpp	/^void Value::CommentInfo::setComment(const char* text, size_t len) {$/;"	f	class:Json::Value::CommentInfo
setComment	third-party/jsoncpp/json_value.cpp	/^void Value::setComment(const JSONCPP_STRING& comment, CommentPlacement placement) {$/;"	f	class:Json::Value
setComment	third-party/jsoncpp/json_value.cpp	/^void Value::setComment(const char* comment, CommentPlacement placement) {$/;"	f	class:Json::Value
setComment	third-party/jsoncpp/json_value.cpp	/^void Value::setComment(const char* comment, size_t len, CommentPlacement placement) {$/;"	f	class:Json::Value
setDefaults	third-party/jsoncpp/json_reader.cpp	/^void CharReaderBuilder::setDefaults(Json::Value* settings)$/;"	f	class:Json::CharReaderBuilder
setDefaults	third-party/jsoncpp/json_writer.cpp	/^void StreamWriterBuilder::setDefaults(Json::Value* settings)$/;"	f	class:Json::StreamWriterBuilder
setEdgeAttribute	inspectors/dot.cpp	/^setEdgeAttribute(EdgeId key, const QString &attr, const QString &val) {$/;"	f	class:Dot
setFontPointSize	inspectors/modelinspector.cpp	/^void ModelInspector::setFontPointSize(QGraphicsTextItem * t, int pointSize) {$/;"	f	class:ModelInspector
setGlobalEdgeAttribute	inspectors/dot.cpp	/^void Dot::setGlobalEdgeAttribute(const QString &attr, const QString &val) {$/;"	f	class:Dot
setGlobalGraphAttribute	inspectors/dot.cpp	/^void Dot::setGlobalGraphAttribute(const QString &attr, const QString &val) {$/;"	f	class:Dot
setGlobalNodeAttribute	inspectors/dot.cpp	/^void Dot::setGlobalNodeAttribute(const QString &attr, const QString &val) {$/;"	f	class:Dot
setNodeAttribute	inspectors/dot.cpp	/^void Dot::setNodeAttribute(const NodeId &name,$/;"	f	class:Dot
setNodeSize	inspectors/dot.cpp	/^void Dot::setNodeSize(const NodeId &name, double w, double h) {$/;"	f	class:Dot
setOffsetLimit	third-party/jsoncpp/json_value.cpp	/^void Value::setOffsetLimit(ptrdiff_t limit) { limit_ = limit; }$/;"	f	class:Json::Value
setOffsetStart	third-party/jsoncpp/json_value.cpp	/^void Value::setOffsetStart(ptrdiff_t start) { start_ = start; }$/;"	f	class:Json::Value
set_across	models/parameters.hpp	/^  vector<PresolverSetAcross> set_across;$/;"	m	class:Parameters
set_aggressiveness	models/globalmodel.hpp	/^  void set_aggressiveness(double a1) {af = a1;};$/;"	f	class:GlobalModel
set_aggressiveness	models/relaxedmodel.hpp	/^  void set_aggressiveness(double a1) {af = a1;};$/;"	f	class:RelaxedModel
set_connect_first	models/globalmodel.hpp	/^  void set_connect_first(bool cf1) {cf = cf1;};$/;"	f	class:GlobalModel
set_random	models/divmodel.hpp	/^  void set_random(Rnd r) {div_r = r;};$/;"	f	class:DivModel
set_random	models/localdivmodel.hpp	/^  void set_random(Rnd r) {div_r = r;};$/;"	f	class:LocalDivModel
set_relax	models/divmodel.hpp	/^  void set_relax(double p) {div_p = p;};$/;"	f	class:DivModel
set_relax	models/localdivmodel.hpp	/^  void set_relax(double p) {div_p = p;};$/;"	f	class:LocalDivModel
set_solver	models/divmodel.cpp	/^void DivModel::set_solver(JSONVALUE root) {$/;"	f	class:DivModel
set_solver	models/localdivmodel.cpp	/^void LocalDivModel::set_solver(JSONVALUE root) {$/;"	f	class:LocalDivModel
set_var_array	models/model.cpp	/^Model::set_var_array(int n, const IntSet & glb, const IntSet & lub) {$/;"	f	class:Model
settings_	third-party/jsoncpp/json/reader.h	/^  Json::Value settings_;$/;"	m	class:Json::CharReaderBuilder
settings_	third-party/jsoncpp/json/writer.h	/^  Json::Value settings_;$/;"	m	class:Json::StreamWriterBuilder
setup	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::setup(void) {$/;"	f	class:InfeasiblePresolver
shave_instructions	procedures/commonprocedures.cpp	/^vector<InstructionAssignment> shave_instructions(Model * base,$/;"	f
shave_local_costs	procedures/globalprocedures.cpp	/^SolverResult shave_local_costs(GlobalModel * base) {$/;"	f
shaving_threshold	models/options.hpp	/^  unsigned int shaving_threshold(void) const {return _shaving_threshold.value();}$/;"	f	class:ModelOptions
show	common/util.cpp	/^string show(const PrecedenceEdge x) {$/;"	f
show	common/util.cpp	/^string show(const PresolverAcrossItemJSON x) {$/;"	f
show	common/util.cpp	/^string show(const PresolverAcrossJSON x) {$/;"	f
show	common/util.cpp	/^string show(const PresolverAcrossTuple x) {$/;"	f
show	common/util.cpp	/^string show(const PresolverActiveTable t) {$/;"	f
show	common/util.cpp	/^string show(const PresolverBefore b) {$/;"	f
show	common/util.cpp	/^string show(const PresolverBeforeJSON b) {$/;"	f
show	common/util.cpp	/^string show(const PresolverCopyTmpTable t) {$/;"	f
show	common/util.cpp	/^string show(const PresolverDominates d) {$/;"	f
show	common/util.cpp	/^string show(const PresolverInsn2Class2 t) {$/;"	f
show	common/util.cpp	/^string show(const PresolverInsnClass t) {$/;"	f
show	common/util.cpp	/^string show(const PresolverInstrCond ic) {$/;"	f
show	common/util.cpp	/^string show(const PresolverPrecedence x) {$/;"	f
show	common/util.cpp	/^string show(const PresolverSetAcross x) {$/;"	f
show	common/util.cpp	/^string show(const PresolverValuePrecedeChain pvc) {$/;"	f
show	common/util.cpp	/^string show(const PresolverWCET x) {$/;"	f
show	common/util.cpp	/^string show(const Temporand t) {$/;"	f
show	common/util.cpp	/^string show(const UnisonConstraintExpr e) {$/;"	f
show	common/util.cpp	/^string show(const double d) {$/;"	f
show	common/util.cpp	/^string show(const int i) {$/;"	f
show	common/util.cpp	/^string show(const string s) {$/;"	f
show	common/util.hpp	/^string show(const C& container, string l = ",", string pre = "",$/;"	f
show	common/util.hpp	/^string show(const pair<C1,C2>& container, string limits = "(,)") {$/;"	f
showDomain	common/util.hpp	/^S showDomain(vector<S> s) {$/;"	f
showInstructions	common/util.cpp	/^string showInstructions(operation o, const IntVar& i, const Parameters * p) {$/;"	f
showOperand	inspectors/selectioninspector.cpp	/^QString SelectionInspector::showOperand(const Model& m, operand p) {$/;"	f	class:SelectionInspector
showOperands	inspectors/selectioninspector.cpp	/^QString SelectionInspector::showOperands(vector<QString> ops) {$/;"	f	class:SelectionInspector
show_class	common/util.cpp	/^string show_class(register_class rc, const Parameters * p) {$/;"	f
show_dead_temporaries	inspectors/modelinspector.hpp	/^  static const bool show_dead_temporaries = false;$/;"	m	class:ModelInspector
show_global_congruence	inspectors/modelinspector.cpp	/^show_global_congruence(const Model & m, global_congruence g) {$/;"	f	class:ModelInspector
show_inactive_operands	inspectors/modelinspector.hpp	/^  static const bool show_inactive_operands = false;$/;"	m	class:ModelInspector
show_inactive_operations	inspectors/modelinspector.hpp	/^  static const bool show_inactive_operations = false;$/;"	m	class:ModelInspector
show_instruction	common/util.cpp	/^string show_instruction(instruction i, operation o, const Parameters * p) {$/;"	f
show_range	common/util.hpp	/^string show_range(const T & r) {$/;"	f
show_register	common/util.cpp	/^string show_register(register_atom ra, int w, const Parameters * p) {$/;"	f
show_space	common/util.cpp	/^string show_space(register_space rs, const Parameters * p) {$/;"	f
show_window	inspectors/modelinspector.cpp	/^void ModelInspector::show_window(QRectF boundRect) {$/;"	f	class:ModelInspector
sign	inspectors/modelinspector.cpp	/^QString ModelInspector::sign(const BoolVar & v) {$/;"	f	class:ModelInspector
simplify_expr	presolver/dominance.cpp	/^UnisonConstraintExpr simplify_expr(const Parameters& input,$/;"	f
single_class	models/model.cpp	/^set<operand> Model::single_class(vector<operand> ps) const {$/;"	f	class:Model
single_nogoods	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::single_nogoods(const vector<temporand_set >& D,$/;"	f	class:InfeasiblePresolver
single_temp	models/parameters.hpp	/^  map<operand, temporary> single_temp;$/;"	m	class:Parameters
size	branchers/boolsolutionbrancher.cpp	/^    virtual size_t size(void) const {$/;"	f	class:BoolSolutionBrancher::Description
size	branchers/solutionbrancher.cpp	/^    virtual size_t size(void) const {$/;"	f	class:SolutionBrancher::Description
size	common/util.hpp	/^  virtual size_t size(void) const { return sizeof(*this); }$/;"	f	class:DoubleChoice
size	common/util.hpp	/^  virtual size_t size(void) const { return sizeof(*this); }$/;"	f	class:SingleChoice
size	third-party/jsoncpp/json_value.cpp	/^ArrayIndex Value::size() const {$/;"	f	class:Json::Value
size_t	third-party/jsoncpp/json/value.h	/^  typedef unsigned int size_t;$/;"	t	class:Json::ValueIterator
size_t	third-party/jsoncpp/json/value.h	/^  typedef unsigned int size_t;$/;"	t	class:Json::ValueIteratorBase
skipCommentTokens	third-party/jsoncpp/json_reader.cpp	/^void OurReader::skipCommentTokens(Token& token) {$/;"	f	class:Json::OurReader
skipCommentTokens	third-party/jsoncpp/json_reader.cpp	/^void Reader::skipCommentTokens(Token& token) {$/;"	f	class:Json::Reader
skipSpaces	third-party/jsoncpp/json_reader.cpp	/^void OurReader::skipSpaces() {$/;"	f	class:Json::OurReader
skipSpaces	third-party/jsoncpp/json_reader.cpp	/^void Reader::skipSpaces() {$/;"	f	class:Json::Reader
slack	models/model.cpp	/^IntVar Model::slack(operand p) {$/;"	f	class:Model
slave	models/decompdivmodel.cpp	/^bool DecompDivModel::slave(const MetaInfo& mi) {$/;"	f	class:DecompDivModel
slave	models/divmodel.cpp	/^bool DivModel::slave(const MetaInfo& mi) {$/;"	f	class:DivModel
slave	models/globalmodel.cpp	/^bool GlobalModel::slave(const MetaInfo& mi) {$/;"	f	class:GlobalModel
slave	models/localdivmodel.cpp	/^bool LocalDivModel::slave(const MetaInfo& mi) {$/;"	f	class:LocalDivModel
slave	models/localmodel.cpp	/^bool LocalModel::slave(const MetaInfo& mi) {$/;"	f	class:LocalModel
sn	branchers/pressureschedulingbrancher.cpp	/^  mutable int sn;$/;"	m	class:PressureSchedulingBrancher	file:
snprintf	third-party/jsoncpp/json_reader.cpp	25;"	d	file:
snprintf	third-party/jsoncpp/json_reader.cpp	27;"	d	file:
snprintf	third-party/jsoncpp/json_reader.cpp	29;"	d	file:
snprintf	third-party/jsoncpp/json_reader.cpp	32;"	d	file:
snprintf	third-party/jsoncpp/json_reader.cpp	35;"	d	file:
snprintf	third-party/jsoncpp/json_writer.cpp	51;"	d	file:
snprintf	third-party/jsoncpp/json_writer.cpp	53;"	d	file:
snprintf	third-party/jsoncpp/json_writer.cpp	55;"	d	file:
snprintf	third-party/jsoncpp/json_writer.cpp	58;"	d	file:
snprintf	third-party/jsoncpp/json_writer.cpp	61;"	d	file:
snprintf	third-party/jsoncpp/json_writer.cpp	68;"	d	file:
so	branchers/pressureschedulingbrancher.cpp	/^  mutable operation so;$/;"	m	class:PressureSchedulingBrancher	file:
sol	branchers/boolsolutionbrancher.cpp	/^    int sol;$/;"	m	class:BoolSolutionBrancher::Description	file:
sol	branchers/boolsolutionbrancher.cpp	/^  int* sol;$/;"	m	class:BoolSolutionBrancher	file:
sol	branchers/solutionbrancher.cpp	/^    int sol;$/;"	m	class:SolutionBrancher::Description	file:
sol	branchers/solutionbrancher.cpp	/^  int* sol;$/;"	m	class:SolutionBrancher	file:
solution	diversifier.cpp	/^  DivModel * solution;$/;"	m	class:ResultDivData	file:
solution	diversifier.cpp	/^  GlobalModel * solution;$/;"	m	class:ResultData	file:
solution	procedures/commonprocedures.hpp	/^  T * solution;$/;"	m	class:Solution
solution	procedures/localdivprocedures.hpp	/^  LocalDivModel * solution;$/;"	m	class:LocalSolution
solution	solver.cpp	/^  GlobalModel * solution;$/;"	m	class:ResultData	file:
solution_branch	branchers/boolsolutionbrancher.cpp	/^void solution_branch(Home home, const BoolVarArgs& v, const IntArgs& sol) {$/;"	f
solution_branch	branchers/solutionbrancher.cpp	/^void solution_branch(Home home, const IntVarArgs& v, const IntArgs& sol) {$/;"	f
solution_status	procedures/presolverprocedures.hpp	/^  int solution_status;$/;"	m	class:ActiveTableResult
solution_status	procedures/presolverprocedures.hpp	/^  int solution_status;$/;"	m	class:TmpTableResult
solution_to_json	models/completemodel.cpp	/^string CompleteModel::solution_to_json() const {$/;"	f	class:CompleteModel
solve_custom_portfolio	procedures/localprocedures.cpp	/^solve_custom_portfolio(LocalModel * base, GIST_OPTIONS * lo, int iteration) {$/;"	f
solve_generic_portfolio	procedures/localprocedures.cpp	/^solve_generic_portfolio(LocalModel * base, GIST_OPTIONS * lo, int iteration) {$/;"	f
solve_global	procedures/divprocedures.cpp	/^solve_global(DivModel * base, IterationState & state, vector<int> & best,$/;"	f
solve_global	procedures/globalprocedures.cpp	/^solve_global(GlobalModel * base, IterationState & state, vector<int> & best,$/;"	f
solve_global_only	models/options.hpp	/^  bool solve_global_only(void) const {return _solve_global_only.value();}$/;"	f	class:ModelOptions
solve_local	procedures/localprocedures.cpp	/^solve_local(LocalModel * base, char search, GIST_OPTIONS * lo, int iteration) {$/;"	f
solve_local_portfolio	procedures/localprocedures.cpp	/^solve_local_portfolio(LocalModel * base, GIST_OPTIONS * lo, int iteration) {$/;"	f
solve_monolithic	procedures/globalprocedures.cpp	/^Solution<GlobalModel> solve_monolithic(GlobalModel * base, GIST_OPTIONS * go) {$/;"	f
solve_monolithic_parallel	procedures/globalprocedures.cpp	/^solve_monolithic_parallel(GlobalModel * base, GIST_OPTIONS *) {$/;"	f
solved	procedures/commonprocedures.hpp	/^bool solved(T * problem, vector<T *> solutions) {$/;"	f
solver	models/divmodel.hpp	/^  SolverParameters *solver;$/;"	m	class:DivModel
solver	models/localdivmodel.hpp	/^  SolverParameters *solver;$/;"	m	class:LocalDivModel
solver	models/solver-parameters.hpp	/^  string solver;$/;"	m	class:SolverParameters
solver_file	models/options.hpp	/^  string solver_file(void) const {return _solver_file.value();}$/;"	f	class:ModelOptions
solver_time	models/solver-parameters.hpp	/^  int solver_time;$/;"	m	class:SolverParameters
solving_threshold	models/options.hpp	/^  unsigned int solving_threshold(void) const {return _solving_threshold.value();}$/;"	f	class:ModelOptions
solving_time	diversifier.cpp	/^  int solving_time;$/;"	m	class:ResultData	file:
solving_time	diversifier.cpp	/^  int solving_time;$/;"	m	class:ResultDivData	file:
solving_time	solver.cpp	/^  int solving_time;$/;"	m	class:ResultData	file:
sort_increasing_T	presolver/dominance.cpp	/^void sort_increasing_T(map<vector<temporary>,vector<temporary>>& M,$/;"	f
sorted_blocks	procedures/commonprocedures.cpp	/^sorted_blocks(Parameters * input, map<block, SolverResult> & latest_result) {$/;"	f
sorted_exprs	presolver/auxiliary.cpp	/^bool sorted_exprs(const presolver_conj& exprs) {$/;"	f
sout_	third-party/jsoncpp/json/writer.h	/^  JSONCPP_OSTREAM* sout_;  \/\/ not owned; will not delete$/;"	m	class:Json::StreamWriter
space	models/parameters.hpp	/^  vector<register_space> space;$/;"	m	class:Parameters
spacename	models/parameters.hpp	/^  vector<string> spacename;$/;"	m	class:Parameters
spilling_cost	models/globalmodel.cpp	/^double GlobalModel::spilling_cost(int w, block b, RangeListIter &) const {$/;"	f	class:GlobalModel
split_chunks_if_alldiff	presolver/infeasible_presolver.cpp	/^InfeasiblePresolver::split_chunks_if_alldiff(const map<vector<temporary>, temporand_set >& M) {$/;"	f	class:InfeasiblePresolver
src	models/model.cpp	/^operand Model::src(operation o) const {$/;"	f	class:Model
sscanf	third-party/jsoncpp/json_reader.cpp	40;"	d	file:
stackLimit_	third-party/jsoncpp/json_reader.cpp	/^  int stackLimit_;$/;"	m	class:Json::OurFeatures	file:
stackLimit_g	third-party/jsoncpp/json_reader.cpp	/^static size_t const stackLimit_g = JSONCPP_DEPRECATED_STACK_LIMIT; \/\/ see readValue()$/;"	v	file:
start	branchers/boolsolutionbrancher.cpp	/^  mutable int start;$/;"	m	class:BoolSolutionBrancher	file:
start	branchers/solutionbrancher.cpp	/^  mutable int start;$/;"	m	class:SolutionBrancher	file:
start	models/divmodel.hpp	/^  uint start;$/;"	m	struct:__anon4
start_	third-party/jsoncpp/json/value.h	/^  ptrdiff_t start_;$/;"	m	class:Json::Value
start_	third-party/jsoncpp/json_reader.cpp	/^    Location start_;$/;"	m	class:Json::OurReader::Token	file:
staticMetaObject	moc_modelgraphicsview.cpp	/^const QMetaObject ModelGraphicsView::staticMetaObject = {$/;"	m	class:ModelGraphicsView	file:
staticMetaObjectExtraData	moc_modelgraphicsview.cpp	/^const QMetaObjectExtraData ModelGraphicsView::staticMetaObjectExtraData = {$/;"	m	class:ModelGraphicsView	file:
status	branchers/boolsolutionbrancher.cpp	/^  virtual bool status(const Space&) const {$/;"	f	class:BoolSolutionBrancher
status	branchers/pressureschedulingbrancher.cpp	/^  virtual bool status(const Space& home) const {$/;"	f	class:PressureSchedulingBrancher
status	branchers/routingbrancher.cpp	/^  virtual bool status(const Space&) const {$/;"	f	class:RoutingBrancher
status	branchers/solutionbrancher.cpp	/^  virtual bool status(const Space&) const {$/;"	f	class:SolutionBrancher
status_lb	procedures/commonprocedures.cpp	/^Gecode::SpaceStatus status_lb(GlobalModel * base) {$/;"	f
std	third-party/jsoncpp/json/value.h	/^namespace std {$/;"	n
step_aggressiveness	models/options.hpp	/^  double step_aggressiveness(void) const {return _step_aggressiveness.value();}$/;"	f	class:ModelOptions
stop	procedures/commonprocedures.cpp	/^bool IterationState::stop(ModelOptions * options) {$/;"	f	class:IterationState
storage_	third-party/jsoncpp/json/value.h	/^      StringStorage storage_;$/;"	m	union:Json::Value::CZString::__anon3
strictMode	third-party/jsoncpp/json_reader.cpp	/^Features Features::strictMode() {$/;"	f	class:Json::Features
strictMode	third-party/jsoncpp/json_reader.cpp	/^void CharReaderBuilder::strictMode(Json::Value* settings)$/;"	f	class:Json::CharReaderBuilder
strictRoot_	third-party/jsoncpp/json/features.h	/^  bool strictRoot_;$/;"	m	class:Json::Features
strictRoot_	third-party/jsoncpp/json_reader.cpp	/^  bool strictRoot_;$/;"	m	class:Json::OurFeatures	file:
strictly_congr	models/parameters.hpp	/^  vector<vector<operand> > strictly_congr;$/;"	m	class:Parameters
stringValue	third-party/jsoncpp/json/value.h	/^  stringValue,   \/\/\/< UTF-8 string value$/;"	e	enum:Json::ValueType
string_	third-party/jsoncpp/json/value.h	/^    char* string_;  \/\/ actually ptr to unsigned, followed by str, unless !allocated_$/;"	m	union:Json::Value::ValueHolder
strip	presolver/auxiliary.cpp	/^vector<operand> strip(const temporand_set& C){$/;"	f
strnpbrk	third-party/jsoncpp/json_writer.cpp	/^static char const* strnpbrk(char const* s, char const* accept, size_t n) {$/;"	f	namespace:Json
subseteq	common/util.hpp	/^bool subseteq(const C1& s1, const C2& s2) {$/;"	f
subsumed_nogood	presolver/infeasible_presolver.cpp	/^bool InfeasiblePresolver::subsumed_nogood(const presolver_conj& conj) {$/;"	f	class:InfeasiblePresolver
subsumed_nogood_map	presolver/infeasible_presolver.hpp	/^  map<presolver_conj,bool> subsumed_nogood_map;$/;"	m	class:InfeasiblePresolver
subsumed_resources	models/parameters.hpp	/^  vector<vector<resource> > subsumed_resources;$/;"	m	class:Parameters
subsumed_resources	presolver/precedences.cpp	/^void subsumed_resources(Parameters& input) {$/;"	f
subsumes	presolver/auxiliary.cpp	/^bool subsumes(const presolver_conj& a, const presolver_conj& b) {$/;"	f
succ	models/parameters.hpp	/^  map<operand, vector<operand> > succ;$/;"	m	class:Parameters
sum_of	common/util.hpp	/^T sum_of(const vector<T> & v) {$/;"	f
suppress_copies	presolver/unsafe_temp.cpp	/^void suppress_copies(Parameters& input, block b, vector<presolver_conj>& Nogoods) {$/;"	f
swap	third-party/jsoncpp/json/value.h	/^inline void swap(Json::Value& a, Json::Value& b) { a.swap(b); }$/;"	f	namespace:std
swap	third-party/jsoncpp/json_value.cpp	/^void Value::CZString::swap(CZString& other) {$/;"	f	class:Json::Value::CZString
swap	third-party/jsoncpp/json_value.cpp	/^void Value::swap(Value& other) {$/;"	f	class:Json::Value
swapPayload	third-party/jsoncpp/json_value.cpp	/^void Value::swapPayload(Value& other) {$/;"	f	class:Json::Value
t	branchers/routingbrancher.cpp	/^  ViewArray<Int::IntView> t;$/;"	m	class:RoutingBrancher	file:
t	common/definitions.cpp	/^Temporand Temporand::t(int id) {$/;"	f	class:Temporand
t	common/definitions.hpp	/^  temporary t;$/;"	m	class:PresolverAcrossItem
t	common/definitions.hpp	/^  temporary t;$/;"	m	class:PresolverAcrossItemJSON
t	common/definitions.hpp	/^  temporary t;$/;"	m	class:PresolverAcrossTuple
t	presolver/across.hpp	/^  temporary t;$/;"	m	class:PresolverSetAcrossTuple
t_preassign	models/parameters.hpp	/^  vector<int> t_preassign;$/;"	m	class:Parameters
t_preassigned_callee_saved	presolver/auxiliary.cpp	/^bool t_preassigned_callee_saved(const Parameters& input, temporary t) {$/;"	f
t_preassigned_caller_saved	presolver/auxiliary.cpp	/^bool t_preassigned_caller_saved(const Parameters& input, temporary t) {$/;"	f
t_preassigned_not	presolver/auxiliary.cpp	/^bool t_preassigned_not(const Parameters& input, temporary t) {$/;"	f
table	models/parameters.hpp	/^  vector<vector<vector<register_atom> > > table;$/;"	m	class:Parameters
tabling	presolver/presolver-options.hpp	/^  bool tabling(void) const {return _tabling.value();}$/;"	f	class:PresolverOptions
tb	models/parameters.hpp	/^  vector<block> tb;$/;"	m	class:Parameters
temp	models/model.hpp	/^  int temp(temporary t) const { return t - T()[0]; }$/;"	f	class:Model
temp_def	presolver/auxiliary.cpp	/^operand temp_def(const Parameters& input, temporary t) {$/;"	f
temp_domain	models/parameters.hpp	/^  vector<vector<register_atom> > temp_domain;$/;"	m	class:Parameters
temp_domain	presolver/unsafe_temp.cpp	/^void temp_domain(Parameters& input) {$/;"	f
temp_domination	presolver/dominance.cpp	/^void temp_domination(Parameters & input) {$/;"	f
temp_is_unsafe	presolver/unsafe_temp.cpp	/^bool temp_is_unsafe(const Parameters& input, const temporary t) {$/;"	f
temp_oper	presolver/auxiliary.cpp	/^operation temp_oper(const Parameters& input, temporary t) {$/;"	f
temp_uses	presolver/auxiliary.cpp	/^vector<operand> temp_uses(const Parameters& input, temporary t) {$/;"	f
temp_width	presolver/auxiliary.cpp	/^int temp_width(const Parameters& input, temporary t) {$/;"	f
temporand_set	presolver/auxiliary.hpp	/^typedef vector<Temporand> temporand_set;         \/\/ TODO use vectors instead of set$/;"	t
temporaries	inspectors/modelinspector.cpp	/^ModelInspector::temporaries(const Model& m, block b) const {$/;"	f	class:ModelInspector
temporaries	models/solver-parameters.hpp	/^  vector<int> temporaries;$/;"	m	class:SolverParameters
temporary	common/definitions.hpp	/^typedef int temporary;$/;"	t
temporary_index	models/parameters.hpp	/^  vector<map<temporary, unsigned int> > temporary_index;$/;"	m	class:Parameters
temps	common/definitions.hpp	/^  vector<temporary> temps;$/;"	m	class:PresolverDominates
temps	models/parameters.hpp	/^  vector<vector<temporary> > temps;$/;"	m	class:Parameters
temps_but_null	presolver/infeasible_presolver.hpp	/^  vector<vector<temporary>> temps_but_null;$/;"	m	class:InfeasiblePresolver
temps_to_var_args	models/model.hpp	/^  IntVarArgs temps_to_var_args(const IntVarArray& vararray, T& indexes)$/;"	f	class:Model
test	presolver/presolver-options.hpp	/^  bool test(void) const {return _test.value();}$/;"	f	class:PresolverOptions
test_redundancy	presolver/precedences.cpp	/^void test_redundancy(Parameters & input, GlobalModel * gm) {$/;"	f
throwLogicError	third-party/jsoncpp/json_value.cpp	/^JSONCPP_NORETURN void throwLogicError(JSONCPP_STRING const& msg)$/;"	f	namespace:Json
throwRuntimeError	third-party/jsoncpp/json_value.cpp	/^JSONCPP_NORETURN void throwRuntimeError(JSONCPP_STRING const& msg)$/;"	f	namespace:Json
tidy	presolver/dominance.cpp	/^void tidy(Parameters & input) {$/;"	f
timeout	models/options.hpp	/^  double timeout(void) const {return _timeout.value();}$/;"	f	class:ModelOptions
timeout	presolver/auxiliary.cpp	/^bool timeout(Support::Timer & t, PresolverOptions & options, string pass,$/;"	f
timeout	presolver/presolver-options.hpp	/^  double timeout(void) const {return _timeout.value();}$/;"	f	class:PresolverOptions
timeout_exit	solver.cpp	/^void timeout_exit(GlobalModel * base, const vector<ResultData> & results,$/;"	f
timeout_status	procedures/presolverprocedures.hpp	/^  int timeout_status;$/;"	m	class:ActiveTableResult
timeout_status	procedures/presolverprocedures.hpp	/^  int timeout_status;$/;"	m	class:TmpTableResult
timer	presolver/infeasible_presolver.hpp	/^  Support::Timer& timer;$/;"	m	class:InfeasiblePresolver
tmp	models/parameters.hpp	/^  vector<vector<temporary> > tmp;$/;"	m	class:Parameters
tmp_subsumes	presolver/dominance.cpp	/^bool tmp_subsumes(vector<int> T1, vector<int> T2, temporary k) {$/;"	f
tmp_tables	models/parameters.hpp	/^  vector<PresolverCopyTmpTable> tmp_tables;$/;"	m	class:Parameters
toFDSet	presolver.cpp	/^void toFDSet(vector<vector<int>>& xs, vector<FDSet>& ys) {$/;"	f
toFDSetInc	presolver.cpp	/^void toFDSetInc(vector<vector<int>>& xs, vector<FDSet>& ys) {$/;"	f
toStyledString	third-party/jsoncpp/json_value.cpp	/^JSONCPP_STRING Value::toStyledString() const {$/;"	f	class:Json::Value
to_int_vector	common/jsonutil.cpp	/^vector<int> to_int_vector(IntVarArray va) {$/;"	f
to_json	common/jsonutil.cpp	/^string to_json(vector<int> v) {$/;"	f
to_set	common/util.hpp	/^set<T> to_set(const vector<T> & v) {$/;"	f
to_vector	common/util.hpp	/^vector<T> to_vector(const set<T> & s) {$/;"	f
tokenArrayBegin	third-party/jsoncpp/json_reader.cpp	/^    tokenArrayBegin,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenArrayEnd	third-party/jsoncpp/json_reader.cpp	/^    tokenArrayEnd,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenArraySeparator	third-party/jsoncpp/json_reader.cpp	/^    tokenArraySeparator,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenComment	third-party/jsoncpp/json_reader.cpp	/^    tokenComment,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenEndOfStream	third-party/jsoncpp/json_reader.cpp	/^    tokenEndOfStream = 0,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenError	third-party/jsoncpp/json_reader.cpp	/^    tokenError$/;"	e	enum:Json::OurReader::TokenType	file:
tokenFalse	third-party/jsoncpp/json_reader.cpp	/^    tokenFalse,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenMemberSeparator	third-party/jsoncpp/json_reader.cpp	/^    tokenMemberSeparator,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNaN	third-party/jsoncpp/json_reader.cpp	/^    tokenNaN,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNegInf	third-party/jsoncpp/json_reader.cpp	/^    tokenNegInf,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNull	third-party/jsoncpp/json_reader.cpp	/^    tokenNull,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenNumber	third-party/jsoncpp/json_reader.cpp	/^    tokenNumber,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenObjectBegin	third-party/jsoncpp/json_reader.cpp	/^    tokenObjectBegin,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenObjectEnd	third-party/jsoncpp/json_reader.cpp	/^    tokenObjectEnd,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenPosInf	third-party/jsoncpp/json_reader.cpp	/^    tokenPosInf,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenString	third-party/jsoncpp/json_reader.cpp	/^    tokenString,$/;"	e	enum:Json::OurReader::TokenType	file:
tokenTrue	third-party/jsoncpp/json_reader.cpp	/^    tokenTrue,$/;"	e	enum:Json::OurReader::TokenType	file:
token_	third-party/jsoncpp/json_reader.cpp	/^    Token token_;$/;"	m	class:Json::OurReader::ErrorInfo	file:
topLeftPos	inspectors/dot.hpp	/^  QPointF topLeftPos;$/;"	m	class:DotEdge
topLeftPos	inspectors/dot.hpp	/^  QPointF topLeftPos;$/;"	m	class:DotNode
total_threads	models/options.hpp	/^  unsigned int total_threads(void) const {return _total_threads.value();}$/;"	f	class:ModelOptions
totally_in_register_space	models/model.cpp	/^BoolVar Model::totally_in_register_space(temporary t, register_space rs) {$/;"	f	class:Model
transpose	presolver/digraph.cpp	/^Digraph Digraph::transpose() {$/;"	f	class:Digraph
trim_clump	presolver/dominance.cpp	/^vector<vector<int>> trim_clump(set<vector<int>> C, temporary k) {$/;"	f
trim_tmp_tables	presolver/dominance.cpp	/^vector<vector<int>> trim_tmp_tables(at_map S, temporary k) {$/;"	f
ts	common/definitions.hpp	/^  vector<temporary> ts;$/;"	m	class:PresolverValuePrecedeChain
tsets	common/definitions.hpp	/^  vector<vector<temporary> > tsets;$/;"	m	class:PresolverSetAcross
tuples	common/definitions.hpp	/^  vector<vector<int> > tuples;$/;"	m	class:PresolverActiveTable
tuples	common/definitions.hpp	/^  vector<vector<int> > tuples;$/;"	m	class:PresolverCopyTmpTable
type	common/definitions.cpp	/^TemporandType Temporand::type() const {$/;"	f	class:Temporand
type	models/parameters.hpp	/^  vector<int> type;$/;"	m	class:Parameters
type	third-party/jsoncpp/json_value.cpp	/^ValueType Value::type() const { return type_; }$/;"	f	class:Json::Value
typeColor	inspectors/modelinspector.hpp	/^  vector<QColor> typeColor;$/;"	m	class:ModelInspector
type_	third-party/jsoncpp/json_reader.cpp	/^    TokenType type_;$/;"	m	class:Json::OurReader::Token	file:
type_color	inspectors/modelinspector.cpp	/^QColor ModelInspector::type_color(int type) {$/;"	f	class:ModelInspector
u	models/completemodel.cpp	/^BoolVar CompleteModel::u(operand p, temporary t) const {$/;"	f	class:CompleteModel
u	models/localmodel.cpp	/^BoolVar LocalModel::u(operand p, temporary t) const {$/;"	f	class:LocalModel
u	models/relaxedmodel.cpp	/^BoolVar RelaxedModel::u(operand p, temporary t) const {$/;"	f	class:RelaxedModel
u	presolver/across.hpp	/^  temporary u;$/;"	m	class:PresolverSetAcrossTuple
uintToString	third-party/jsoncpp/json_tool.h	/^static inline void uintToString(LargestUInt value, char*& current) {$/;"	f	namespace:Json
uintToStringBufferSize	third-party/jsoncpp/json_tool.h	/^  uintToStringBufferSize = 3 * sizeof(LargestUInt) + 1$/;"	e	enum:Json::__anon1
uintValue	third-party/jsoncpp/json/value.h	/^  uintValue,     \/\/\/< unsigned integer value$/;"	e	enum:Json::ValueType
uint_	third-party/jsoncpp/json/value.h	/^    LargestUInt uint_;$/;"	m	union:Json::Value::ValueHolder
ultimate_source	models/parameters.hpp	/^  vector<temporary> ultimate_source;$/;"	m	class:Parameters
unindent	third-party/jsoncpp/json_writer.cpp	/^void BuiltStyledStreamWriter::unindent() {$/;"	f	class:Json::BuiltStyledStreamWriter
unindent	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::unindent() {$/;"	f	class:Json::StyledStreamWriter
unindent	third-party/jsoncpp/json_writer.cpp	/^void StyledWriter::unindent() {$/;"	f	class:Json::StyledWriter
unnecessary_activation_classes	models/globalmodel.cpp	/^vector<activation_class> GlobalModel::unnecessary_activation_classes() {$/;"	f	class:GlobalModel
unsat_report	solver.cpp	/^string unsat_report(const GlobalModel * base) {$/;"	f
us	models/model.hpp	/^  IntVar us(temporary t) const { return v_us[temp(t)]; }$/;"	f	class:Model
use	models/parameters.hpp	/^  vector<bool> use;$/;"	m	class:Parameters
useSpecialFloats_	third-party/jsoncpp/json_writer.cpp	/^  bool useSpecialFloats_ : 1;$/;"	m	struct:Json::BuiltStyledStreamWriter	file:
use_copies	models/parameters.hpp	/^  vector<vector<operation> > use_copies;$/;"	m	class:Parameters
use_optimal_for_diversification	models/options.hpp	/^  bool use_optimal_for_diversification(void) const {return _use_optimal_for_diversification.value();}$/;"	f	class:ModelOptions
users	models/model.hpp	/^  SetVar users(temporary t) const { return v_users[temp(t)]; }$/;"	f	class:Model
users	models/parameters.hpp	/^  vector<vector<operand> > users;$/;"	m	class:Parameters
v	branchers/boolsolutionbrancher.cpp	/^  ViewArray<BoolView> v;$/;"	m	class:BoolSolutionBrancher	file:
v	branchers/solutionbrancher.cpp	/^  ViewArray<IntView> v;$/;"	m	class:SolutionBrancher	file:
v_a	models/model.hpp	/^  BoolVarArray v_a;$/;"	m	class:Model
v_al	models/model.hpp	/^  BoolVarArray v_al;$/;"	m	class:Model
v_ali	models/globalmodel.hpp	/^  SetVarArray v_ali;$/;"	m	class:GlobalModel
v_c	models/model.hpp	/^  IntVarArray v_c;$/;"	m	class:Model
v_diff	models/divmodel.hpp	/^  IntVarArray v_diff;$/;"	m	class:DivModel
v_diff	models/localdivmodel.hpp	/^  IntVarArray v_diff;$/;"	m	class:LocalDivModel
v_f	models/completemodel.hpp	/^  IntVarArray v_f;$/;"	m	class:CompleteModel
v_f	models/localmodel.hpp	/^  IntVarArray v_f;$/;"	m	class:LocalModel
v_gadget	models/divmodel.hpp	/^  IntVarArray v_gadget;$/;"	m	class:DivModel
v_gc	models/divmodel.hpp	/^  IntVarArray v_gc;$/;"	m	class:DivModel
v_gf	models/completemodel.hpp	/^  IntVarArray v_gf;$/;"	m	class:CompleteModel
v_hamm	models/divmodel.hpp	/^  IntVarArray v_hamm;$/;"	m	class:DivModel
v_hamm	models/localdivmodel.hpp	/^  IntVarArray v_hamm;$/;"	m	class:LocalDivModel
v_i	models/model.hpp	/^  IntVarArray v_i;$/;"	m	class:Model
v_lat	models/model.hpp	/^  IntVarArray v_lat;$/;"	m	class:Model
v_ld	models/model.hpp	/^  IntVarArray v_ld;$/;"	m	class:Model
v_le	models/model.hpp	/^  IntVarArray v_le;$/;"	m	class:Model
v_ls	models/model.hpp	/^  IntVarArray v_ls;$/;"	m	class:Model
v_lt	models/model.hpp	/^  IntVarArray v_lt;$/;"	m	class:Model
v_oa	models/globalmodel.hpp	/^  BoolVarArray v_oa;$/;"	m	class:GlobalModel
v_oc	models/divmodel.hpp	/^  SetVarArray v_oc;$/;"	m	class:DivModel
v_p	models/localmodel.hpp	/^  BoolVarArray v_p;$/;"	m	class:LocalModel
v_p	models/model.hpp	/^  BoolVarArray v_p;$/;"	m	class:Model
v_pal	models/globalmodel.hpp	/^  BoolVarArray v_pal;$/;"	m	class:GlobalModel
v_pals	models/globalmodel.hpp	/^  SetVarArray v_pals;$/;"	m	class:GlobalModel
v_r	models/model.hpp	/^  IntVarArray v_r;$/;"	m	class:Model
v_reghamm	models/divmodel.hpp	/^  IntVarArray v_reghamm;$/;"	m	class:DivModel
v_ry	models/model.hpp	/^  IntVarArray v_ry;$/;"	m	class:Model
v_s	models/model.hpp	/^  IntVarArray v_s;$/;"	m	class:Model
v_u	models/model.hpp	/^  BoolVarArray v_u;$/;"	m	class:Model
v_us	models/model.hpp	/^  IntVarArray v_us;$/;"	m	class:Model
v_users	models/model.hpp	/^  SetVarArray v_users;$/;"	m	class:Model
v_x	models/model.hpp	/^  BoolVarArray v_x;$/;"	m	class:Model
v_y	models/model.hpp	/^  IntVarArray v_y;$/;"	m	class:Model
validate	third-party/jsoncpp/json_reader.cpp	/^bool CharReaderBuilder::validate(Json::Value* invalid) const$/;"	f	class:Json::CharReaderBuilder
validate	third-party/jsoncpp/json_writer.cpp	/^bool StreamWriterBuilder::validate(Json::Value* invalid) const$/;"	f	class:Json::StreamWriterBuilder
valueToQuotedString	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING valueToQuotedString(const char* value) {$/;"	f	namespace:Json
valueToQuotedStringN	third-party/jsoncpp/json_writer.cpp	/^static JSONCPP_STRING valueToQuotedStringN(const char* value, unsigned length) {$/;"	f	namespace:Json
valueToString	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING valueToString(Int value) {$/;"	f	namespace:Json
valueToString	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING valueToString(LargestInt value) {$/;"	f	namespace:Json
valueToString	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING valueToString(LargestUInt value) {$/;"	f	namespace:Json
valueToString	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING valueToString(UInt value) {$/;"	f	namespace:Json
valueToString	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING valueToString(bool value) { return value ? "true" : "false"; }$/;"	f	namespace:Json
valueToString	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING valueToString(double value) { return valueToString(value, false, 17); }$/;"	f	namespace:Json
valueToString	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING valueToString(double value, bool useSpecialFloats, unsigned int precision) {$/;"	f	namespace:Json::__anon2
value_	third-party/jsoncpp/json/value.h	/^  } value_;$/;"	m	class:Json::Value	typeref:union:Json::Value::ValueHolder
value_precede_chains	models/parameters.hpp	/^  vector<PresolverValuePrecedeChain> value_precede_chains;$/;"	m	class:Parameters
value_precede_chains	procedures/commonprocedures.cpp	/^value_precede_chains(Parameters & input, Model * m, bool global, block b) {$/;"	f
value_type	third-party/jsoncpp/json/value.h	/^  typedef Value value_type;$/;"	t	class:Json::ValueIterator
value_type	third-party/jsoncpp/json/value.h	/^  typedef const Value value_type;$/;"	t	class:Json::ValueConstIterator
var	models/model.hpp	/^  BoolVar var(const BoolExpr &e) {return expr(*this, e, ipl);}$/;"	f	class:Model
var	models/model.hpp	/^  IntVar var(const LinIntExpr &e) {return expr(*this, e, ipl);}$/;"	f	class:Model
var_vector	common/util.cpp	/^vector<int> var_vector(const IntVarArgs & v) {$/;"	f
vec	presolver.cpp	/^  vector<int> vec;$/;"	m	class:FDSet	file:
vector_contains	presolver/digraph.hpp	/^bool vector_contains(const vector<T>& v, const T& e){$/;"	f
vector_difference	presolver/digraph.hpp	/^vector<T> vector_difference(const vector<T>& v1, const vector<T>& v2){$/;"	f
vector_erase	presolver/auxiliary.hpp	/^void vector_erase(vector<T>& v, const T& e){$/;"	f
vector_erase	presolver/digraph.cpp	/^void vector_erase(vector<T>& v, const T& e){$/;"	f
vector_insert	presolver/auxiliary.hpp	/^void vector_insert(vector<T>& v, const T& e){$/;"	f
vector_insert	presolver/digraph.cpp	/^void vector_insert(vector<T>& v, const T& e){$/;"	f
vector_intersection	presolver/digraph.hpp	/^vector<T> vector_intersection(const vector<T>& v1, const vector<T>& v2){$/;"	f
verbose	models/options.hpp	/^  bool verbose(void) const {return _verbose.value();}$/;"	f	class:ModelOptions
verbose	presolver/presolver-options.hpp	/^  bool verbose(void) const {return _verbose.value();}$/;"	f	class:PresolverOptions
vertex	presolver/digraph.hpp	/^typedef int vertex;$/;"	t
vertices	presolver/digraph.cpp	/^vector<vertex> Digraph::vertices() const {$/;"	f	class:Digraph
view	inspectors/modelinspector.hpp	/^  ModelGraphicsView* view;$/;"	m	class:ModelInspector
wcet	models/parameters.hpp	/^  vector<PresolverWCET> wcet;$/;"	m	class:Parameters
wheelEvent	inspectors/modelgraphicsview.cpp	/^void ModelGraphicsView::wheelEvent(QWheelEvent* event) {$/;"	f	class:ModelGraphicsView
width	inspectors/dot.hpp	/^  double  width, height;$/;"	m	class:DotNode
width	inspectors/dot.hpp	/^  double width, height;$/;"	m	class:DotEdge
width	models/parameters.hpp	/^  vector<int> width;$/;"	m	class:Parameters
write	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING FastWriter::write(const Value& root) {$/;"	f	class:Json::FastWriter
write	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING StyledWriter::write(const Value& root) {$/;"	f	class:Json::StyledWriter
write	third-party/jsoncpp/json_writer.cpp	/^int BuiltStyledStreamWriter::write(Value const& root, JSONCPP_OSTREAM* sout)$/;"	f	class:Json::BuiltStyledStreamWriter
write	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::write(JSONCPP_OSTREAM& out, const Value& root) {$/;"	f	class:Json::StyledStreamWriter
writeArrayValue	third-party/jsoncpp/json_writer.cpp	/^void BuiltStyledStreamWriter::writeArrayValue(Value const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeArrayValue	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::writeArrayValue(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
writeArrayValue	third-party/jsoncpp/json_writer.cpp	/^void StyledWriter::writeArrayValue(const Value& value) {$/;"	f	class:Json::StyledWriter
writeCommentAfterValueOnSameLine	third-party/jsoncpp/json_writer.cpp	/^void BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine(Value const& root) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeCommentAfterValueOnSameLine	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::writeCommentAfterValueOnSameLine(const Value& root) {$/;"	f	class:Json::StyledStreamWriter
writeCommentAfterValueOnSameLine	third-party/jsoncpp/json_writer.cpp	/^void StyledWriter::writeCommentAfterValueOnSameLine(const Value& root) {$/;"	f	class:Json::StyledWriter
writeCommentBeforeValue	third-party/jsoncpp/json_writer.cpp	/^void BuiltStyledStreamWriter::writeCommentBeforeValue(Value const& root) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeCommentBeforeValue	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::writeCommentBeforeValue(const Value& root) {$/;"	f	class:Json::StyledStreamWriter
writeCommentBeforeValue	third-party/jsoncpp/json_writer.cpp	/^void StyledWriter::writeCommentBeforeValue(const Value& root) {$/;"	f	class:Json::StyledWriter
writeIndent	third-party/jsoncpp/json_writer.cpp	/^void BuiltStyledStreamWriter::writeIndent() {$/;"	f	class:Json::BuiltStyledStreamWriter
writeIndent	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::writeIndent() {$/;"	f	class:Json::StyledStreamWriter
writeIndent	third-party/jsoncpp/json_writer.cpp	/^void StyledWriter::writeIndent() {$/;"	f	class:Json::StyledWriter
writeString	third-party/jsoncpp/json_writer.cpp	/^JSONCPP_STRING writeString(StreamWriter::Factory const& builder, Value const& root) {$/;"	f	namespace:Json
writeValue	third-party/jsoncpp/json_writer.cpp	/^void BuiltStyledStreamWriter::writeValue(Value const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeValue	third-party/jsoncpp/json_writer.cpp	/^void FastWriter::writeValue(const Value& value) {$/;"	f	class:Json::FastWriter
writeValue	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::writeValue(const Value& value) {$/;"	f	class:Json::StyledStreamWriter
writeValue	third-party/jsoncpp/json_writer.cpp	/^void StyledWriter::writeValue(const Value& value) {$/;"	f	class:Json::StyledWriter
writeWithIndent	third-party/jsoncpp/json_writer.cpp	/^void BuiltStyledStreamWriter::writeWithIndent(JSONCPP_STRING const& value) {$/;"	f	class:Json::BuiltStyledStreamWriter
writeWithIndent	third-party/jsoncpp/json_writer.cpp	/^void StyledStreamWriter::writeWithIndent(const JSONCPP_STRING& value) {$/;"	f	class:Json::StyledStreamWriter
writeWithIndent	third-party/jsoncpp/json_writer.cpp	/^void StyledWriter::writeWithIndent(const JSONCPP_STRING& value) {$/;"	f	class:Json::StyledWriter
write_json_vector_int	presolver.cpp	/^string write_json_vector_int(string label, vector<int> v)$/;"	f
x	models/completemodel.cpp	/^BoolVar CompleteModel::x(operand p) const {$/;"	f	class:CompleteModel
x	models/localmodel.cpp	/^BoolVar LocalModel::x(operand p) const {$/;"	f	class:LocalModel
x	models/relaxedmodel.cpp	/^BoolVar RelaxedModel::x(operand p) const {$/;"	f	class:RelaxedModel
xchg_nogoods	presolver/infeasible_presolver.cpp	/^void InfeasiblePresolver::xchg_nogoods(vector<presolver_conj>& Nogoods) {$/;"	f	class:InfeasiblePresolver
y	models/model.hpp	/^  IntVar y(operand p) const { return v_y[opr(p)]; }$/;"	f	class:Model
zero	models/model.hpp	/^  IntVar zero, one;$/;"	m	class:Model
~CZString	third-party/jsoncpp/json_value.cpp	/^Value::CZString::~CZString() {$/;"	f	class:Json::Value::CZString
~CharReader	third-party/jsoncpp/json/reader.h	/^  virtual ~CharReader() {}$/;"	f	class:Json::CharReader
~CharReaderBuilder	third-party/jsoncpp/json_reader.cpp	/^CharReaderBuilder::~CharReaderBuilder()$/;"	f	class:Json::CharReaderBuilder
~CommentInfo	third-party/jsoncpp/json_value.cpp	/^Value::CommentInfo::~CommentInfo() {$/;"	f	class:Json::Value::CommentInfo
~DataFlowGraph	inspectors/dataflowinspector.hpp	/^  ~DataFlowGraph() {}$/;"	f	class:DataFlowGraph
~Dot	inspectors/dot.cpp	/^Dot::~Dot() {$/;"	f	class:Dot
~Factory	third-party/jsoncpp/json/reader.h	/^    virtual ~Factory() {}$/;"	f	class:Json::CharReader::Factory
~Factory	third-party/jsoncpp/json_writer.cpp	/^StreamWriter::Factory::~Factory()$/;"	f	class:Json::StreamWriter::Factory
~PrecedenceGraph	inspectors/precedenceinspector.hpp	/^  ~PrecedenceGraph() {}$/;"	f	class:PrecedenceGraph
~StreamWriter	third-party/jsoncpp/json_writer.cpp	/^StreamWriter::~StreamWriter()$/;"	f	class:Json::StreamWriter
~StreamWriterBuilder	third-party/jsoncpp/json_writer.cpp	/^StreamWriterBuilder::~StreamWriterBuilder()$/;"	f	class:Json::StreamWriterBuilder
~Value	third-party/jsoncpp/json_value.cpp	/^Value::~Value() {$/;"	f	class:Json::Value
~Writer	third-party/jsoncpp/json_writer.cpp	/^Writer::~Writer() {}$/;"	f	class:Json::Writer
